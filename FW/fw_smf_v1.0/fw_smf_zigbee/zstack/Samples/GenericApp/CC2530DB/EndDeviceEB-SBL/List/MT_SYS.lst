###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                29/Jul/2016  15:40:40
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\mt\MT_SYS.c
#    Command line       =  
#        -f "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1235
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=2000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Components\mt\MT_SYS.c" -D NWK_AUTO_POLL -D ZTOOL_P1 -D MT_TASK -D
#        MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -D
#        MAKE_CRC_SHDW -lC "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\List\"
#        -lA "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\List\"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\8470p\Desktop\Z-Stack Mesh
#        1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\Obj\"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\List\MT_SYS.lst
#    Object file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\Obj\MT_SYS.r51
#
###############################################################################

C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\mt\MT_SYS.c
      1          /******************************************************************************
      2            Filename:       MT_SYS.c
      3            Revised:        $Date: 2014-08-04 15:38:03 -0700 (Mon, 04 Aug 2014) $
      4            Revision:       $Revision: 39653 $
      5          
      6            Description:   MonitorTest functions for SYS commands.
      7          
      8            Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           *****************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT.h"
     45          #include "MT_SYS.h"
     46          #include "MT_VERSION.h"
     47          #include "OSAL.h"
     48          #include "OSAL_NV.h"
     49          #include "Onboard.h"  /* This is here because RAM read/write macros need it */

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc9
   \   unsigned char volatile __sfr WDCTL
   \                     WDCTL:
   \   000000                DS 1
     50          #include "hal_adc.h"
     51          #include "OSAL_Clock.h"
     52          #include "mac_low_level.h"
     53          #include "ZMAC.h"
     54          #include "mac_radio_defs.h"
     55          #if defined ( MT_SYS_JAMMER_FEATURE )
     56            #include "mac_rx.h"
     57          #endif
     58          #if !defined(CC253X_MACNP)
     59            #include "ZGlobals.h"
     60          #endif
     61          #if (defined INCLUDE_REVISION_INFORMATION) && ((defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)) //built for bootloader
     62            #include "hal_flash.h"
     63            #include "sb_shared.h"
     64          #endif
     65          #include "ZDiags.h"
     66          #include "MT_UART.h"
     67          
     68          /***************************************************************************************************
     69           * MACROS
     70           ***************************************************************************************************/
     71          
     72          /* Max possible MT response length, limited by TX buffer size and sizeof uint8 */
     73          #define MT_MAX_RSP_LEN  ( MIN( MT_UART_DEFAULT_MAX_TX_BUFF, 255 ) )
     74          
     75          /* Max possible MT response data length, MT protocol overhead */
     76          #define MT_MAX_RSP_DATA_LEN  ( (MT_MAX_RSP_LEN - 1) - SPI_0DATA_MSG_LEN )
     77            
     78          #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
     79          
     80          #if !defined HAL_GPIO || !HAL_GPIO
     81          #define GPIO_DIR_IN(IDX)
     82          #define GPIO_DIR_OUT(IDX)
     83          #define GPIO_TRI(IDX)
     84          #define GPIO_PULL_UP(IDX)
     85          #define GPIO_PULL_DN(IDX)
     86          #define GPIO_SET(IDX)
     87          #define GPIO_CLR(IDX)
     88          #define GPIO_TOG(IDX)
     89          #define GPIO_GET(IDX) 0
     90          #define GPIO_HiD_SET() (val = 0)
     91          #define GPIO_HiD_CLR() (val = 0)
     92          #endif
     93          
     94          #if defined ( MT_SYS_SNIFFER_FEATURE )
     95          #if defined ( HAL_MCU_CC2530 ) && !defined ( HAL_BOARD_CC2530USB )
     96            // This only work with the CC253x chips
     97            #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() st         \
     98            (                                                                                                                                                                                                                                   \
     99              OBSSEL3 = 0xFD;                                        \
    100              OBSSEL4 = 0xFC;                                        \
    101              RFC_OBS_CTRL1 = 0x09; /* 9 - sniff clk */              \
    102              RFC_OBS_CTRL2 = 0x08; /* 8 - sniff data */             \
    103              MDMTEST1 |= 0x04;                                      \
    104            )
    105          
    106            // This only work with the CC253x chips
    107            #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() st        \
    108            (                                                                                                                                                                                                                                   \
    109              OBSSEL3 &= ~0x80;                                                                                                                                                                             \
    110              OBSSEL4 &= ~0x80;                                                                                                                                                                             \
    111              RFC_OBS_CTRL1 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[1] */                                                                                   \
    112              RFC_OBS_CTRL2 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[2] */                                                                                   \
    113              MDMTEST1 &= ~0x04;                                                                                                                                                         \
    114            )
    115          #else
    116            #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
    117            #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
    118          #endif
    119          #endif // MT_SYS_SNIFFER_FEATURE
    120          
    121          #define RESET_HARD     0
    122          #define RESET_SOFT     1
    123          #define RESET_SHUTDOWN 2
    124          
    125          /***************************************************************************************************
    126           * CONSTANTS
    127           ***************************************************************************************************/
    128          
    129          #if !defined MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
    130          #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
    131          #endif
    132          

   \                                 In  segment XDATA_ROM_C, align 1
    133          const uint16 MT_SysOsalEventId [] = {
   \                     MT_SysOsalEventId:
   \   000000   0008         DW 2048
   \   000002   0004         DW 1024
   \   000004   0002         DW 512
   \   000006   0001         DW 256
    134                                                MT_SYS_OSAL_EVENT_0,
    135                                                MT_SYS_OSAL_EVENT_1,
    136                                                MT_SYS_OSAL_EVENT_2,
    137                                                MT_SYS_OSAL_EVENT_3
    138                                              };
    139          
    140          typedef enum {
    141            GPIO_DIR,
    142            GPIO_TRI,
    143            GPIO_SET,
    144            GPIO_CLR,
    145            GPIO_TOG,
    146            GPIO_GET,
    147            GPIO_HiD = 0x12
    148          } GPIO_Op_t;
    149          
    150          #if defined ( MT_SYS_JAMMER_FEATURE )
    151            #define JAMMER_CHECK_EVT                           0x0001
    152          
    153            #if !defined ( JAMMER_DETECT_CONTINUOUS_EVENTS )
    154              #define JAMMER_DETECT_CONTINUOUS_EVENTS          150
    155            #endif
    156            #if !defined ( JAMMER_DETECT_PERIOD_TIME )
    157              #define JAMMER_DETECT_PERIOD_TIME                100  // In milliseconds
    158            #endif
    159            #if !defined ( JAMMER_HIGH_NOISE_LEVEL )
    160              #define JAMMER_HIGH_NOISE_LEVEL                  -65
    161            #endif
    162          #endif // MT_SYS_JAMMER_FEATURE
    163          
    164          /***************************************************************************************************
    165           * LOCAL VARIABLES
    166           ***************************************************************************************************/
    167          #if defined ( MT_SYS_JAMMER_FEATURE )
    168            static uint8 jammerTaskID;
    169            static uint16 jammerContinuousEvents = JAMMER_DETECT_CONTINUOUS_EVENTS;
    170            static uint16 jammerDetections = JAMMER_DETECT_CONTINUOUS_EVENTS;
    171            static int8 jammerHighNoiseLevel = JAMMER_HIGH_NOISE_LEVEL;
    172            static uint32 jammerDetectPeriodTime = JAMMER_DETECT_PERIOD_TIME;
    173          #endif 
    174            
    175          #if defined ( MT_SYS_SNIFFER_FEATURE )
    176          static uint8 sniffer = FALSE;
    177          #endif
    178          
    179          /***************************************************************************************************
    180           * LOCAL FUNCTIONS
    181           ***************************************************************************************************/
    182          #if defined (MT_SYS_FUNC)
    183          void MT_SysReset(uint8 *pBuf);
    184          void MT_SysPing(void);
    185          void MT_SysVersion(void);
    186          void MT_SysSetExtAddr(uint8 *pBuf);
    187          void MT_SysGetExtAddr(void);
    188          void MT_SysOsalNVItemInit(uint8 *pBuf);
    189          void MT_SysOsalNVDelete(uint8 *pBuf);
    190          void MT_SysOsalNVLength(uint8 *pBuf);
    191          void MT_SysOsalNVRead(uint8 *pBuf);
    192          void MT_SysOsalNVWrite(uint8 *pBuf);
    193          void MT_SysOsalStartTimer(uint8 *pBuf);
    194          void MT_SysOsalStopTimer(uint8 *pBuf);
    195          void MT_SysRandom(void);
    196          void MT_SysAdcRead(uint8 *pBuf);
    197          void MT_SysGpio(uint8 *pBuf);
    198          void MT_SysStackTune(uint8 *pBuf);
    199          void MT_SysSetUtcTime(uint8 *pBuf);
    200          void MT_SysGetUtcTime(void);
    201          void MT_SysSetTxPower(uint8 *pBuf);
    202          #if defined ( MT_SYS_JAMMER_FEATURE )
    203            void MT_SysJammerParameters( uint8 *pBuf );
    204          #endif /* MT_SYS_JAMMER_FEATURE */
    205          #if defined ( MT_SYS_SNIFFER_FEATURE )
    206          void MT_SysSnifferParameters( uint8 *pBuf );
    207          #endif /* MT_SYS_SNIFFER_FEATURE */
    208          #if defined ( FEATURE_SYSTEM_STATS )
    209          void MT_SysZDiagsInitStats(void);
    210          void MT_SysZDiagsClearStats(uint8 *pBuf);
    211          void MT_SysZDiagsGetStatsAttr(uint8 *pBuf);
    212          void MT_SysZDiagsRestoreStatsFromNV(void);
    213          void MT_SysZDiagsSaveStatsToNV(void);
    214          #endif /* FEATURE_SYSTEM_STATS */
    215          #endif /* MT_SYS_FUNC */
    216          void powerOffSoc(void);
    217          
    218          #if defined (MT_SYS_FUNC)
    219          /***************************************************************************************************
    220           * @fn      MT_SysProcessing
    221           *
    222           * @brief   Process all the SYS commands that are issued by test tool
    223           *
    224           * @param   pBuf - pointer to the msg buffer
    225           *
    226           *          | LEN  | CMD0  | CMD1  |  DATA  |
    227           *          |  1   |   1   |   1   |  0-255 |
    228           *
    229           * @return  status
    230           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    231          uint8 MT_SysCommandProcessing(uint8 *pBuf)
   \                     MT_SysCommandProcessing:
    232          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    233            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
    234          
    235            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6040         JZ      ??MT_SysCommandProcessing_0
   \   000010   14           DEC     A
   \   000011   6042         JZ      ??MT_SysCommandProcessing_1
   \   000013   14           DEC     A
   \   000014   6044         JZ      ??MT_SysCommandProcessing_2
   \   000016   14           DEC     A
   \   000017   6046         JZ      ??MT_SysCommandProcessing_3
   \   000019   14           DEC     A
   \   00001A   6048         JZ      ??MT_SysCommandProcessing_4
   \   00001C   24FD         ADD     A,#-0x3
   \   00001E   604E         JZ      ??MT_SysCommandProcessing_5
   \   000020   14           DEC     A
   \   000021   6055         JZ      ??MT_SysCommandProcessing_6
   \   000023   14           DEC     A
   \   000024   6057         JZ      ??MT_SysCommandProcessing_7
   \   000026   14           DEC     A
   \   000027   6059         JZ      ??MT_SysCommandProcessing_8
   \   000029   14           DEC     A
   \   00002A   605B         JZ      ??MT_SysCommandProcessing_9
   \   00002C   14           DEC     A
   \   00002D   605D         JZ      ??MT_SysCommandProcessing_10
   \   00002F   14           DEC     A
   \   000030   605F         JZ      ??MT_SysCommandProcessing_11
   \   000032   14           DEC     A
   \   000033   6061         JZ      ??MT_SysCommandProcessing_12
   \   000035   14           DEC     A
   \   000036   6063         JZ      ??MT_SysCommandProcessing_13
   \   000038   14           DEC     A
   \   000039   6065         JZ      ??MT_SysCommandProcessing_14
   \   00003B   14           DEC     A
   \   00003C   6067         JZ      ??MT_SysCommandProcessing_15
   \   00003E   14           DEC     A
   \   00003F   6028         JZ      ??MT_SysCommandProcessing_16
   \   000041   14           DEC     A
   \   000042   602F         JZ      ??MT_SysCommandProcessing_17
   \   000044   14           DEC     A
   \   000045   6063         JZ      ??MT_SysCommandProcessing_18
   \   000047   24F8         ADD     A,#-0x8
   \   000049   602D         JZ      ??MT_SysCommandProcessing_6
   \   00004B   14           DEC     A
   \   00004C   602F         JZ      ??MT_SysCommandProcessing_7
   \   00004E   805F         SJMP    ??MT_SysCommandProcessing_19
    236            {
    237              case MT_SYS_RESET_REQ:
    238                MT_SysReset(pBuf);
   \                     ??MT_SysCommandProcessing_0:
   \   000050                ; Setup parameters for call to function MT_SysReset
   \   000050   12....       LCALL   `??MT_SysReset::?relay`; Banked call to: MT_SysReset
    239                break;
   \   000053   805C         SJMP    ??MT_SysCommandProcessing_20
    240          
    241              case MT_SYS_PING:
    242                MT_SysPing();
   \                     ??MT_SysCommandProcessing_1:
   \   000055                ; Setup parameters for call to function MT_SysPing
   \   000055   12....       LCALL   `??MT_SysPing::?relay`; Banked call to: MT_SysPing
    243                break;
   \   000058   8057         SJMP    ??MT_SysCommandProcessing_20
    244          
    245              case MT_SYS_VERSION:
    246                MT_SysVersion();
   \                     ??MT_SysCommandProcessing_2:
   \   00005A                ; Setup parameters for call to function MT_SysVersion
   \   00005A   12....       LCALL   `??MT_SysVersion::?relay`; Banked call to: MT_SysVersion
    247                break;
   \   00005D   8052         SJMP    ??MT_SysCommandProcessing_20
    248          
    249              case MT_SYS_SET_EXTADDR:
    250                MT_SysSetExtAddr(pBuf);
   \                     ??MT_SysCommandProcessing_3:
   \   00005F                ; Setup parameters for call to function MT_SysSetExtAddr
   \   00005F   12....       LCALL   `??MT_SysSetExtAddr::?relay`; Banked call to: MT_SysSetExtAddr
    251                break;
   \   000062   804D         SJMP    ??MT_SysCommandProcessing_20
    252          
    253              case MT_SYS_GET_EXTADDR:
    254                MT_SysGetExtAddr();
   \                     ??MT_SysCommandProcessing_4:
   \   000064                ; Setup parameters for call to function MT_SysGetExtAddr
   \   000064   12....       LCALL   `??MT_SysGetExtAddr::?relay`; Banked call to: MT_SysGetExtAddr
    255                break;
   \   000067   8048         SJMP    ??MT_SysCommandProcessing_20
    256          
    257          // CC253X MAC Network Processor does not have NV support
    258          #if !defined(CC253X_MACNP)
    259              case MT_SYS_OSAL_NV_DELETE:
    260                MT_SysOsalNVDelete(pBuf);
   \                     ??MT_SysCommandProcessing_16:
   \   000069                ; Setup parameters for call to function MT_SysOsalNVDelete
   \   000069   12....       LCALL   `??MT_SysOsalNVDelete::?relay`; Banked call to: MT_SysOsalNVDelete
    261                break;
   \   00006C   8043         SJMP    ??MT_SysCommandProcessing_20
    262          
    263              case MT_SYS_OSAL_NV_ITEM_INIT:
    264                MT_SysOsalNVItemInit(pBuf);
   \                     ??MT_SysCommandProcessing_5:
   \   00006E                ; Setup parameters for call to function MT_SysOsalNVItemInit
   \   00006E   12....       LCALL   `??MT_SysOsalNVItemInit::?relay`; Banked call to: MT_SysOsalNVItemInit
    265                break;
   \   000071   803E         SJMP    ??MT_SysCommandProcessing_20
    266          
    267              case MT_SYS_OSAL_NV_LENGTH:
    268                MT_SysOsalNVLength(pBuf);
   \                     ??MT_SysCommandProcessing_17:
   \   000073                ; Setup parameters for call to function MT_SysOsalNVLength
   \   000073   12....       LCALL   `??MT_SysOsalNVLength::?relay`; Banked call to: MT_SysOsalNVLength
    269                break;
   \   000076   8039         SJMP    ??MT_SysCommandProcessing_20
    270          
    271              case MT_SYS_OSAL_NV_READ:
    272                MT_SysOsalNVRead(pBuf);
    273                break;
    274          
    275              case MT_SYS_OSAL_NV_WRITE:
    276                MT_SysOsalNVWrite(pBuf);
    277                break;
    278          
    279              case MT_SYS_OSAL_NV_READ_EXT:
    280                MT_SysOsalNVRead(pBuf);
   \                     ??MT_SysCommandProcessing_6:
   \   000078                ; Setup parameters for call to function MT_SysOsalNVRead
   \   000078   12....       LCALL   `??MT_SysOsalNVRead::?relay`; Banked call to: MT_SysOsalNVRead
    281                break;
   \   00007B   8034         SJMP    ??MT_SysCommandProcessing_20
    282                
    283              case MT_SYS_OSAL_NV_WRITE_EXT:
    284                MT_SysOsalNVWrite(pBuf);
   \                     ??MT_SysCommandProcessing_7:
   \   00007D                ; Setup parameters for call to function MT_SysOsalNVWrite
   \   00007D   12....       LCALL   `??MT_SysOsalNVWrite::?relay`; Banked call to: MT_SysOsalNVWrite
    285                break;
   \   000080   802F         SJMP    ??MT_SysCommandProcessing_20
    286          #endif
    287          
    288              case MT_SYS_OSAL_START_TIMER:
    289                MT_SysOsalStartTimer(pBuf);
   \                     ??MT_SysCommandProcessing_8:
   \   000082                ; Setup parameters for call to function MT_SysOsalStartTimer
   \   000082   12....       LCALL   `??MT_SysOsalStartTimer::?relay`; Banked call to: MT_SysOsalStartTimer
    290                break;
   \   000085   802A         SJMP    ??MT_SysCommandProcessing_20
    291          
    292              case MT_SYS_OSAL_STOP_TIMER:
    293                MT_SysOsalStopTimer(pBuf);
   \                     ??MT_SysCommandProcessing_9:
   \   000087                ; Setup parameters for call to function MT_SysOsalStopTimer
   \   000087   12....       LCALL   `??MT_SysOsalStopTimer::?relay`; Banked call to: MT_SysOsalStopTimer
    294                break;
   \   00008A   8025         SJMP    ??MT_SysCommandProcessing_20
    295          
    296              case MT_SYS_RANDOM:
    297                MT_SysRandom();
   \                     ??MT_SysCommandProcessing_10:
   \   00008C                ; Setup parameters for call to function MT_SysRandom
   \   00008C   12....       LCALL   `??MT_SysRandom::?relay`; Banked call to: MT_SysRandom
    298                break;
   \   00008F   8020         SJMP    ??MT_SysCommandProcessing_20
    299          
    300              case MT_SYS_ADC_READ:
    301                MT_SysAdcRead(pBuf);
   \                     ??MT_SysCommandProcessing_11:
   \   000091                ; Setup parameters for call to function MT_SysAdcRead
   \   000091   12....       LCALL   `??MT_SysAdcRead::?relay`; Banked call to: MT_SysAdcRead
    302                break;
   \   000094   801B         SJMP    ??MT_SysCommandProcessing_20
    303          
    304              case MT_SYS_GPIO:
    305                MT_SysGpio(pBuf);
   \                     ??MT_SysCommandProcessing_12:
   \   000096                ; Setup parameters for call to function MT_SysGpio
   \   000096   12....       LCALL   `??MT_SysGpio::?relay`; Banked call to: MT_SysGpio
    306                break;
   \   000099   8016         SJMP    ??MT_SysCommandProcessing_20
    307          
    308              case MT_SYS_STACK_TUNE:
    309                MT_SysStackTune(pBuf);
   \                     ??MT_SysCommandProcessing_13:
   \   00009B                ; Setup parameters for call to function MT_SysStackTune
   \   00009B   12....       LCALL   `??MT_SysStackTune::?relay`; Banked call to: MT_SysStackTune
    310                break;
   \   00009E   8011         SJMP    ??MT_SysCommandProcessing_20
    311          
    312              case MT_SYS_SET_TIME:
    313                MT_SysSetUtcTime(pBuf);
   \                     ??MT_SysCommandProcessing_14:
   \   0000A0                ; Setup parameters for call to function MT_SysSetUtcTime
   \   0000A0   12....       LCALL   `??MT_SysSetUtcTime::?relay`; Banked call to: MT_SysSetUtcTime
    314                break;
   \   0000A3   800C         SJMP    ??MT_SysCommandProcessing_20
    315          
    316              case MT_SYS_GET_TIME:
    317                MT_SysGetUtcTime();
   \                     ??MT_SysCommandProcessing_15:
   \   0000A5                ; Setup parameters for call to function MT_SysGetUtcTime
   \   0000A5   12....       LCALL   `??MT_SysGetUtcTime::?relay`; Banked call to: MT_SysGetUtcTime
    318                break;
   \   0000A8   8007         SJMP    ??MT_SysCommandProcessing_20
    319          
    320              case MT_SYS_SET_TX_POWER:
    321                MT_SysSetTxPower(pBuf);
   \                     ??MT_SysCommandProcessing_18:
   \   0000AA                ; Setup parameters for call to function MT_SysSetTxPower
   \   0000AA   12....       LCALL   `??MT_SysSetTxPower::?relay`; Banked call to: MT_SysSetTxPower
    322                break;
   \   0000AD   8002         SJMP    ??MT_SysCommandProcessing_20
    323                
    324          #if defined ( MT_SYS_JAMMER_FEATURE )
    325              case MT_SYS_JAMMER_PARAMETERS:
    326                MT_SysJammerParameters( pBuf );
    327                break;
    328          #endif      
    329          
    330          #if defined ( MT_SYS_SNIFFER_FEATURE )
    331              case MT_SYS_SNIFFER_PARAMETERS:
    332                MT_SysSnifferParameters( pBuf );
    333                break;
    334          #endif      
    335          
    336          #if defined ( FEATURE_SYSTEM_STATS )
    337              case MT_SYS_ZDIAGS_INIT_STATS:
    338                MT_SysZDiagsInitStats();
    339                break;
    340          
    341              case MT_SYS_ZDIAGS_CLEAR_STATS:
    342                MT_SysZDiagsClearStats(pBuf);
    343                break;
    344          
    345              case MT_SYS_ZDIAGS_GET_STATS:
    346                MT_SysZDiagsGetStatsAttr(pBuf);
    347                 break;
    348          
    349              case MT_SYS_ZDIAGS_RESTORE_STATS_NV:
    350                MT_SysZDiagsRestoreStatsFromNV();
    351                break;
    352          
    353              case MT_SYS_ZDIAGS_SAVE_STATS_TO_NV:
    354                MT_SysZDiagsSaveStatsToNV();
    355                break;
    356          #endif /* FEATURE_SYSTEM_STATS */
    357          
    358              default:
    359                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_SysCommandProcessing_19:
   \   0000AF   7E02         MOV     R6,#0x2
    360                break;
    361            }
    362          
    363            return status;
   \                     ??MT_SysCommandProcessing_20:
   \   0000B1   EE           MOV     A,R6
   \   0000B2   F9           MOV     R1,A
   \   0000B3   02....       LJMP    ??Subroutine23_0 & 0xFFFF
    364          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine23_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    365          
    366          /**************************************************************************************************
    367           * @fn      MT_SysReset
    368           *
    369           * @brief   Reset the device.
    370           * @param   typID: 0=reset, 1=serial bootloader, 
    371           *
    372           * @return  None
    373           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    374          void MT_SysReset( uint8 *pBuf )
   \                     MT_SysReset:
    375          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    376            switch( pBuf[MT_RPC_POS_DAT0] )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6005         JZ      ??MT_SysReset_0
   \   00000E   14           DEC     A
   \   00000F   600E         JZ      ??MT_SysReset_1
   \   000011   800F         SJMP    ??MT_SysReset_2
    377            {
    378              case MT_SYS_RESET_HARD:
    379                SystemReset();
   \                     ??MT_SysReset_0:
   \   000013   C2AF         CLR     0xa8.7
   \   000015   C2AF         CLR     0xa8.7
   \   000017   75C9AB       MOV     0xc9,#-0x55
   \   00001A   75C95B       MOV     0xc9,#0x5b
   \                     ??MT_SysReset_3:
   \   00001D   80FE         SJMP    ??MT_SysReset_3
    380                break;
    381                
    382              case MT_SYS_RESET_SOFT:
    383          #if !(defined(HAL_BOARD_F2618) || defined(HAL_BOARD_F5438) || defined(HAL_BOARD_LM3S))
    384                SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
   \                     ??MT_SysReset_1:
   \   00001F                ; Setup parameters for call to function Onboard_soft_reset
   \   00001F   12....       LCALL   Onboard_soft_reset & 0xFFFF
    385          #endif
    386                break;
    387                
    388              case MT_SYS_RESET_SHUTDOWN:
    389                {
    390                  // Disable interrupts and put into deep sleep, use hardware reset to wakeup
    391                  powerOffSoc();
    392                }
    393                break;
    394            }
    395          }
   \                     ??MT_SysReset_2:
   \   000022   02....       LJMP    ??Subroutine27_0 & 0xFFFF
   \   000025                REQUIRE _A_IEN0
   \   000025                REQUIRE WDCTL

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine27_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    396          
    397          /***************************************************************************************************
    398           * @fn      MT_SysPing
    399           *
    400           * @brief   Process the Ping command
    401           *
    402           * @param   None
    403           *
    404           * @return  None
    405           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    406          void MT_SysPing(void)
   \                     MT_SysPing:
    407          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    408            uint16 tmp16;
    409            uint8 retArray[2];
    410          
    411            /* Build Capabilities */
    412            tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO |
    413                    MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_GP | MT_CAP_ZOAD;
    414          
    415            /* Convert to high byte first into temp buffer */
    416            retArray[0] = LO_UINT16( tmp16 );
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7411         MOV     A,#0x11
   \   000011   F0           MOVX    @DPTR,A
    417            retArray[1] = HI_UINT16( tmp16 );
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E4           CLR     A
   \   000018   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    418          
    419            /* Build and send back the response */
    420            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
    421                                          sizeof (tmp16), retArray );
   \                     ??CrossCallReturnLabel_32:
   \   00001B   7A01         MOV     R2,#0x1
   \   00001D   02....       LJMP    ?Subroutine1 & 0xFFFF
    422          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine25_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   7B02         MOV     R3,#0x2
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7961         MOV     R1,#0x61
   \   000002   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   7402         MOV     A,#0x2
   \   000007                REQUIRE ??Subroutine26_0
   \   000007                ; // Fall through to label ??Subroutine26_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine26_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine27_0
   \   000003                ; // Fall through to label ??Subroutine27_0
    423          
    424          /***************************************************************************************************
    425           * @fn      MT_SysVersion
    426           *
    427           * @brief   Process the Version command
    428           *
    429           * @param   None
    430           *
    431           * @return  None
    432           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    433          void MT_SysVersion(void)
   \                     MT_SysVersion:
    434          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    435          #if !defined INCLUDE_REVISION_INFORMATION
    436            /* Build and send back the response */
    437            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    438                                         sizeof(MTVersionString), (uint8 *)MTVersionString);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   7C..         MOV     R4,#MTVersionString & 0xff
   \   000006   7D..         MOV     R5,#(MTVersionString >> 8) & 0xff
   \   000008   7B05         MOV     R3,#0x5
   \   00000A   7A02         MOV     R2,#0x2
   \   00000C   7961         MOV     R1,#0x61
   \   00000E   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    439          
    440          #else
    441            uint8 verStr[sizeof(MTVersionString) + 4];
    442            uint8 *pBuf = &verStr[sizeof(MTVersionString)];
    443            
    444          #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
    445            uint32 sblSig;
    446            uint32 sblRev;
    447          #endif
    448          
    449            osal_memcpy(verStr, (uint8 *)MTVersionString, sizeof(MTVersionString));
    450          
    451          #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
    452            HalFlashRead(SBL_SIG_ADDR / HAL_FLASH_PAGE_SIZE,
    453                         SBL_SIG_ADDR % HAL_FLASH_PAGE_SIZE,
    454                         (uint8 *)&sblSig, sizeof(sblSig));
    455          
    456            if (sblSig == SBL_SIGNATURE)
    457            {
    458              // SBL is supported and its revision is provided (in a known flash location)
    459              HalFlashRead(SBL_REV_ADDR / HAL_FLASH_PAGE_SIZE,
    460                           SBL_REV_ADDR % HAL_FLASH_PAGE_SIZE,
    461                           (uint8 *)&sblRev, sizeof(sblRev));
    462            }
    463            else
    464            {
    465              //  SBL is supported but its revision is not provided
    466              sblRev = 0x00000000;
    467            }
    468          #else
    469            // SBL is NOT supported
    470            sblRev = 0xFFFFFFFF;
    471          #endif
    472          
    473            // Plug the SBL revision indication
    474            UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,sblRev);
    475          
    476            /* Build and send back the response */
    477            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
    478                                         sizeof(verStr), verStr);
    479          
    480          #endif
    481          }
   \   000011   02....       LJMP    ??Subroutine27_0 & 0xFFFF
    482          
    483          /***************************************************************************************************
    484           * @fn      MT_SysSetExtAddr
    485           *
    486           * @brief   Set the Extended Address
    487           *
    488           * @param   pBuf
    489           *
    490           * @return  None
    491           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    492          void MT_SysSetExtAddr(uint8 *pBuf)
   \                     MT_SysSetExtAddr:
    493          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
    494            uint8 retValue = ZFailure;
   \   00000C   12....       LCALL   ?Subroutine14 & 0xFFFF
    495            uint8 cmdId;
    496          
    497            /* parse header */
    498            cmdId = pBuf[MT_RPC_POS_CMD1];
    499            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_14:
   \   00000F   F5..         MOV     ?V0,A
   \   000011   5002         JNC     ??MT_SysSetExtAddr_0
   \   000013   05..         INC     ?V1
    500          
    501            if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
   \                     ??MT_SysSetExtAddr_0:
   \   000015                ; Setup parameters for call to function ZMacSetReq
   \   000015   0A           INC     R2
   \   000016   0A           INC     R2
   \   000017   0A           INC     R2
   \   000018   AB..         MOV     R3,?V1
   \   00001A   79E2         MOV     R1,#-0x1e
   \   00001C   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00001F   E9           MOV     A,R1
   \   000020   7028         JNZ     ??MT_SysSetExtAddr_1
    502            {
    503          // CC253X MAC Network Processor does not have NV support
    504          #if !defined(CC253X_MACNP)
    505              retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
   \   000022                ; Setup parameters for call to function osal_nv_write
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75..08       MOV     ?V0,#0x8
   \   00002A   75..00       MOV     ?V1,#0x0
   \   00002D   78..         MOV     R0,#?V0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7C00         MOV     R4,#0x0
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000042   E9           MOV     A,R1
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
    506          #endif
    507            }
    508          
    509            /* Build and send back the response */
    510            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
   \                     ??MT_SysSetExtAddr_1:
   \   00004A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00004A   AC..         MOV     R4,?XSP + 0
   \   00004C   AD..         MOV     R5,?XSP + 1
   \   00004E   7B01         MOV     R3,#0x1
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   7961         MOV     R1,#0x61
   \   000054   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    511          
    512          }
   \   000057   7401         MOV     A,#0x1
   \   000059   02....       LJMP    ??Subroutine24_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7401         MOV     A,#0x1
   \   000008   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   2403         ADD     A,#0x3
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine24_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    513          
    514          /***************************************************************************************************
    515           * @fn      MT_SysGetExtAddr
    516           *
    517           * @brief   Get the Extended Address
    518           *
    519           * @param   None
    520           *
    521           * @return  None
    522           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          void MT_SysGetExtAddr(void)
   \                     MT_SysGetExtAddr:
    524          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 8
   \   000004   74F8         MOV     A,#-0x8
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    525            uint8 extAddr[Z_EXTADDR_LEN];
    526          
    527            ZMacGetReq( ZMacExtAddr, extAddr );
   \   000009                ; Setup parameters for call to function ZMacGetReq
   \   000009   AA..         MOV     R2,?XSP + 0
   \   00000B   AB..         MOV     R3,?XSP + 1
   \   00000D   79E2         MOV     R1,#-0x1e
   \   00000F   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
    528          
    529            /* Build and send back the response */
    530            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
    531                                         Z_EXTADDR_LEN, extAddr);
   \   000012                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000012   AC..         MOV     R4,?XSP + 0
   \   000014   AD..         MOV     R5,?XSP + 1
   \   000016   7B08         MOV     R3,#0x8
   \   000018   7A04         MOV     R2,#0x4
   \   00001A   7961         MOV     R1,#0x61
   \   00001C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    532          }
   \   00001F   7408         MOV     A,#0x8
   \   000021   02....       LJMP    ??Subroutine26_0 & 0xFFFF
    533          
    534          #if !defined(CC253X_MACNP)
    535          /***************************************************************************************************
    536           * @fn      MT_SysOsalNVRead
    537           *
    538           * @brief   Attempt to read an NV value
    539           *
    540           * @param   pBuf - pointer to the data
    541           *
    542           * @return  None
    543           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    544          void MT_SysOsalNVRead(uint8 *pBuf)
   \                     MT_SysOsalNVRead:
    545          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    546            uint8 cmdId;
    547            uint16 nvId;
    548            uint16 dataLen;
    549            uint16 dataOfs;
    550            uint16 nvItemLen;
    551            uint8 error = ZSuccess;
   \   00000E   75..00       MOV     ?V2,#0x0
    552          
    553            /* MT command ID */
    554            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V3,A
    555            /* Skip over RPC header */
    556            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00001A   EE           MOV     A,R6
   \   00001B   2403         ADD     A,#0x3
   \   00001D   FE           MOV     R6,A
   \   00001E   5001         JNC     ??MT_SysOsalNVRead_0
   \   000020   0F           INC     R7
    557          
    558            /* NV item ID */
    559            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVRead_0:
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   12....       LCALL   ?Subroutine5 & 0xFFFF
    560            /* Length of entire NV item data */
    561            nvItemLen = osal_nv_item_len(nvId);
   \                     ??CrossCallReturnLabel_2:
   \   000028                ; Setup parameters for call to function osal_nv_item_len
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   00002C   8A..         MOV     ?V4,R2
   \   00002E   8B..         MOV     ?V5,R3
   \   000030   AC..         MOV     R4,?V4
   \   000032   AD..         MOV     R5,?V5
    562          
    563          #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
    564            if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
    565                (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
    566                (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
   \   000034   7469         MOV     A,#0x69
   \   000036   65..         XRL     A,?V0
   \   000038   7002         JNZ     ??MT_SysOsalNVRead_1
   \   00003A   E5..         MOV     A,?V1
   \                     ??MT_SysOsalNVRead_1:
   \   00003C   6012         JZ      ??MT_SysOsalNVRead_2
   \   00003E   746B         MOV     A,#0x6b
   \   000040   65..         XRL     A,?V0
   \   000042   7002         JNZ     ??MT_SysOsalNVRead_3
   \   000044   E5..         MOV     A,?V1
   \                     ??MT_SysOsalNVRead_3:
   \   000046   6008         JZ      ??MT_SysOsalNVRead_2
   \   000048   746A         MOV     A,#0x6a
   \   00004A   65..         XRL     A,?V0
   \   00004C   45..         ORL     A,?V1
   \   00004E   7003         JNZ     ??MT_SysOsalNVRead_4
    567            {
    568              /* Access to Security Certificate Data is denied */
    569              error = ZInvalidParameter;
   \                     ??MT_SysOsalNVRead_2:
   \   000050   75..02       MOV     ?V2,#0x2
    570            }
    571          #endif
    572          
    573          #if !MT_SYS_KEY_MANAGEMENT
    574            if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
    575                 (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
    576                ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
    577                ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
    578                 (nvId == ZCD_NV_PRECFGKEY) )
   \                     ??MT_SysOsalNVRead_4:
   \   000053   743A         MOV     A,#0x3a
   \   000055   65..         XRL     A,?V0
   \   000057   7002         JNZ     ??MT_SysOsalNVRead_5
   \   000059   E5..         MOV     A,?V1
   \                     ??MT_SysOsalNVRead_5:
   \   00005B   602F         JZ      ??MT_SysOsalNVRead_6
   \   00005D   743B         MOV     A,#0x3b
   \   00005F   65..         XRL     A,?V0
   \   000061   7002         JNZ     ??MT_SysOsalNVRead_7
   \   000063   E5..         MOV     A,?V1
   \                     ??MT_SysOsalNVRead_7:
   \   000065   6025         JZ      ??MT_SysOsalNVRead_6
   \   000067   E5..         MOV     A,?V0
   \   000069   24FF         ADD     A,#-0x1
   \   00006B   F8           MOV     R0,A
   \   00006C   E5..         MOV     A,?V1
   \   00006E   34FE         ADDC    A,#-0x2
   \   000070   F9           MOV     R1,A
   \   000071   C3           CLR     C
   \   000072   E8           MOV     A,R0
   \   000073   94FF         SUBB    A,#-0x1
   \   000075   E9           MOV     A,R1
   \   000076   9400         SUBB    A,#0x0
   \   000078   4012         JC      ??MT_SysOsalNVRead_6
   \   00007A   19           DEC     R1
   \   00007B   C3           CLR     C
   \   00007C   E8           MOV     A,R0
   \   00007D   94FF         SUBB    A,#-0x1
   \   00007F   E9           MOV     A,R1
   \   000080   9400         SUBB    A,#0x0
   \   000082   4008         JC      ??MT_SysOsalNVRead_6
   \   000084   7462         MOV     A,#0x62
   \   000086   65..         XRL     A,?V0
   \   000088   45..         ORL     A,?V1
   \   00008A   7003         JNZ     ??MT_SysOsalNVRead_8
    579            {
    580              /* Access to Security Key Data is denied */
    581              error = ZInvalidParameter;
   \                     ??MT_SysOsalNVRead_6:
   \   00008C   75..02       MOV     ?V2,#0x2
    582            }
    583          #endif //!MT_SYS_KEY_MANAGEMENT
    584            
    585            /* Get NV data offset */
    586            if (cmdId == MT_SYS_OSAL_NV_READ)
   \                     ??MT_SysOsalNVRead_8:
   \   00008F   7408         MOV     A,#0x8
   \   000091   65..         XRL     A,?V3
   \   000093   8E82         MOV     DPL,R6
   \   000095   8F83         MOV     DPH,R7
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   7006         JNZ     ??MT_SysOsalNVRead_9
    587            {
    588              /* MT_SYS_OSAL_NV_READ has 1-byte offset */
    589              dataOfs = (uint16)pBuf[2];
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   FE           MOV     R6,A
   \   00009D   7F00         MOV     R7,#0x0
   \   00009F   800B         SJMP    ??CrossCallReturnLabel_6
    590            }
    591            else
    592            {
    593              /* MT_SYS_OSAL_NV_READ_EXT has 2-byte offset */
    594              dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
   \                     ??MT_SysOsalNVRead_9:
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   FA           MOV     R2,A
   \   0000A3   8E82         MOV     DPL,R6
   \   0000A5   8F83         MOV     DPH,R7
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   12....       LCALL   ?Subroutine7 & 0xFFFF
    595            }
    596            if (nvItemLen <= dataOfs)
   \                     ??CrossCallReturnLabel_6:
   \   0000AC   C3           CLR     C
   \   0000AD   EE           MOV     A,R6
   \   0000AE   9C           SUBB    A,R4
   \   0000AF   EF           MOV     A,R7
   \   0000B0   9D           SUBB    A,R5
   \   0000B1   4006         JC      ??MT_SysOsalNVRead_10
    597            {
    598              /* Offset is past end of data */
    599              error = ZInvalidParameter;
   \   0000B3   75..02       MOV     ?V2,#0x2
   \   0000B6   02....       LJMP    ??MT_SysOsalNVRead_11 & 0xFFFF
    600            }
    601          
    602            if (error == ZSuccess)
   \                     ??MT_SysOsalNVRead_10:
   \   0000B9   E5..         MOV     A,?V2
   \   0000BB   6003         JZ      $+5
   \   0000BD   02....       LJMP    ??MT_SysOsalNVRead_12 & 0xFFFF
    603            {
    604              uint8 *pRetBuf;
    605              uint8 respLen = 2;  /* Response header: [0]=status,[1]=length */
    606          
    607              dataLen = nvItemLen - dataOfs;
   \   0000C0   EC           MOV     A,R4
   \   0000C1   C3           CLR     C
   \   0000C2   9E           SUBB    A,R6
   \   0000C3   F5..         MOV     ?V8,A
   \   0000C5   ED           MOV     A,R5
   \   0000C6   9F           SUBB    A,R7
   \   0000C7   F5..         MOV     ?V9,A
    608              if (dataLen > (uint16)(MT_MAX_RSP_DATA_LEN - respLen))
   \   0000C9   C3           CLR     C
   \   0000CA   E5..         MOV     A,?V8
   \   0000CC   9479         SUBB    A,#0x79
   \   0000CE   E5..         MOV     A,?V9
   \   0000D0   9400         SUBB    A,#0x0
   \   0000D2   4006         JC      ??MT_SysOsalNVRead_13
    609              {
    610                /* Data length is limited by TX buffer size and MT protocol */
    611                dataLen = (MT_MAX_RSP_DATA_LEN - respLen);
   \   0000D4   75..78       MOV     ?V8,#0x78
   \   0000D7   75..00       MOV     ?V9,#0x0
    612              }
    613              respLen += dataLen;
   \                     ??MT_SysOsalNVRead_13:
   \   0000DA   E5..         MOV     A,?V8
   \   0000DC   2402         ADD     A,#0x2
   \   0000DE   F5..         MOV     ?V4,A
    614          
    615              pRetBuf = osal_mem_alloc(respLen);
   \   0000E0                ; Setup parameters for call to function osal_mem_alloc
   \   0000E0   FA           MOV     R2,A
   \   0000E1   7B00         MOV     R3,#0x0
   \   0000E3   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   0000E6   8A..         MOV     ?V6,R2
   \   0000E8   8B..         MOV     ?V7,R3
    616              if (pRetBuf != NULL)
   \   0000EA   EA           MOV     A,R2
   \   0000EB   45..         ORL     A,?V7
   \   0000ED   7003         JNZ     $+5
   \   0000EF   02....       LJMP    ??MT_SysOsalNVRead_14 & 0xFFFF
    617              {
    618                osal_memset(&pRetBuf[2], 0, dataLen);
   \   0000F2   EA           MOV     A,R2
   \   0000F3   2402         ADD     A,#0x2
   \   0000F5   F5..         MOV     ?V10,A
   \   0000F7   E4           CLR     A
   \   0000F8   35..         ADDC    A,?V7
   \   0000FA   F5..         MOV     ?V11,A
   \   0000FC                ; Setup parameters for call to function osal_memset
   \   0000FC   AC..         MOV     R4,?V8
   \   0000FE   AD..         MOV     R5,?V9
   \   000100   7900         MOV     R1,#0x0
   \   000102   0A           INC     R2
   \   000103   0A           INC     R2
   \   000104   FB           MOV     R3,A
   \   000105   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    619                if (((osal_nv_read( nvId, dataOfs, dataLen, &pRetBuf[2])) == ZSUCCESS))
   \   000108                ; Setup parameters for call to function osal_nv_read
   \   000108   78..         MOV     R0,#?V10
   \   00010A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010D   78..         MOV     R0,#?V8
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000112   EE           MOV     A,R6
   \   000113   FC           MOV     R4,A
   \   000114   EF           MOV     A,R7
   \   000115   FD           MOV     R5,A
   \   000116   AA..         MOV     R2,?V0
   \   000118   AB..         MOV     R3,?V1
   \   00011A   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   00011D   7404         MOV     A,#0x4
   \   00011F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000122   E9           MOV     A,R1
   \   000123   701B         JNZ     ??MT_SysOsalNVRead_15
    620                {
    621                  pRetBuf[0] = ZSuccess;
   \   000125   85..82       MOV     DPL,?V6
   \   000128   85..83       MOV     DPH,?V7
   \   00012B   E4           CLR     A
   \   00012C   F0           MOVX    @DPTR,A
    622                  pRetBuf[1] = dataLen;
   \   00012D   A3           INC     DPTR
   \   00012E   E5..         MOV     A,?V8
   \   000130   F0           MOVX    @DPTR,A
    623                  MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    624                                                 cmdId, respLen, pRetBuf );
   \   000131                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000131   AC..         MOV     R4,?V6
   \   000133   AD..         MOV     R5,?V7
   \   000135   AB..         MOV     R3,?V4
   \   000137   AA..         MOV     R2,?V3
   \   000139   7961         MOV     R1,#0x61
   \   00013B   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   00013E   8003         SJMP    ??MT_SysOsalNVRead_16
    625                }
    626                else
    627                {
    628                  error = NV_OPER_FAILED;
   \                     ??MT_SysOsalNVRead_15:
   \   000140   75..0A       MOV     ?V2,#0xa
    629                }
    630                osal_mem_free(pRetBuf);
   \                     ??MT_SysOsalNVRead_16:
   \   000143                ; Setup parameters for call to function osal_mem_free
   \   000143   AA..         MOV     R2,?V6
   \   000145   AB..         MOV     R3,?V7
   \   000147   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    631              }
    632              else
    633              {
    634                /* Could not get buffer for NV data */
    635                error = ZMemError;
    636              }
    637            }
    638            
    639            if (error != ZSuccess)
   \                     ??MT_SysOsalNVRead_12:
   \   00014A   E5..         MOV     A,?V2
   \   00014C   601E         JZ      ??MT_SysOsalNVRead_17
    640            {
    641              uint8 tmp[2] = { error, 0 };
   \                     ??MT_SysOsalNVRead_11:
   \   00014E   90....       MOV     DPTR,#`?<Constant {0, 0}>`
   \   000151   AC..         MOV     R4,?XSP + 0
   \   000153   AD..         MOV     R5,?XSP + 1
   \   000155   7402         MOV     A,#0x2
   \   000157   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00015A   85..82       MOV     DPL,?XSP + 0
   \   00015D   85..83       MOV     DPH,?XSP + 1
   \   000160   E5..         MOV     A,?V2
   \   000162   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    642              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    643                                             cmdId, 2, tmp);
    644            }
   \                     ??CrossCallReturnLabel_33:
   \   000165   AA..         MOV     R2,?V3
   \   000167   7961         MOV     R1,#0x61
   \   000169   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    645          }
   \                     ??MT_SysOsalNVRead_17:
   \   00016C   7402         MOV     A,#0x2
   \   00016E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000171   7F0C         MOV     R7,#0xc
   \   000173   02....       LJMP    ?BANKED_LEAVE_XDATA
   \                     ??MT_SysOsalNVRead_14:
   \   000176   75..10       MOV     ?V2,#0x10
   \   000179   80D3         SJMP    ??MT_SysOsalNVRead_11

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   E4           CLR     A
   \   000006   C8           XCH     A,R0
   \   000007   F9           MOV     R1,A
   \   000008   EA           MOV     A,R2
   \   000009   28           ADD     A,R0
   \   00000A   F5..         MOV     ?V0,A
   \   00000C   E4           CLR     A
   \   00000D   39           ADDC    A,R1
   \   00000E   F5..         MOV     ?V1,A
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   28           ADD     A,R0
   \   000008   FE           MOV     R6,A
   \   000009   E4           CLR     A
   \   00000A   39           ADDC    A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0, 0}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
    646          
    647          /***************************************************************************************************
    648           * @fn      MT_SysOsalNVWrite
    649           *
    650           * @brief   Attempt to write an NV item
    651           *
    652           * @param   pBuf - pointer to the data
    653           *
    654           * @return  None
    655           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    656          void MT_SysOsalNVWrite(uint8 *pBuf)
   \                     MT_SysOsalNVWrite:
    657          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V5,R3
    658            uint8 cmdId;
    659            uint16 nvId;
    660            uint16 dataLen;
    661            uint16 dataOfs;
    662            uint16 nvItemLen;
    663            uint8 rtrn = ZSuccess;
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   E4           CLR     A
   \   000013   12....       LCALL   ?Subroutine19 & 0xFFFF
    664          
    665            /* MT command ID */
    666            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_25:
   \   000016   F5..         MOV     ?V2,A
    667            /* Skip over RPC header */
    668            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000018   EA           MOV     A,R2
   \   000019   2403         ADD     A,#0x3
   \   00001B   F5..         MOV     ?V4,A
   \   00001D   5002         JNC     ??MT_SysOsalNVWrite_0
   \   00001F   05..         INC     ?V5
    669          
    670            /* NV item ID */
    671            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVWrite_0:
   \   000021   F582         MOV     DPL,A
   \   000023   85..83       MOV     DPH,?V5
   \   000026   12....       LCALL   ?Subroutine5 & 0xFFFF
    672            
    673            /* Get NV data offset & length */
    674            if ( cmdId == MT_SYS_OSAL_NV_WRITE )
   \                     ??CrossCallReturnLabel_3:
   \   000029   7409         MOV     A,#0x9
   \   00002B   65..         XRL     A,?V2
   \   00002D   85..82       MOV     DPL,?V4
   \   000030   85..83       MOV     DPH,?V5
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   7018         JNZ     ??MT_SysOsalNVWrite_1
    675            {
    676              /* MT_SYS_OSAL_NV_WRITE has 1-byte offset & length */
    677              dataOfs = (uint16)pBuf[2];
   \   000037   E0           MOVX    A,@DPTR
   \   000038   FE           MOV     R6,A
   \   000039   7F00         MOV     R7,#0x0
    678              dataLen = (uint16)pBuf[3];
   \   00003B   85..82       MOV     DPL,?V4
   \   00003E   85..83       MOV     DPH,?V5
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V6,A
   \   000047   88..         MOV     ?V7,R0
    679              pBuf += 4;
   \   000049   E5..         MOV     A,?V4
   \   00004B   2404         ADD     A,#0x4
   \   00004D   8026         SJMP    ??MT_SysOsalNVWrite_2
    680            }
    681            else
    682            {
    683              /* MT_SYS_OSAL_NV_WRITE_EXT has 2-byte offset & length */
    684              dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
   \                     ??MT_SysOsalNVWrite_1:
   \   00004F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   EA           MOV     A,R2
   \   000055   FE           MOV     R6,A
   \   000056   E4           CLR     A
   \   000057   39           ADDC    A,R1
   \   000058   FF           MOV     R7,A
    685              dataLen = BUILD_UINT16(pBuf[4], pBuf[5]);
   \   000059   85..82       MOV     DPL,?V4
   \   00005C   85..83       MOV     DPH,?V5
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   EA           MOV     A,R2
   \   00006B   F5..         MOV     ?V6,A
   \   00006D   E4           CLR     A
   \   00006E   39           ADDC    A,R1
   \   00006F   F5..         MOV     ?V7,A
    686              pBuf += 6;
   \   000071   E5..         MOV     A,?V4
   \   000073   2406         ADD     A,#0x6
   \                     ??MT_SysOsalNVWrite_2:
   \   000075   F5..         MOV     ?V4,A
   \   000077   5002         JNC     ??MT_SysOsalNVWrite_3
   \   000079   05..         INC     ?V5
    687            }
    688          
    689            /* Length of entire NV item data */
    690            nvItemLen = osal_nv_item_len(nvId);
    691            if ((dataOfs + dataLen) <= nvItemLen)
   \                     ??MT_SysOsalNVWrite_3:
   \   00007B                ; Setup parameters for call to function osal_nv_item_len
   \   00007B   AA..         MOV     R2,?V0
   \   00007D   AB..         MOV     R3,?V1
   \   00007F   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
   \   000082   EE           MOV     A,R6
   \   000083   25..         ADD     A,?V6
   \   000085   F8           MOV     R0,A
   \   000086   EF           MOV     A,R7
   \   000087   35..         ADDC    A,?V7
   \   000089   F9           MOV     R1,A
   \   00008A   C3           CLR     C
   \   00008B   EA           MOV     A,R2
   \   00008C   98           SUBB    A,R0
   \   00008D   EB           MOV     A,R3
   \   00008E   99           SUBB    A,R1
   \   00008F   405A         JC      ??MT_SysOsalNVWrite_4
    692            {
    693              if (dataOfs == 0)
   \   000091   EE           MOV     A,R6
   \   000092   4F           ORL     A,R7
   \   000093   7015         JNZ     ??MT_SysOsalNVWrite_5
    694              {
    695                /* Set the Z-Globals value of this NV item */
    696                zgSetItem( nvId, dataLen, pBuf );
   \   000095                ; Setup parameters for call to function zgSetItem
   \   000095   78..         MOV     R0,#?V4
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009A   AC..         MOV     R4,?V6
   \   00009C   AD..         MOV     R5,?V7
   \   00009E   AA..         MOV     R2,?V0
   \   0000A0   AB..         MOV     R3,?V1
   \   0000A2   12....       LCALL   `??zgSetItem::?relay`; Banked call to: zgSetItem
   \   0000A5   7402         MOV     A,#0x2
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
    697              }
    698              
    699              if ((osal_nv_write(nvId, dataOfs, dataLen, pBuf)) == ZSUCCESS)
   \                     ??MT_SysOsalNVWrite_5:
   \   0000AA                ; Setup parameters for call to function osal_nv_write
   \   0000AA   78..         MOV     R0,#?V4
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AF   78..         MOV     R0,#?V6
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   EE           MOV     A,R6
   \   0000B5   FC           MOV     R4,A
   \   0000B6   EF           MOV     A,R7
   \   0000B7   FD           MOV     R5,A
   \   0000B8   AA..         MOV     R2,?V0
   \   0000BA   AB..         MOV     R3,?V1
   \   0000BC   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   0000BF   7404         MOV     A,#0x4
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C4   E9           MOV     A,R1
   \   0000C5   701A         JNZ     ??MT_SysOsalNVWrite_6
    700              {
    701                if (nvId == ZCD_NV_EXTADDR)
   \   0000C7   7401         MOV     A,#0x1
   \   0000C9   65..         XRL     A,?V0
   \   0000CB   45..         ORL     A,?V1
   \   0000CD   7025         JNZ     ??MT_SysOsalNVWrite_7
    702                {
    703                  rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
   \   0000CF                ; Setup parameters for call to function ZMacSetReq
   \   0000CF   AA..         MOV     R2,?V4
   \   0000D1   AB..         MOV     R3,?V5
   \   0000D3   79E2         MOV     R1,#-0x1e
   \   0000D5   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   0000D8   E9           MOV     A,R1
   \   0000D9   85..82       MOV     DPL,?XSP + 0
   \   0000DC   85..83       MOV     DPH,?XSP + 1
   \   0000DF   8012         SJMP    ??MT_SysOsalNVWrite_8
    704                }
    705              }
    706              else
    707              {
    708                rtrn = NV_OPER_FAILED;
   \                     ??MT_SysOsalNVWrite_6:
   \   0000E1   85..82       MOV     DPL,?XSP + 0
   \   0000E4   85..83       MOV     DPH,?XSP + 1
   \   0000E7   740A         MOV     A,#0xa
   \   0000E9   8008         SJMP    ??MT_SysOsalNVWrite_8
    709              }
    710            }
    711            else
    712            {
    713              /* Bad length or/and offset */
    714              rtrn = ZInvalidParameter;
   \                     ??MT_SysOsalNVWrite_4:
   \   0000EB   85..82       MOV     DPL,?XSP + 0
   \   0000EE   85..83       MOV     DPH,?XSP + 1
   \   0000F1   7402         MOV     A,#0x2
   \                     ??MT_SysOsalNVWrite_8:
   \   0000F3   F0           MOVX    @DPTR,A
    715            }
    716          
    717            /* Build and send back the response */
    718            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    719                                           cmdId, 1, &rtrn);
   \                     ??MT_SysOsalNVWrite_7:
   \   0000F4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F4   AC..         MOV     R4,?XSP + 0
   \   0000F6   AD..         MOV     R5,?XSP + 1
   \   0000F8   7B01         MOV     R3,#0x1
   \   0000FA   AA..         MOV     R2,?V2
   \   0000FC   7961         MOV     R1,#0x61
   \   0000FE   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    720          }
   \   000101   7401         MOV     A,#0x1
   \   000103   12....       LCALL   ?DEALLOC_XSTACK8
   \   000106   7F0A         MOV     R7,#0xa
   \   000108   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   85..82       MOV     DPL,?V4
   \   000005   85..83       MOV     DPH,?V5
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
    721          
    722          /***************************************************************************************************
    723           * @fn      MT_SysOsalNVItemInit
    724           *
    725           * @brief   Attempt to create an NV item
    726           *
    727           * @param   pBuf - pointer to the data
    728           *
    729           * @return  None
    730           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    731          void MT_SysOsalNVItemInit(uint8 *pBuf)
   \                     MT_SysOsalNVItemInit:
    732          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8B..         MOV     ?V1,R3
    733            uint8 ret;
    734            uint8 idLen;
    735            uint16 nvId;
    736            uint16 nvLen;
    737          
    738            /* Skip over RPC header */
    739            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000C   EA           MOV     A,R2
   \   00000D   2403         ADD     A,#0x3
   \   00000F   F5..         MOV     ?V0,A
   \   000011   5002         JNC     ??MT_SysOsalNVItemInit_0
   \   000013   05..         INC     ?V1
    740          
    741            /* NV item ID */
    742            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??MT_SysOsalNVItemInit_0:
   \   000015   F582         MOV     DPL,A
   \   000017   85..83       MOV     DPH,?V1
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ?Subroutine7 & 0xFFFF
    743            /* NV item length */
    744            nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
   \                     ??CrossCallReturnLabel_7:
   \   00001F   85..82       MOV     DPL,?V0
   \   000022   85..83       MOV     DPH,?V1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FA           MOV     R2,A
   \   000029   85..82       MOV     DPL,?V0
   \   00002C   85..83       MOV     DPH,?V1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F9           MOV     R1,A
   \   000034   EA           MOV     A,R2
   \   000035   FC           MOV     R4,A
   \   000036   E4           CLR     A
   \   000037   39           ADDC    A,R1
   \   000038   FD           MOV     R5,A
    745            /* Initialization data length */
    746            idLen = pBuf[4];
   \   000039   85..82       MOV     DPL,?V0
   \   00003C   85..83       MOV     DPH,?V1
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V2,A
    747            pBuf += 5;
   \   000046   E5..         MOV     A,?V0
   \   000048   2405         ADD     A,#0x5
   \   00004A   F5..         MOV     ?V0,A
   \   00004C   5002         JNC     ??MT_SysOsalNVItemInit_1
   \   00004E   05..         INC     ?V1
    748          
    749            if ( idLen < nvLen )
   \                     ??MT_SysOsalNVItemInit_1:
   \   000050   C3           CLR     C
   \   000051   E5..         MOV     A,?V2
   \   000053   9C           SUBB    A,R4
   \   000054   E4           CLR     A
   \   000055   9D           SUBB    A,R5
   \   000056   5045         JNC     ??MT_SysOsalNVItemInit_2
    750            {
    751              /* Attempt to create a new NV item */
    752              ret = osal_nv_item_init( nvId, nvLen, NULL );
   \   000058                ; Setup parameters for call to function osal_nv_item_init
   \   000058   E4           CLR     A
   \   000059   F5..         MOV     ?V4,A
   \   00005B   F5..         MOV     ?V5,A
   \   00005D   78..         MOV     R0,#?V4
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EE           MOV     A,R6
   \   000063   FA           MOV     R2,A
   \   000064   EF           MOV     A,R7
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   000069   7402         MOV     A,#0x2
   \   00006B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006E   E9           MOV     A,R1
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   F0           MOVX    @DPTR,A
    753              if ( (ret == NV_ITEM_UNINIT) && (idLen > 0) )
   \   000076   6409         XRL     A,#0x9
   \   000078   703C         JNZ     ??MT_SysOsalNVItemInit_3
   \   00007A   E5..         MOV     A,?V2
   \   00007C   6038         JZ      ??MT_SysOsalNVItemInit_3
    754              {
    755                /* Write initialization data to first part of new item */
    756                (void) osal_nv_write( nvId, 0, (uint16)idLen, pBuf );
   \   00007E                ; Setup parameters for call to function osal_nv_write
   \   00007E   78..         MOV     R0,#?V0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   75..00       MOV     ?V3,#0x0
   \   000086   78..         MOV     R0,#?V2
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7C00         MOV     R4,#0x0
   \   00008D   7D00         MOV     R5,#0x0
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000096   7404         MOV     A,#0x4
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   8019         SJMP    ??MT_SysOsalNVItemInit_3
    757              }
    758            }
    759            else
    760            {
    761              /* Attempt to create/initialize a new NV item */
    762              ret = osal_nv_item_init( nvId, nvLen, pBuf );
   \                     ??MT_SysOsalNVItemInit_2:
   \   00009D                ; Setup parameters for call to function osal_nv_item_init
   \   00009D   78..         MOV     R0,#?V0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   EE           MOV     A,R6
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   FB           MOV     R3,A
   \   0000A6   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   0000A9   7402         MOV     A,#0x2
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   F0           MOVX    @DPTR,A
    763            }
    764          
    765            /* Build and send back the response */
    766            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    767                                           MT_SYS_OSAL_NV_ITEM_INIT, 1, &ret);
   \                     ??MT_SysOsalNVItemInit_3:
   \   0000B6                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000B6   AC..         MOV     R4,?XSP + 0
   \   0000B8   AD..         MOV     R5,?XSP + 1
   \   0000BA   7B01         MOV     R3,#0x1
   \   0000BC   7A07         MOV     R2,#0x7
   \   0000BE   7961         MOV     R1,#0x61
   \   0000C0   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    768          }
   \   0000C3   7401         MOV     A,#0x1
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C8   7F06         MOV     R7,#0x6
   \   0000CA   02....       LJMP    ?BANKED_LEAVE_XDATA
    769          
    770          /***************************************************************************************************
    771           * @fn      MT_SysOsalNVDelete
    772           *
    773           * @brief   Attempt to delete an NV item
    774           *
    775           * @param   pBuf - pointer to the data
    776           *
    777           * @return  None
    778           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    779          void MT_SysOsalNVDelete(uint8 *pBuf)
   \                     MT_SysOsalNVDelete:
    780          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    781            uint16 nvId;
    782            uint16 nvLen;
    783            uint8 ret;
    784          
    785            /* Skip over RPC header */
    786            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000A   EA           MOV     A,R2
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FA           MOV     R2,A
   \   00000E   5001         JNC     ??MT_SysOsalNVDelete_0
   \   000010   0B           INC     R3
    787          
    788            /* Get the ID */
    789            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
    790            /* Get the length */
    791            nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
    792          
    793            /* Attempt to delete the NV item */
    794            ret = osal_nv_delete( nvId, nvLen );
   \                     ??MT_SysOsalNVDelete_0:
   \   000011                ; Setup parameters for call to function osal_nv_delete
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FC           MOV     R4,A
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000021   E4           CLR     A
   \   000022   39           ADDC    A,R1
   \   000023   FD           MOV     R5,A
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FE           MOV     R6,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   EE           MOV     A,R6
   \   00002E   FA           MOV     R2,A
   \   00002F   E4           CLR     A
   \   000030   39           ADDC    A,R1
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
   \   000035   12....       LCALL   ?Subroutine13 & 0xFFFF
    795          
    796            /* Build and send back the response */
    797            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    798                                           MT_SYS_OSAL_NV_DELETE, 1, &ret);
   \                     ??CrossCallReturnLabel_35:
   \   000038   7A12         MOV     R2,#0x12
   \   00003A   80..         SJMP    ??Subroutine21_0
    799          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine20_0
   \   000001                ; // Fall through to label ??Subroutine20_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine20_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EC           MOV     A,R4
   \   000007   28           ADD     A,R0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine21_0:
   \   000000   7961         MOV     R1,#0x61
   \   000002                REQUIRE ??Subroutine22_0
   \   000002                ; // Fall through to label ??Subroutine22_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine22_0:
   \   000000   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000003   7401         MOV     A,#0x1
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008                REQUIRE ??Subroutine23_0
   \   000008                ; // Fall through to label ??Subroutine23_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine28_0
   \   000007                ; // Fall through to label ??Subroutine28_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine28_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC..         MOV     R4,?XSP + 0
   \   000003   AD..         MOV     R5,?XSP + 1
   \   000005   7B01         MOV     R3,#0x1
   \   000007   22           RET
    800          
    801          /***************************************************************************************************
    802           * @fn      MT_SysOsalNVLength
    803           *
    804           * @brief   Attempt to get the length to an NV item
    805           *
    806           * @param   pBuf - pointer to the data
    807           *
    808           * @return  None
    809           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    810          void MT_SysOsalNVLength(uint8 *pBuf)
   \                     MT_SysOsalNVLength:
    811          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    812            uint16 nvId;
    813            uint16 nvLen;
    814            uint8 rsp[2];
    815          
    816            /* Skip over RPC header */
    817            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   00000A   EA           MOV     A,R2
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FA           MOV     R2,A
   \   00000E   5001         JNC     ??MT_SysOsalNVLength_0
   \   000010   0B           INC     R3
    818          
    819            /* Get the ID */
    820            nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
    821          
    822            /* Attempt to get NV item length */
    823            nvLen = osal_nv_item_len( nvId );
   \                     ??MT_SysOsalNVLength_0:
   \   000011                ; Setup parameters for call to function osal_nv_item_len
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   12....       LCALL   ??Subroutine20_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00001A   FA           MOV     R2,A
   \   00001B   E4           CLR     A
   \   00001C   39           ADDC    A,R1
   \   00001D   FB           MOV     R3,A
   \   00001E   12....       LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
    824            rsp[0] = LO_UINT16( nvLen );
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   EA           MOV     A,R2
   \   000028   F0           MOVX    @DPTR,A
    825            rsp[1] = HI_UINT16( nvLen );
   \   000029   7401         MOV     A,#0x1
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   12....       LCALL   ?Subroutine12 & 0xFFFF
    826          
    827            /* Build and send back the response */
    828            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
    829                                           MT_SYS_OSAL_NV_LENGTH, 2, rsp);
   \                     ??CrossCallReturnLabel_30:
   \   000031   7A13         MOV     R2,#0x13
   \   000033   02....       LJMP    ?Subroutine2 & 0xFFFF
    830          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7961         MOV     R1,#0x61
   \   000002   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   \   000005   7402         MOV     A,#0x2
   \   000007                REQUIRE ??Subroutine24_0
   \   000007                ; // Fall through to label ??Subroutine24_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   EB           MOV     A,R3
   \   000001                REQUIRE ??Subroutine25_0
   \   000001                ; // Fall through to label ??Subroutine25_0
    831          #endif // !defined(CC253X_MACNP)
    832          
    833          /***************************************************************************************************
    834           * @fn      MT_SysOsalStartTimer
    835           *
    836           * @brief
    837           *
    838           * @param   uint8 pBuf - pointer to the data
    839           *
    840           * @return  None
    841           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    842          void MT_SysOsalStartTimer(uint8 *pBuf)
   \                     MT_SysOsalStartTimer:
    843          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    844            uint16 eventId;
    845            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
    846            uint8 cmdId;
    847          
    848            /* parse header */
    849            cmdId = pBuf[MT_RPC_POS_CMD1];
    850            pBuf += MT_RPC_FRAME_HDR_SZ;
   \                     ??CrossCallReturnLabel_15:
   \   00000D   FA           MOV     R2,A
   \   00000E   5001         JNC     ??MT_SysOsalStartTimer_0
   \   000010   0B           INC     R3
    851          
    852            if (*pBuf <= 3)
   \                     ??MT_SysOsalStartTimer_0:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C3           CLR     C
   \   000017   9404         SUBB    A,#0x4
   \   000019   5032         JNC     ??MT_SysOsalStartTimer_1
    853            {
    854              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    855              retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   12....       LCALL   ?Subroutine8 & 0xFFFF
    856            }
   \                     ??CrossCallReturnLabel_29:
   \   000025   F5..         MOV     ?V0,A
   \   000027   E4           CLR     A
   \   000028   39           ADDC    A,R1
   \   000029   F5..         MOV     ?V1,A
   \   00002B   E4           CLR     A
   \   00002C   F5..         MOV     ?V2,A
   \   00002E   F5..         MOV     ?V3,A
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000035   8A82         MOV     DPL,R2
   \   000037   8B83         MOV     DPH,R3
   \   000039   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00003C   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00003F   7404         MOV     A,#0x4
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   \   000044   E9           MOV     A,R1
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   8008         SJMP    ??MT_SysOsalStartTimer_2
    857            else
    858            {
    859              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStartTimer_1:
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   7402         MOV     A,#0x2
    860            }
   \                     ??MT_SysOsalStartTimer_2:
   \   000055   12....       LCALL   ??Subroutine28_0 & 0xFFFF
    861          
    862            /* Build and send back the response */
    863            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_37:
   \   000058   EE           MOV     A,R6
   \   000059   FA           MOV     R2,A
   \   00005A   7961         MOV     R1,#0x61
   \   00005C   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
    864          }
   \   00005F   7401         MOV     A,#0x1
   \   000061                REQUIRE ?Subroutine3
   \   000061                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   25E0         ADD     A,0xE0 /* A   */
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   F9           MOV     R1,A
   \   000007   74..         MOV     A,#MT_SysOsalEventId & 0xff
   \   000009   28           ADD     A,R0
   \   00000A   F582         MOV     DPL,A
   \   00000C   74..         MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
   \   00000E   39           ADDC    A,R1
   \   00000F   F583         MOV     DPH,A
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   90....       MOV     DPTR,#MT_TaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   22           RET
    865          
    866          /***************************************************************************************************
    867           * @fn      MT_SysOsalStopTimer
    868           *
    869           * @brief
    870           *
    871           * @param   uint8 pBuf - pointer to the data
    872           *
    873           * @return  None
    874           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   AC..         MOV     R4,?XSP + 0
   \   000002   AD..         MOV     R5,?XSP + 1
   \   000004   7B01         MOV     R3,#0x1
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008                REQUIRE ??Subroutine21_0
   \   000008                ; // Fall through to label ??Subroutine21_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    875          void MT_SysOsalStopTimer(uint8 *pBuf)
   \                     MT_SysOsalStopTimer:
    876          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    877            uint16 eventId;
    878            uint8 retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
    879            uint8 cmdId;
    880          
    881            /* parse header */
    882            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000013   12....       LCALL   ?Subroutine9 & 0xFFFF
    883            pBuf += MT_RPC_FRAME_HDR_SZ;
    884          
    885            if (*pBuf <= 3)
   \                     ??CrossCallReturnLabel_8:
   \   000016   C3           CLR     C
   \   000017   9404         SUBB    A,#0x4
   \   000019   5016         JNC     ??MT_SysOsalStopTimer_0
    886            {
    887              eventId = (uint16) MT_SysOsalEventId[*pBuf];
    888              retValue = osal_stop_timerEx(MT_TaskID, eventId);
   \   00001B                ; Setup parameters for call to function osal_stop_timerEx
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   12....       LCALL   ?Subroutine4 & 0xFFFF
    889            }
   \                     ??CrossCallReturnLabel_1:
   \   000025   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000028   E9           MOV     A,R1
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   8008         SJMP    ??MT_SysOsalStopTimer_1
    890            else
    891            {
    892              retValue = ZInvalidParameter;
   \                     ??MT_SysOsalStopTimer_0:
   \   000031   85..82       MOV     DPL,?XSP + 0
   \   000034   85..83       MOV     DPH,?XSP + 1
   \   000037   7402         MOV     A,#0x2
   \                     ??MT_SysOsalStopTimer_1:
   \   000039   F0           MOVX    @DPTR,A
    893            }
    894          
    895            /* Build and send back the response */
    896            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
   \   00003A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003A   02....       LJMP    ?Subroutine0 & 0xFFFF
    897          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   22           RET
    898          
    899          /***************************************************************************************************
    900           * @fn      MT_SysRandom
    901           *
    902           * @brief
    903           *
    904           * @param   uint8 pData - pointer to the data
    905           *
    906           * @return  None
    907           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    908          void MT_SysRandom()
   \                     MT_SysRandom:
    909          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    910            uint16 randValue = Onboard_rand();
   \   00000A                ; Setup parameters for call to function Onboard_rand
   \   00000A   12....       LCALL   `??Onboard_rand::?relay`; Banked call to: Onboard_rand
    911            uint8 retArray[2];
    912          
    913            retArray[0] = LO_UINT16(randValue);
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   EA           MOV     A,R2
   \   000014   F0           MOVX    @DPTR,A
    914            retArray[1] = HI_UINT16(randValue);
   \   000015   7401         MOV     A,#0x1
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine12 & 0xFFFF
    915          
    916            /* Build and send back the response */
    917            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
   \                     ??CrossCallReturnLabel_31:
   \   00001D   7A0C         MOV     R2,#0xc
   \   00001F   80..         SJMP    ?Subroutine2
    918          }
    919          
    920          /***************************************************************************************************
    921           * @fn      MT_SysAdcRead
    922           *
    923           * @brief   Reading ADC value, temperature sensor and voltage
    924           *
    925           * @param   uint8 pBuf - pointer to the data
    926           *
    927           * @return  None
    928           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    929          void MT_SysAdcRead(uint8 *pBuf)
   \                     MT_SysAdcRead:
    930          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    931          #ifndef HAL_BOARD_LM3S
    932            uint8 channel, resolution;
    933            uint16 tempValue;
    934            uint8 retArray[2];
    935            uint8 cmdId;
    936          
    937            /* parse header */
    938            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine9 & 0xFFFF
    939            pBuf += MT_RPC_FRAME_HDR_SZ;
    940          
    941            /* Channel */
    942            channel = *pBuf++;
   \                     ??CrossCallReturnLabel_9:
   \   00000D   F9           MOV     R1,A
    943          
    944            /* Resolution */
    945            resolution = *pBuf++;
    946          
    947            /* Voltage reading */
    948            switch (channel)
   \   00000E   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for MT_SysAdcRead>_0`:
   \   000011   01           DB        1
   \   000012   00           DB        0
   \   000013   07           DB        7
   \   000014   ....         DW        ??MT_SysAdcRead_0
   \   000016   02           DB        2
   \   000017   0E           DB        14
   \   000018   ....         DW        ??MT_SysAdcRead_1
   \   00001A   0F           DB        15
   \   00001B   ....         DW        ??MT_SysAdcRead_2
   \   00001D   ....         DW        ??MT_SysAdcRead_3
    949            {
    950              /* Analog input channel */
    951              case HAL_ADC_CHANNEL_0:
    952              case HAL_ADC_CHANNEL_1:
    953              case HAL_ADC_CHANNEL_2:
    954              case HAL_ADC_CHANNEL_3:
    955              case HAL_ADC_CHANNEL_4:
    956              case HAL_ADC_CHANNEL_5:
    957              case HAL_ADC_CHANNEL_6:
    958              case HAL_ADC_CHANNEL_7:
    959                tempValue = HalAdcRead(channel, resolution);
   \                     ??MT_SysAdcRead_0:
   \   00001F                ; Setup parameters for call to function HalAdcRead
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FA           MOV     R2,A
   \   000029   800A         SJMP    ??MT_SysAdcRead_4
    960                break;
    961          
    962              /* Temperature sensor */
    963              case(HAL_ADC_CHANNEL_TEMP):
    964                tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_1:
   \   00002B                ; Setup parameters for call to function HalAdcRead
   \   00002B   7A04         MOV     R2,#0x4
   \   00002D   790E         MOV     R1,#0xe
   \   00002F   8004         SJMP    ??MT_SysAdcRead_4
    965                break;
    966          
    967              /* Voltage reading */
    968              case(HAL_ADC_CHANNEL_VDD):
    969                tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
   \                     ??MT_SysAdcRead_2:
   \   000031                ; Setup parameters for call to function HalAdcRead
   \   000031   7A04         MOV     R2,#0x4
   \   000033   790F         MOV     R1,#0xf
   \                     ??MT_SysAdcRead_4:
   \   000035   12....       LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
   \   000038   8A..         MOV     ?V0,R2
   \   00003A   8B..         MOV     ?V1,R3
   \   00003C   A8..         MOV     R0,?V0
   \   00003E   A9..         MOV     R1,?V1
    970                break;
   \   000040   8004         SJMP    ??MT_SysAdcRead_5
    971          
    972              /* Undefined channels */
    973              default:
    974                tempValue = 0x00;
   \                     ??MT_SysAdcRead_3:
   \   000042   7800         MOV     R0,#0x0
   \   000044   7900         MOV     R1,#0x0
    975                break;
    976            }
    977          
    978            retArray[0] = LO_UINT16(tempValue);
   \                     ??MT_SysAdcRead_5:
   \   000046   E8           MOV     A,R0
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   F0           MOVX    @DPTR,A
    979            retArray[1] = HI_UINT16(tempValue);
   \   00004E   7401         MOV     A,#0x1
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E9           MOV     A,R1
   \   000054   12....       LCALL   ??Subroutine25_0 & 0xFFFF
    980          
    981            /* Build and send back the response */
    982            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
   \                     ??CrossCallReturnLabel_34:
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059                REQUIRE ?Subroutine2
   \   000059                ; // Fall through to label ?Subroutine2
    983          #endif /* #ifndef HAL_BOARD_LM3S */
    984          }
    985          
    986          /**************************************************************************************************
    987           * @fn      MT_SysGpio
    988           *
    989           * @brief   ZAccel RPC interface for controlling the available GPIO pins.
    990           *
    991           * @param   uint8 pBuf - pointer to the data
    992           *
    993           * @return  None
    994           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    995          void MT_SysGpio(uint8 *pBuf)
   \                     MT_SysGpio:
    996          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    997            uint8 cmd, val;
    998            GPIO_Op_t op;
    999          
   1000            cmd = pBuf[MT_RPC_POS_CMD1];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   1001            pBuf += MT_RPC_FRAME_HDR_SZ;
   1002          
   1003            op = (GPIO_Op_t)(*pBuf++);
   1004            val = *pBuf;
   1005          
   1006            switch (op)
   1007            {
   1008              case GPIO_DIR:
   1009                if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
   1010                if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
   1011                if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
   1012                if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
   1013                break;
   1014          
   1015              case GPIO_TRI:
   1016                if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
   1017                if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
   1018                if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
   1019                if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
   1020                break;
   1021          
   1022              case GPIO_SET:
   1023                if (val & BV(0)) {GPIO_SET(0);}
   1024                if (val & BV(1)) {GPIO_SET(1);}
   1025                if (val & BV(2)) {GPIO_SET(2);}
   1026                if (val & BV(3)) {GPIO_SET(3);}
   1027                break;
   1028          
   1029              case GPIO_CLR:
   1030                if (val & BV(0)) {GPIO_CLR(0);}
   1031                if (val & BV(1)) {GPIO_CLR(1);}
   1032                if (val & BV(2)) {GPIO_CLR(2);}
   1033                if (val & BV(3)) {GPIO_CLR(3);}
   1034                break;
   1035          
   1036              case GPIO_TOG:
   1037                if (val & BV(0)) {GPIO_TOG(0);}
   1038                if (val & BV(1)) {GPIO_TOG(1);}
   1039                if (val & BV(2)) {GPIO_TOG(2);}
   1040                if (val & BV(3)) {GPIO_TOG(3);}
   1041                break;
   1042          
   1043              case GPIO_GET:
   1044                break;
   1045          
   1046              case GPIO_HiD:
   1047                (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
   1048                break;
   1049          
   1050              default:
   1051                break;
   1052            }
   1053          
   1054            val  = (GPIO_GET(0)) ? BV(0) : 0;
   1055            val |= (GPIO_GET(1)) ? BV(1) : 0;
   1056            val |= (GPIO_GET(2)) ? BV(2) : 0;
   1057            val |= (GPIO_GET(3)) ? BV(3) : 0;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   E4           CLR     A
   \   000018   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   1058          
   1059            /* Build and send back the response */
   1060            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
   \                     ??CrossCallReturnLabel_38:
   \   00001B   7961         MOV     R1,#0x61
   \   00001D   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1061          }
   \   000020   7401         MOV     A,#0x1
   \   000022   80..         SJMP    ??Subroutine26_0
   1062          
   1063          /**************************************************************************************************
   1064           * @fn      MT_SysStackTune
   1065           *
   1066           * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
   1067           *
   1068           * @param   uint8 pBuf - pointer to the data
   1069           *
   1070           * @return  None
   1071           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1072          void MT_SysStackTune(uint8 *pBuf)
   \                     MT_SysStackTune:
   1073          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1074            uint8 cmd, rtrn;
   1075          
   1076            cmd = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   1077            pBuf += MT_RPC_FRAME_HDR_SZ;
   1078          
   1079            switch (*pBuf++)
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   F8           MOV     R0,A
   \   000016   E4           CLR     A
   \   000017   3B           ADDC    A,R3
   \   000018   F9           MOV     R1,A
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   A3           INC     DPTR
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   E0           MOVX    A,@DPTR
   \   000027   6005         JZ      ??MT_SysStackTune_0
   \   000029   14           DEC     A
   \   00002A   6006         JZ      ??MT_SysStackTune_1
   \   00002C   8029         SJMP    ??MT_SysStackTune_2
   1080            {
   1081            case STK_TX_PWR:
   1082              rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
   \                     ??MT_SysStackTune_0:
   \   00002E                ; Setup parameters for call to function ZMacSetReq
   \   00002E   79E0         MOV     R1,#-0x20
   \   000030   8019         SJMP    ??MT_SysStackTune_3
   1083              break;
   1084          
   1085            case STK_RX_ON_IDLE:
   1086              if ((*pBuf != TRUE) && (*pBuf != FALSE))
   \                     ??MT_SysStackTune_1:
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6401         XRL     A,#0x1
   \   000039   600E         JZ      ??MT_SysStackTune_4
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   600B         JZ      ??MT_SysStackTune_4
   1087              {
   1088                (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
   \   00003E                ; Setup parameters for call to function ZMacGetReq
   \   00003E   AA..         MOV     R2,?XSP + 0
   \   000040   AB..         MOV     R3,?XSP + 1
   \   000042   7952         MOV     R1,#0x52
   \   000044   12....       LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
   \   000047   8017         SJMP    ??MT_SysStackTune_5
   1089              }
   1090              else
   1091              {
   1092                rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
   \                     ??MT_SysStackTune_4:
   \   000049                ; Setup parameters for call to function ZMacSetReq
   \   000049   7952         MOV     R1,#0x52
   \                     ??MT_SysStackTune_3:
   \   00004B   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
   \   00004E   E9           MOV     A,R1
   \   00004F   85..82       MOV     DPL,?XSP + 0
   \   000052   85..83       MOV     DPH,?XSP + 1
   \   000055   8008         SJMP    ??MT_SysStackTune_6
   1093              }
   1094              break;
   1095          
   1096            default:
   1097              rtrn = ZInvalidParameter;
   \                     ??MT_SysStackTune_2:
   \   000057   85..82       MOV     DPL,?XSP + 0
   \   00005A   85..83       MOV     DPH,?XSP + 1
   \   00005D   7402         MOV     A,#0x2
   \                     ??MT_SysStackTune_6:
   \   00005F   F0           MOVX    @DPTR,A
   1098              break;
   1099            }
   1100          
   1101            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
   \                     ??MT_SysStackTune_5:
   \   000060                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000060   02....       LJMP    ?Subroutine0 & 0xFFFF
   1102          }
   1103          
   1104          /***************************************************************************************************
   1105           * @fn      MT_SysSetUtcTime
   1106           *
   1107           * @brief   Set the OSAL UTC Time. UTC rollover is: 06:28:16 02/07/2136
   1108           *
   1109           * @param   pBuf - pointer to time parameters
   1110           *
   1111           * @return  None
   1112           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1113          void MT_SysSetUtcTime(uint8 *pBuf)
   \                     MT_SysSetUtcTime:
   1114          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1115            uint8 cmdId;
   1116            uint8 retStat;
   1117            UTCTime utcSecs;
   1118          
   1119            /* Parse header */
   1120            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0,A
   1121            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   5001         JNC     ??MT_SysSetUtcTime_0
   \   00001D   0F           INC     R7
   1122          
   1123            utcSecs = osal_build_uint32( pBuf, 4 );
   \                     ??MT_SysSetUtcTime_0:
   \   00001E                ; Setup parameters for call to function osal_build_uint32
   \   00001E   7904         MOV     R1,#0x4
   \   000020   FA           MOV     R2,A
   \   000021   EF           MOV     A,R7
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
   \   000026   8A..         MOV     ?V4,R2
   \   000028   8B..         MOV     ?V5,R3
   \   00002A   8C..         MOV     ?V6,R4
   \   00002C   8D..         MOV     ?V7,R5
   1124            if ( utcSecs == 0 )
   \   00002E   EA           MOV     A,R2
   \   00002F   45..         ORL     A,?V5
   \   000031   45..         ORL     A,?V6
   \   000033   45..         ORL     A,?V7
   \   000035   6003         JZ      $+5
   \   000037   02....       LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
   1125            {
   1126              UTCTimeStruct utc;
   1127          
   1128              /* Skip past UTC time */
   1129              pBuf += 4;
   1130          
   1131              /* Get time and date parameters */
   1132              utc.hour = *pBuf++;
   \   00003A   8E82         MOV     DPL,R6
   \   00003C   8F83         MOV     DPH,R7
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   C0E0         PUSH    A
   \   000045   7403         MOV     A,#0x3
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   D0E0         POP     A
   \   00004C   12....       LCALL   ?Subroutine16 & 0xFFFF
   1133              utc.minutes = *pBuf++;
   \                     ??CrossCallReturnLabel_18:
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   C0E0         PUSH    A
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   D0E0         POP     A
   \   000059   12....       LCALL   ?Subroutine16 & 0xFFFF
   1134              utc.seconds = *pBuf++;
   \                     ??CrossCallReturnLabel_19:
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   7401         MOV     A,#0x1
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine15 & 0xFFFF
   1135              utc.month = (*pBuf++) - 1;
   \                     ??CrossCallReturnLabel_16:
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   14           DEC     A
   \   00006C   C0E0         PUSH    A
   \   00006E   7405         MOV     A,#0x5
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   D0E0         POP     A
   \   000075   12....       LCALL   ?Subroutine15 & 0xFFFF
   1136              utc.day = (*pBuf++) - 1;
   \                     ??CrossCallReturnLabel_17:
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   14           DEC     A
   \   00007B   C0E0         PUSH    A
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   D0E0         POP     A
   \   000084   F0           MOVX    @DPTR,A
   1137              utc.year = osal_build_uint16 ( pBuf );
   \   000085                ; Setup parameters for call to function osal_build_uint16
   \   000085   EE           MOV     A,R6
   \   000086   2409         ADD     A,#0x9
   \   000088   FA           MOV     R2,A
   \   000089   E4           CLR     A
   \   00008A   3F           ADDC    A,R7
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
   \   00008F   7406         MOV     A,#0x6
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   EA           MOV     A,R2
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   EB           MOV     A,R3
   \   000098   F0           MOVX    @DPTR,A
   1138          
   1139              if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
   1140                  (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
   \   000099   7403         MOV     A,#0x3
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   E0           MOVX    A,@DPTR
   \   00009F   C3           CLR     C
   \   0000A0   9418         SUBB    A,#0x18
   \   0000A2   4003         JC      $+5
   \   0000A4   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   C3           CLR     C
   \   0000AE   943C         SUBB    A,#0x3c
   \   0000B0   4003         JC      $+5
   \   0000B2   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000B5   7401         MOV     A,#0x1
   \   0000B7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C3           CLR     C
   \   0000BC   943C         SUBB    A,#0x3c
   \   0000BE   4003         JC      $+5
   \   0000C0   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000C3   7405         MOV     A,#0x5
   \   0000C5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   C3           CLR     C
   \   0000CA   940C         SUBB    A,#0xc
   \   0000CC   4003         JC      $+5
   \   0000CE   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000D1   7404         MOV     A,#0x4
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   E0           MOVX    A,@DPTR
   \   0000D7   C3           CLR     C
   \   0000D8   941F         SUBB    A,#0x1f
   \   0000DA   4003         JC      $+5
   \   0000DC   02....       LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
   \   0000DF   7406         MOV     A,#0x6
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   2430         ADD     A,#0x30
   \   0000E7   F8           MOV     R0,A
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   34F8         ADDC    A,#-0x8
   \   0000EC   F9           MOV     R1,A
   \   0000ED   C3           CLR     C
   \   0000EE   E8           MOV     A,R0
   \   0000EF   9488         SUBB    A,#-0x78
   \   0000F1   E9           MOV     A,R1
   \   0000F2   9400         SUBB    A,#0x0
   \   0000F4   506E         JNC     ??MT_SysSetUtcTime_2
   1141              {
   1142                /* Got past the course filter, now check for leap year */
   1143                if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
   \   0000F6   7405         MOV     A,#0x5
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   6401         XRL     A,#0x1
   \   0000FE   704A         JNZ     ??MT_SysSetUtcTime_3
   \   000100   7406         MOV     A,#0x6
   \   000102   12....       LCALL   ?XSTACK_DISP0_8
   \   000105   E0           MOVX    A,@DPTR
   \   000106   F8           MOV     R0,A
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   F9           MOV     R1,A
   \   00010A   7A90         MOV     R2,#-0x70
   \   00010C   7B01         MOV     R3,#0x1
   \   00010E   12....       LCALL   ?US_DIV_MOD
   \   000111   8B..         MOV     ?V3,R3
   \   000113   EA           MOV     A,R2
   \   000114   45..         ORL     A,?V3
   \   000116   6022         JZ      ??MT_SysSetUtcTime_4
   \   000118   7406         MOV     A,#0x6
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   E0           MOVX    A,@DPTR
   \   00011E   F8           MOV     R0,A
   \   00011F   A3           INC     DPTR
   \   000120   E0           MOVX    A,@DPTR
   \   000121   F9           MOV     R1,A
   \   000122   7A64         MOV     R2,#0x64
   \   000124   7B00         MOV     R3,#0x0
   \   000126   12....       LCALL   ?US_DIV_MOD
   \   000129   8B..         MOV     ?V3,R3
   \   00012B   EA           MOV     A,R2
   \   00012C   45..         ORL     A,?V3
   \   00012E   600E         JZ      ??MT_SysSetUtcTime_5
   \   000130   7406         MOV     A,#0x6
   \   000132   12....       LCALL   ?XSTACK_DISP0_8
   \   000135   E0           MOVX    A,@DPTR
   \   000136   5403         ANL     A,#0x3
   \   000138   7004         JNZ     ??MT_SysSetUtcTime_5
   \                     ??MT_SysSetUtcTime_4:
   \   00013A   781D         MOV     R0,#0x1d
   \   00013C   8002         SJMP    ??MT_SysSetUtcTime_6
   \                     ??MT_SysSetUtcTime_5:
   \   00013E   781C         MOV     R0,#0x1c
   \                     ??MT_SysSetUtcTime_6:
   \   000140   7404         MOV     A,#0x4
   \   000142   12....       LCALL   ?XSTACK_DISP0_8
   \   000145   E0           MOVX    A,@DPTR
   \   000146   C3           CLR     C
   \   000147   98           SUBB    A,R0
   \   000148   501A         JNC     ??MT_SysSetUtcTime_2
   1144                {
   1145                  /* Numbers look reasonable, convert to UTC */
   1146                  utcSecs = osal_ConvertUTCSecs( &utc );
   \                     ??MT_SysSetUtcTime_3:
   \   00014A                ; Setup parameters for call to function osal_ConvertUTCSecs
   \   00014A   7401         MOV     A,#0x1
   \   00014C   12....       LCALL   ?XSTACK_DISP101_8
   \   00014F   12....       LCALL   `??osal_ConvertUTCSecs::?relay`; Banked call to: osal_ConvertUTCSecs
   \   000152   8A..         MOV     ?V4,R2
   \   000154   8B..         MOV     ?V5,R3
   \   000156   8C..         MOV     ?V6,R4
   \   000158   8D..         MOV     ?V7,R5
   1147                }
   1148              }
   1149            }
   1150          
   1151            if ( utcSecs == 0 )
   \                     ??MT_SysSetUtcTime_1:
   \   00015A   E5..         MOV     A,?V4
   \   00015C   45..         ORL     A,?V5
   \   00015E   45..         ORL     A,?V6
   \   000160   45..         ORL     A,?V7
   \   000162   700A         JNZ     ??MT_SysSetUtcTime_7
   1152            {
   1153              /* Bad parameter(s) */
   1154              retStat = ZInvalidParameter;
   \                     ??MT_SysSetUtcTime_2:
   \   000164   85..82       MOV     DPL,?XSP + 0
   \   000167   85..83       MOV     DPH,?XSP + 1
   \   00016A   7402         MOV     A,#0x2
   \   00016C   8012         SJMP    ??MT_SysSetUtcTime_8
   1155            }
   1156            else
   1157            {
   1158              /* Parameters accepted, set the time */
   1159              osal_setClock( utcSecs );
   \                     ??MT_SysSetUtcTime_7:
   \   00016E                ; Setup parameters for call to function osal_setClock
   \   00016E   AA..         MOV     R2,?V4
   \   000170   AB..         MOV     R3,?V5
   \   000172   AC..         MOV     R4,?V6
   \   000174   AD..         MOV     R5,?V7
   \   000176   12....       LCALL   `??osal_setClock::?relay`; Banked call to: osal_setClock
   1160              retStat = ZSuccess;
   \   000179   85..82       MOV     DPL,?XSP + 0
   \   00017C   85..83       MOV     DPH,?XSP + 1
   \   00017F   E4           CLR     A
   1161            }
   \                     ??MT_SysSetUtcTime_8:
   \   000180   12....       LCALL   ??Subroutine28_0 & 0xFFFF
   1162          
   1163            /* Build and send back the response */
   1164            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1165                                           cmdId, 1, &retStat);
   \                     ??CrossCallReturnLabel_39:
   \   000183   AA..         MOV     R2,?V0
   \   000185   7961         MOV     R1,#0x61
   \   000187   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1166          }
   \   00018A   7408         MOV     A,#0x8
   \   00018C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00018F   7F08         MOV     R7,#0x8
   \   000191   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   1167          
   1168          /***************************************************************************************************
   1169           * @fn      MT_SysGetUtcTime
   1170           *
   1171           * @brief   Get the OSAL UTC time
   1172           *
   1173           * @param   None
   1174           *
   1175           * @return  32-bit and Parsed UTC time
   1176           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1177          void MT_SysGetUtcTime(void)
   \                     MT_SysGetUtcTime:
   1178          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1179            uint8 len;
   1180            uint8 *buf;
   1181          
   1182            len = sizeof( UTCTime ) + sizeof( UTCTimeStruct );
   1183          
   1184            buf = osal_mem_alloc( len );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A0B         MOV     R2,#0xb
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   000011   8A..         MOV     ?V0,R2
   \   000013   8B..         MOV     ?V1,R3
   \   000015   AE..         MOV     R6,?V0
   \   000017   AF..         MOV     R7,?V1
   1185            if ( buf )
   \   000019   EE           MOV     A,R6
   \   00001A   4F           ORL     A,R7
   \   00001B   7003         JNZ     $+5
   \   00001D   02....       LJMP    ??MT_SysGetUtcTime_0 & 0xFFFF
   1186            {
   1187              uint8 *pBuf;
   1188              UTCTime utcSecs;
   1189              UTCTimeStruct utcTime;
   1190          
   1191              // Get current 32-bit UTC time and parse it
   1192              utcSecs = osal_getClock();
   \   000020                ; Setup parameters for call to function osal_getClock
   \   000020   12....       LCALL   `??osal_getClock::?relay`; Banked call to: osal_getClock
   \   000023   8A..         MOV     ?V0,R2
   \   000025   8B..         MOV     ?V1,R3
   \   000027   8C..         MOV     ?V2,R4
   \   000029   8D..         MOV     ?V3,R5
   1193              osal_ConvertUTCTime( &utcTime, utcSecs );
   \   00002B                ; Setup parameters for call to function osal_ConvertUTCTime
   \   00002B   78..         MOV     R0,#?V0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000030   7404         MOV     A,#0x4
   \   000032   12....       LCALL   ?XSTACK_DISP101_8
   \   000035   12....       LCALL   `??osal_ConvertUTCTime::?relay`; Banked call to: osal_ConvertUTCTime
   \   000038   7404         MOV     A,#0x4
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   1194          
   1195              // Start with 32-bit UTC time
   1196              pBuf = osal_buffer_uint32( buf, utcSecs );
   \   00003D                ; Setup parameters for call to function osal_buffer_uint32
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000042   EE           MOV     A,R6
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
   \   000049   7404         MOV     A,#0x4
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   1197          
   1198              // Concatenate parsed UTC time fields
   1199              *pBuf++ = utcTime.hour;
   \   00004E   7402         MOV     A,#0x2
   \   000050   12....       LCALL   ?XSTACK_DISP0_8
   \   000053   E0           MOVX    A,@DPTR
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   F0           MOVX    @DPTR,A
   1200              *pBuf++ = utcTime.minutes;
   \   000059   7401         MOV     A,#0x1
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000061   F0           MOVX    @DPTR,A
   1201              *pBuf++ = utcTime.seconds;
   \   000062   85..82       MOV     DPL,?XSP + 0
   \   000065   85..83       MOV     DPH,?XSP + 1
   \   000068   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00006B   A3           INC     DPTR
   \   00006C   F0           MOVX    @DPTR,A
   1202              *pBuf++ = utcTime.month + 1;  // Convert to human numbers
   \   00006D   7404         MOV     A,#0x4
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000075   F0           MOVX    @DPTR,A
   1203              *pBuf++ = utcTime.day + 1;
   \   000076   7403         MOV     A,#0x3
   \   000078   12....       LCALL   ?XSTACK_DISP0_8
   \   00007B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00007E   A3           INC     DPTR
   \   00007F   F0           MOVX    @DPTR,A
   1204              *pBuf++ = LO_UINT16( utcTime.year );
   \   000080   7405         MOV     A,#0x5
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000088   F0           MOVX    @DPTR,A
   1205              *pBuf++ = HI_UINT16( utcTime.year );
   \   000089   7405         MOV     A,#0x5
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   A3           INC     DPTR
   \   00008F   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000092   A3           INC     DPTR
   \   000093   F0           MOVX    @DPTR,A
   1206          
   1207              /* Build and send back the response */
   1208              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1209                                             MT_SYS_GET_TIME, (uint8)(pBuf-buf), buf);
   \   000094                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000094   EE           MOV     A,R6
   \   000095   FC           MOV     R4,A
   \   000096   EF           MOV     A,R7
   \   000097   FD           MOV     R5,A
   \   000098   EE           MOV     A,R6
   \   000099   F8           MOV     R0,A
   \   00009A   EA           MOV     A,R2
   \   00009B   2407         ADD     A,#0x7
   \   00009D   C3           CLR     C
   \   00009E   98           SUBB    A,R0
   \   00009F   FB           MOV     R3,A
   \   0000A0   7A11         MOV     R2,#0x11
   \   0000A2   7961         MOV     R1,#0x61
   \   0000A4   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1210          
   1211              osal_mem_free( buf );
   \   0000A7                ; Setup parameters for call to function osal_mem_free
   \   0000A7   EE           MOV     A,R6
   \   0000A8   FA           MOV     R2,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   1212            }
   1213          }
   \                     ??MT_SysGetUtcTime_0:
   \   0000AE   7407         MOV     A,#0x7
   \   0000B0   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   04           INC     A
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1214          
   1215          /***************************************************************************************************
   1216           * @fn      MT_SysSetTxPower
   1217           *
   1218           * @brief   Set the transmit power.
   1219           *
   1220           * @param   pBuf - MT message containing the ZMacTransmitPower_t power level to set.
   1221           *
   1222           * @return  None
   1223           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1224          void MT_SysSetTxPower(uint8 *pBuf)
   \                     MT_SysSetTxPower:
   1225          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1226            /* A local variable to hold the signed dBm value of TxPower that is being requested. */
   1227            uint8 signed_dBm_of_TxPower_requeseted;
   1228          
   1229            /*
   1230             * A local variable to hold the signed dBm value of TxPower that can be set which is closest to
   1231             * the requested dBm value of TxPower, but which is also valid according to a complex set of
   1232             * compile-time and run-time configuration which is interpreted by the macRadioSetTxPower()
   1233             * function.
   1234             */
   1235            uint8 signed_dBm_of_TxPower_range_corrected;
   1236          
   1237            /* Parse the requested dBm from the RPC message. */
   1238            signed_dBm_of_TxPower_requeseted = pBuf[MT_RPC_POS_DAT0];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   F0           MOVX    @DPTR,A
   1239          
   1240            /*
   1241             * MAC_MlmeSetReq() will store an out-of-range dBm parameter value into the NIB. So it is not
   1242             * possible to learn the actual dBm value that will be set by invoking MACMlmeGetReq().
   1243             * But this actual dBm value is a required return value in the SRSP to this SREQ. Therefore,
   1244             * it is necessary to make this redundant pre-call to macRadioSetTxPower() here in order to run
   1245             * the code that will properly constrain the requested dBm to a valid range based on both the
   1246             * compile-time and the run-time configurations that affect the available valid ranges
   1247             * (i.e. MAC_MlmeSetReq() itself will invoke for a second time the macRadioSetTxPower() function).
   1248             */
   1249            signed_dBm_of_TxPower_range_corrected = macRadioSetTxPower(signed_dBm_of_TxPower_requeseted);
   \   000018                ; Setup parameters for call to function macRadioSetTxPower
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   `??macRadioSetTxPower::?relay`; Banked call to: macRadioSetTxPower
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E9           MOV     A,R1
   \   000022   F0           MOVX    @DPTR,A
   1250          
   1251            /*
   1252             * Call the function to store the requested dBm in the MAC PIB and to set the TxPower as closely
   1253             * as possible within the TxPower range that is valid for the compile-time and run-time
   1254             * configuration.
   1255             */
   1256            (void)MAC_MlmeSetReq(MAC_PHY_TRANSMIT_POWER_SIGNED, &signed_dBm_of_TxPower_requeseted);
   \   000023                ; Setup parameters for call to function MAC_MlmeSetReq
   \   000023   AA..         MOV     R2,?XSP + 0
   \   000025   AB..         MOV     R3,?XSP + 1
   \   000027   79E0         MOV     R1,#-0x20
   \   000029   12....       LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
   1257          
   1258            /* Build and send back the response that includes the actual dBm TxPower that can be set. */
   1259            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1260                                                 MT_SYS_SET_TX_POWER, 1,
   1261                                                 &signed_dBm_of_TxPower_range_corrected);
   \   00002C                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?XSTACK_DISP102_8
   \   000031   7B01         MOV     R3,#0x1
   \   000033   7A14         MOV     R2,#0x14
   \   000035   02....       LJMP    ?Subroutine1 & 0xFFFF
   1262          }
   1263          
   1264          #if defined ( FEATURE_SYSTEM_STATS )
   1265          /***************************************************************************************************
   1266           * @fn      MT_SysZDiagsInitStats
   1267           *
   1268           * @brief   Initialize the statistics table in NV or restore values from
   1269           *          NV into the Statistics table in RAM
   1270           *
   1271           * @param   None
   1272           *
   1273           * @return  None
   1274           ***************************************************************************************************/
   1275          void MT_SysZDiagsInitStats(void)
   1276          {
   1277            uint8 retValue;
   1278          
   1279            retValue = ZDiagsInitStats();
   1280          
   1281            /* Build and send back the response */
   1282            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1283                                          MT_SYS_ZDIAGS_INIT_STATS, 1, &retValue);
   1284          }
   1285          
   1286          /***************************************************************************************************
   1287           * @fn      MT_SysZDiagsClearStats
   1288           *
   1289           * @brief   Clears the statistics table in RAM and NV if option flag set.
   1290           *
   1291           * @param   uint8 pBuf - pointer to the data
   1292           *
   1293           * @return  None
   1294           ***************************************************************************************************/
   1295          void MT_SysZDiagsClearStats(uint8 *pBuf)
   1296          {
   1297            uint8 cmdId;
   1298            uint8 clearNV;
   1299            uint32 sysClock;
   1300            uint8 retBuf[4];
   1301          
   1302            /* parse header */
   1303            cmdId = pBuf[MT_RPC_POS_CMD1];
   1304            pBuf += MT_RPC_FRAME_HDR_SZ;
   1305          
   1306            clearNV = *pBuf;
   1307          
   1308            /* returns the system clock of the time when the statistics were cleared */
   1309            sysClock = ZDiagsClearStats( clearNV );
   1310          
   1311            retBuf[0] = BREAK_UINT32( sysClock, 0);
   1312            retBuf[1] = BREAK_UINT32( sysClock, 1);
   1313            retBuf[2] = BREAK_UINT32( sysClock, 2);
   1314            retBuf[3] = BREAK_UINT32( sysClock, 3);
   1315          
   1316            /* Build and send back the response */
   1317            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1318                                         cmdId, 4, retBuf);
   1319          }
   1320          
   1321          /***************************************************************************************************
   1322           * @fn      MT_SysZDiagsGetStatsAttr
   1323           *
   1324           * @brief   Reads specific system (attribute) ID statistics and/or metrics.
   1325           *
   1326           * @param   uint8 pBuf - pointer to the data
   1327           *
   1328           * @return  None
   1329           ***************************************************************************************************/
   1330          void MT_SysZDiagsGetStatsAttr(uint8 *pBuf)
   1331          {
   1332            uint8 cmdId;
   1333            uint16 attributeId;
   1334            uint32 attrValue;
   1335            uint8 retBuf[4];
   1336          
   1337            /* parse header */
   1338            cmdId = pBuf[MT_RPC_POS_CMD1];
   1339            pBuf += MT_RPC_FRAME_HDR_SZ;
   1340          
   1341            /* Get the Attribute ID */
   1342            attributeId = BUILD_UINT16(pBuf[0], pBuf[1]);
   1343          
   1344            attrValue = ZDiagsGetStatsAttr( attributeId );
   1345          
   1346            retBuf[0] = BREAK_UINT32( attrValue, 0);
   1347            retBuf[1] = BREAK_UINT32( attrValue, 1);
   1348            retBuf[2] = BREAK_UINT32( attrValue, 2);
   1349            retBuf[3] = BREAK_UINT32( attrValue, 3);
   1350          
   1351            /* Build and send back the response */
   1352            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1353                                         cmdId, 4, retBuf);
   1354          }
   1355          
   1356          /***************************************************************************************************
   1357           * @fn      MT_SysZDiagsRestoreStatsFromNV
   1358           *
   1359           * @brief   Restores the statistics table from NV into the RAM table.
   1360           *
   1361           * @param   None
   1362           *
   1363           * @return  None
   1364           ***************************************************************************************************/
   1365          void MT_SysZDiagsRestoreStatsFromNV(void)
   1366          {
   1367            uint8 retValue;
   1368          
   1369            retValue = ZDiagsRestoreStatsFromNV();
   1370          
   1371            /* Build and send back the response */
   1372            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1373                                          MT_SYS_ZDIAGS_RESTORE_STATS_NV, 1, &retValue);
   1374          }
   1375          
   1376          /***************************************************************************************************
   1377           * @fn      MT_SysZDiagsSaveStatsToNV
   1378           *
   1379           * @brief   Saves the statistics table from RAM to NV.
   1380           *
   1381           * @param   None
   1382           *
   1383           * @return  None
   1384           ***************************************************************************************************/
   1385          void MT_SysZDiagsSaveStatsToNV(void)
   1386          {
   1387            uint32 sysClock;
   1388            uint8 retBuf[4];
   1389          
   1390            /* returns the system clock of the time when the statistics were saved to NV */
   1391            sysClock = ZDiagsSaveStatsToNV();
   1392          
   1393            retBuf[0] = BREAK_UINT32( sysClock, 0);
   1394            retBuf[1] = BREAK_UINT32( sysClock, 1);
   1395            retBuf[2] = BREAK_UINT32( sysClock, 2);
   1396            retBuf[3] = BREAK_UINT32( sysClock, 3);
   1397          
   1398            /* Build and send back the response */
   1399            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1400                                         MT_SYS_ZDIAGS_SAVE_STATS_TO_NV, 4, retBuf);
   1401          }
   1402          #endif /* FEATURE_SYSTEM_STATS */
   1403          
   1404          #endif /* MT_SYS_FUNC */
   1405          
   1406          /***************************************************************************************************
   1407           * SUPPORT
   1408           ***************************************************************************************************/
   1409          
   1410          /***************************************************************************************************
   1411           * @fn      MT_SysResetInd()
   1412           *
   1413           * @brief   Sends a ZTOOL "reset response" message.
   1414           *
   1415           * @param   None
   1416           *
   1417           * @return  None
   1418           *
   1419           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1420          void MT_SysResetInd(void)
   \                     MT_SysResetInd:
   1421          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1422            uint8 retArray[6];
   1423          
   1424            retArray[0] = ResetReason();   /* Reason */
   \   00000A   E59D         MOV     A,0x9d
   \   00000C   13           RRC     A
   \   00000D   13           RRC     A
   \   00000E   13           RRC     A
   \   00000F   541F         ANL     A,#0x1f
   \   000011   5403         ANL     A,#0x3
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
   1425            osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
   \   00001A                ; Setup parameters for call to function osal_memcpy
   \   00001A   75....       MOV     ?V0,#MTVersionString & 0xff
   \   00001D   75....       MOV     ?V1,#(MTVersionString >> 8) & 0xff
   \   000020   75..00       MOV     ?V2,#0x0
   \   000023   78..         MOV     R0,#?V0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000028   7C05         MOV     R4,#0x5
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7404         MOV     A,#0x4
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   1426          
   1427            /* Send out Reset Response message */
   1428            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
   1429                                          sizeof(retArray), retArray);
   \   00003D                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00003D   AC..         MOV     R4,?XSP + 0
   \   00003F   AD..         MOV     R5,?XSP + 1
   \   000041   7B06         MOV     R3,#0x6
   \   000043   7A80         MOV     R2,#-0x80
   \   000045   7941         MOV     R1,#0x41
   \   000047   12....       LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
   1430          }
   \   00004A   7406         MOV     A,#0x6
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004F   7F03         MOV     R7,#0x3
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000054                REQUIRE SLEEPSTA
   1431          
   1432          /***************************************************************************************************
   1433           * @fn      MT_SysOsalTimerExpired()
   1434           *
   1435           * @brief   Sends a SYS Osal Timer Expired
   1436           *
   1437           * @param   None
   1438           *
   1439           * @return  None
   1440           *
   1441           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1442          void MT_SysOsalTimerExpired(uint8 Id)
   \                     MT_SysOsalTimerExpired:
   1443          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   1444            uint8 retValue;
   1445            retValue = Id;
   1446            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
   \                     ??CrossCallReturnLabel_36:
   \   00000D   7A81         MOV     R2,#-0x7f
   \   00000F   7941         MOV     R1,#0x41
   \   000011   02....       LJMP    ??Subroutine22_0 & 0xFFFF
   1447          }
   1448          
   1449          #if defined ( MT_SYS_JAMMER_FEATURE )
   1450          /***************************************************************************************************
   1451           * @fn      MT_SysJammerParameters
   1452           *
   1453           * @brief   Set the Jammer detection parameters.
   1454           *
   1455           * @param   pBuf - MT message containing the parameters.
   1456           *
   1457           * @return  None
   1458           ***************************************************************************************************/
   1459          void MT_SysJammerParameters( uint8 *pBuf )
   1460          {
   1461            uint8 status = SUCCESS;
   1462            
   1463            // Adjust for the data
   1464            pBuf += MT_RPC_FRAME_HDR_SZ;
   1465            
   1466            // Number of continuous events needed to detect Jam
   1467            jammerContinuousEvents = BUILD_UINT16( pBuf[0], pBuf[1] );
   1468            jammerDetections = jammerContinuousEvents;
   1469            pBuf += 2;
   1470            
   1471            // Noise Level need to be a Jam
   1472            jammerHighNoiseLevel = *pBuf++;
   1473            
   1474            // The time between each noise level reading
   1475            jammerDetectPeriodTime = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   1476            
   1477            // Update the timer
   1478            osal_start_reload_timer( jammerTaskID, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
   1479            
   1480            /* Build and send back the response that includes the actual dBm TxPower that can be set. */
   1481            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1482                                                 MT_SYS_JAMMER_PARAMETERS, 1, &status );
   1483          }
   1484          
   1485          /***************************************************************************************************
   1486           * @fn      MT_SysJammerInd()
   1487           *
   1488           * @brief   Sends a jammer indication message.
   1489           *
   1490           * @param   jammerInd - TRUE if jammer detected, FALSE if changed to undetected
   1491           *
   1492           * @return  None
   1493           *
   1494           ***************************************************************************************************/
   1495          void MT_SysJammerInd( uint8 jammerInd )
   1496          {
   1497            /* Send out Reset Response message */
   1498            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_JAMMER_IND,
   1499                                          1, &jammerInd );
   1500          }
   1501          
   1502          /***************************************************************************************************
   1503           * @fn      jammerInit()
   1504           *
   1505           * @brief   Jammer Detection task initialization function
   1506           *
   1507           * @param   taskId - task ID 
   1508           *
   1509           * @return  None
   1510           *
   1511           ***************************************************************************************************/
   1512          void jammerInit( uint8 taskId )
   1513          {
   1514            jammerTaskID = taskId; 
   1515            
   1516            // Start the jammer check timer
   1517            osal_start_reload_timer( taskId, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
   1518          }
   1519          
   1520          /***************************************************************************************************
   1521           * @fn      jammerEventLoop()
   1522           *
   1523           * @brief   Jammer Detection task event processing function
   1524           *
   1525           * @param   taskId - task ID 
   1526           * @param   events - task events 
   1527           *
   1528           * @return  remaining events
   1529           *
   1530           ***************************************************************************************************/
   1531          uint16 jammerEventLoop( uint8 taskId, uint16 events )
   1532          {
   1533            osal_event_hdr_t  *pMsg;
   1534          
   1535            if (events & SYS_EVENT_MSG)
   1536            {
   1537              if ( (pMsg = (osal_event_hdr_t *) osal_msg_receive( taskId )) != NULL )
   1538              {
   1539                switch ( pMsg->event )
   1540                {
   1541                  default:
   1542                    break;
   1543                }
   1544          
   1545                osal_msg_deallocate( (byte *)pMsg );
   1546              }
   1547          
   1548              events ^= SYS_EVENT_MSG;
   1549            }
   1550            else if ( events & JAMMER_CHECK_EVT )
   1551            {
   1552              // Make sure we aren't currently receiving a message
   1553              // and the radio is active.
   1554              if ( MAC_RX_IS_PHYSICALLY_ACTIVE() == MAC_RX_ACTIVE_NO_ACTIVITY )
   1555              {
   1556                int8 rssiDbm = -128;
   1557                
   1558                // Read the noise level
   1559                if ( RSSISTAT & 0x01 )
   1560                {
   1561                  /* Add the RSSI offset */  
   1562                  rssiDbm = RSSI + MAC_RADIO_RSSI_OFFSET;
   1563          
   1564                  /* Adjust for external PA/LNA, if any */
   1565                  MAC_RADIO_RSSI_LNA_OFFSET( rssiDbm );
   1566                
   1567                  // Check for a noise level that's high
   1568                  if ( jammerDetections && (rssiDbm  > jammerHighNoiseLevel) )
   1569                  {
   1570                    jammerDetections--;
   1571                    if ( jammerDetections == 0 )
   1572                    {
   1573                      // Jam detected
   1574                      MT_SysJammerInd( TRUE );
   1575                    }
   1576                  }
   1577                  else if ( rssiDbm <= jammerHighNoiseLevel )
   1578                  {
   1579                    if ( jammerDetections == 0 )
   1580                    {
   1581                      // Jam cleared
   1582                      MT_SysJammerInd( FALSE );
   1583                    }
   1584                    jammerDetections = jammerContinuousEvents;
   1585                  }
   1586                }
   1587              }
   1588              events ^= JAMMER_CHECK_EVT;
   1589            }
   1590            else
   1591            {
   1592              events = 0;  /* Discard unknown events. */
   1593            }
   1594          
   1595            return ( events );
   1596          }
   1597          #endif // MT_SYS_JAMMER_FEATURE
   1598          
   1599          #if defined ( MT_SYS_SNIFFER_FEATURE )
   1600          /***************************************************************************************************
   1601           * @fn      MT_SysSnifferParameters
   1602           *
   1603           * @brief   Set the sniffer parameters.
   1604           *
   1605           * @param   pBuf - MT message containing the parameters.
   1606           *
   1607           * @return  None
   1608           ***************************************************************************************************/
   1609          void MT_SysSnifferParameters( uint8 *pBuf )
   1610          {
   1611            uint8 status = SUCCESS;
   1612            uint8 param;
   1613            
   1614            // Adjust for the data
   1615            pBuf += MT_RPC_FRAME_HDR_SZ;
   1616            
   1617            // Noise Level need to be a Jam
   1618            param = *pBuf++;
   1619            
   1620            if ( param == MT_SYS_SNIFFER_DISABLE )
   1621            {
   1622              // Disable Sniffer
   1623              HAL_BOARD_DISABLE_INTEGRATED_SNIFFER();
   1624              sniffer = FALSE;
   1625            }
   1626            else if ( param == MT_SYS_SNIFFER_ENABLE )
   1627            {
   1628              // Enable the Sniffer
   1629              HAL_BOARD_ENABLE_INTEGRATED_SNIFFER();
   1630              sniffer = TRUE;
   1631            }
   1632            else if ( param == MT_SYS_SNIFFER_GET_SETTING )
   1633            {
   1634              status = sniffer; // sniffer setting
   1635            }
   1636            else 
   1637            {
   1638              status = INVALIDPARAMETER;
   1639            }
   1640            
   1641            /* Build and send back the response that includes the actual dBm TxPower that can be set. */
   1642            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
   1643                                                 MT_SYS_SNIFFER_PARAMETERS, 1, &status );
   1644          }
   1645          #endif // MT_SYS_SNIFFER_FEATURE
   1646          
   1647          /**************************************************************************************************
   1648           * @fn          powerOffSoc
   1649           *
   1650           * @brief       put the device in lowest power mode infinitely.
   1651           *
   1652           * input parameters
   1653           *
   1654           * None.
   1655           *
   1656           * output parameters
   1657           *
   1658           * None.
   1659           *
   1660           * @return      None.
   1661           **************************************************************************************************
   1662           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1663          void powerOffSoc(void)
   \                     powerOffSoc:
   1664          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1665          #ifdef ENABLE_MT_SYS_RESET_SHUTDOWN
   1666            HAL_DISABLE_INTERRUPTS();
   1667          
   1668            /* turn off the RF front end device */
   1669            //TBD, based on the rf-front-end being used
   1670          
   1671            /* turn off the receiver */
   1672            MAC_RADIO_RXTX_OFF();
   1673            
   1674            /* just in case a receive was about to start, flush the receive FIFO */
   1675            MAC_RADIO_FLUSH_RX_FIFO();
   1676            
   1677            /* clear any receive interrupt that happened to squeak through */
   1678            MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
   1679            
   1680            /* put MAC timer to sleep */
   1681            MAC_RADIO_TIMER_SLEEP();
   1682            
   1683            /* power of radio */
   1684            MAC_RADIO_TURN_OFF_POWER();
   1685            
   1686            STIF = 0; //HAL_SLEEP_TIMER_CLEAR_INT;
   1687            
   1688            if (ZNP_CFG1_UART == znpCfg1)
   1689            {
   1690              HalUARTSuspend();
   1691            }
   1692            
   1693            /* Prep CC2530 power mode */
   1694            //HAL_SLEEP_PREP_POWER_MODE(3);
   1695            SLEEPCMD &= ~PMODE; /* clear mode bits */
   1696            SLEEPCMD |= 3;      /* set mode bits  to PM3 */
   1697            while (!(STLOAD & LDRDY));
   1698            
   1699            while (1) //just in case we wake up for some unknown reason
   1700            {
   1701              PCON = halSleepPconValue; //execution is suppose to halt with this command. Interrupts are disabled, so the only way to exit this state is using a hardware reset.
   1702              asm("NOP");
   1703            }
   1704          #endif
   1705          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysCommandProcessing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysReset::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysPing::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysPing

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysVersion::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysVersion

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGetExtAddr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetExtAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVItemInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVItemInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalNVLength::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalNVLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalStartTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStartTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalStopTimer::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalStopTimer

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysRandom::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysRandom

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysAdcRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysAdcRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGpio::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGpio

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysStackTune::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysStackTune

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetUtcTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetUtcTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysGetUtcTime::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysGetUtcTime

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysSetTxPower::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysSetTxPower

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysResetInd::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysResetInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??MT_SysOsalTimerExpired::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_SysOsalTimerExpired

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??powerOffSoc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    powerOffSoc
   1706          
   1707          /***************************************************************************************************
   1708           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     21   MT_SysAdcRead
        0     12   -> HalAdcRead
        0     12   -> MT_BuildAndSendZToolResponse
      0      9   MT_SysCommandProcessing
        0      9   -> MT_SysAdcRead
        0      9   -> MT_SysGetExtAddr
        0      9   -> MT_SysGetUtcTime
        0      9   -> MT_SysGpio
        0      9   -> MT_SysOsalNVDelete
        0      9   -> MT_SysOsalNVItemInit
        0      9   -> MT_SysOsalNVLength
        0      9   -> MT_SysOsalNVRead
        0      9   -> MT_SysOsalNVWrite
        0      9   -> MT_SysOsalStartTimer
        0      9   -> MT_SysOsalStopTimer
        0      9   -> MT_SysPing
        0      9   -> MT_SysRandom
        0      9   -> MT_SysReset
        0      9   -> MT_SysSetExtAddr
        0      9   -> MT_SysSetTxPower
        0      9   -> MT_SysSetUtcTime
        0      9   -> MT_SysStackTune
        0      9   -> MT_SysVersion
      2     17   MT_SysGetExtAddr
        2      8   -> MT_BuildAndSendZToolResponse
        2      8   -> ZMacGetReq
      1     32   MT_SysGetUtcTime
        0     19   -> MT_BuildAndSendZToolResponse
        0     23   -> osal_ConvertUTCTime
        0     23   -> osal_buffer_uint32
        0     19   -> osal_getClock
        0     19   -> osal_mem_alloc
        0     19   -> osal_mem_free
      2     10   MT_SysGpio
        2      1   -> MT_BuildAndSendZToolResponse
      1     19   MT_SysOsalNVDelete
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> osal_nv_delete
      1     28   MT_SysOsalNVItemInit
        0     15   -> MT_BuildAndSendZToolResponse
        0     17   -> osal_nv_item_init
        0     19   -> osal_nv_write
      1     21   MT_SysOsalNVLength
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> osal_nv_item_len
      1     35   MT_SysOsalNVRead
        0     22   -> MT_BuildAndSendZToolResponse
        0     22   -> osal_mem_alloc
        0     22   -> osal_mem_free
        0     22   -> osal_memset
        0     22   -> osal_nv_item_len
        0     26   -> osal_nv_read
      1     32   MT_SysOsalNVWrite
        0     19   -> MT_BuildAndSendZToolResponse
        0     19   -> ZMacSetReq
        0     19   -> osal_nv_item_len
        0     23   -> osal_nv_write
        0     21   -> zgSetItem
      1     26   MT_SysOsalStartTimer
        0     13   -> MT_BuildAndSendZToolResponse
        0     17   -> osal_start_timerEx
      1     19   MT_SysOsalStopTimer
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> osal_stop_timerEx
      1     10   MT_SysOsalTimerExpired
        0     10   -> MT_BuildAndSendZToolResponse
      2     11   MT_SysPing
        2      2   -> MT_BuildAndSendZToolResponse
      1     21   MT_SysRandom
        0     12   -> MT_BuildAndSendZToolResponse
        0     12   -> Onboard_rand
      2      9   MT_SysReset
        2      0   -> Onboard_soft_reset
      1     20   MT_SysResetInd
        0     17   -> MT_BuildAndSendZToolResponse
        0     20   -> osal_memcpy
      1     24   MT_SysSetExtAddr
        0     11   -> MT_BuildAndSendZToolResponse
        0     11   -> ZMacSetReq
        0     15   -> osal_nv_write
      3     11   MT_SysSetTxPower
        2      2   -> MAC_MlmeSetReq
        2      2   -> MT_BuildAndSendZToolResponse
        2      2   -> macRadioSetTxPower
      1     33   MT_SysSetUtcTime
        0     24   -> MT_BuildAndSendZToolResponse
        0     24   -> osal_ConvertUTCSecs
        0     24   -> osal_build_uint16
        0     24   -> osal_build_uint32
        0     24   -> osal_setClock
      1     19   MT_SysStackTune
        0     10   -> MT_BuildAndSendZToolResponse
        0     10   -> ZMacGetReq
        0     10   -> ZMacSetReq
      2      9   MT_SysVersion
        2      0   -> MT_BuildAndSendZToolResponse
      0      0   powerOffSoc


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       9  ??Subroutine20_0
       2  ??Subroutine21_0
       8  ??Subroutine22_0
       5  ??Subroutine23_0
       8  ??Subroutine24_0
       8  ??Subroutine25_0
       3  ??Subroutine26_0
       7  ??Subroutine27_0
       8  ??Subroutine28_0
       8  ?Subroutine0
       7  ?Subroutine1
       8  ?Subroutine10
      10  ?Subroutine11
       1  ?Subroutine12
       7  ?Subroutine13
      16  ?Subroutine14
       6  ?Subroutine15
       4  ?Subroutine16
      11  ?Subroutine17
       7  ?Subroutine18
       9  ?Subroutine19
       7  ?Subroutine2
       8  ?Subroutine3
      28  ?Subroutine4
      17  ?Subroutine5
      12  ?Subroutine6
      13  ?Subroutine7
       1  ?Subroutine8
      17  ?Subroutine9
      89  MT_SysAdcRead
       6  MT_SysAdcRead::?relay
     182  MT_SysCommandProcessing
       6  MT_SysCommandProcessing::?relay
      36  MT_SysGetExtAddr
       6  MT_SysGetExtAddr::?relay
     179  MT_SysGetUtcTime
       6  MT_SysGetUtcTime::?relay
      36  MT_SysGpio
       6  MT_SysGpio::?relay
       8  MT_SysOsalEventId
      60  MT_SysOsalNVDelete
       6  MT_SysOsalNVDelete::?relay
     205  MT_SysOsalNVItemInit
       6  MT_SysOsalNVItemInit::?relay
      54  MT_SysOsalNVLength
       6  MT_SysOsalNVLength::?relay
     379  MT_SysOsalNVRead
       6  MT_SysOsalNVRead::?relay
     267  MT_SysOsalNVWrite
       6  MT_SysOsalNVWrite::?relay
      97  MT_SysOsalStartTimer
       6  MT_SysOsalStartTimer::?relay
      61  MT_SysOsalStopTimer
       6  MT_SysOsalStopTimer::?relay
      20  MT_SysOsalTimerExpired
       6  MT_SysOsalTimerExpired::?relay
      32  MT_SysPing
       6  MT_SysPing::?relay
      33  MT_SysRandom
       6  MT_SysRandom::?relay
      37  MT_SysReset
       6  MT_SysReset::?relay
      84  MT_SysResetInd
       6  MT_SysResetInd::?relay
      92  MT_SysSetExtAddr
       6  MT_SysSetExtAddr::?relay
      56  MT_SysSetTxPower
       6  MT_SysSetTxPower::?relay
     404  MT_SysSetUtcTime
       6  MT_SysSetUtcTime::?relay
      99  MT_SysStackTune
       6  MT_SysStackTune::?relay
      20  MT_SysVersion
       6  MT_SysVersion::?relay
       1  SLEEPSTA
       1  WDCTL
       1  _A_IEN0
       3  powerOffSoc
       6  powerOffSoc::?relay

 
 2 780 bytes in segment BANKED_CODE
   138 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
    10 bytes in segment XDATA_ROM_C
 
 2 918 bytes of CODE  memory
    10 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)

Errors: none
Warnings: none
