###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                29/Jul/2016  15:40:41
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Components\stack\nwk\nwk_globals.c
#    Command line       =  
#        -f "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x1235
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=2000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Components\stack\nwk\nwk_globals.c" -D NWK_AUTO_POLL -D ZTOOL_P1
#        -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D
#        xPOWER_SAVING -D MAKE_CRC_SHDW -lC "C:\Users\8470p\Desktop\Z-Stack
#        Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\List\"
#        -lA "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\List\"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\8470p\Desktop\Z-Stack Mesh
#        1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\Obj\"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\List\nwk_globals.lst
#    Object file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB-SBL\Obj\nwk_globals.r51
#
###############################################################################

C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2014-05-17 12:12:11 -0700 (Sat, 17 May 2014) $
      4            Revision:       $Revision: 38578 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "AddrMgr.h"
     47          #include "AssocList.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "nwk_globals.h"
     51          #include "APS.h"
     52          #include "ssp.h"
     53          #include "rtg.h"
     54          #include "ZDConfig.h"
     55          #include "ZGlobals.h"
     56          #include "ZDApp.h"
     57          #include "app_config.h"
     58          #include "debug.h"
     59          #if defined ( LCD_SUPPORTED )
     60            #include "OnBoard.h"
     61          #endif
     62          
     63          /* HAL */
     64          #include "hal_lcd.h"
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * CONSTANTS
     72           */
     73          // Maximums for the data buffer queue
     74          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     75          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     76          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     77          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     78          
     79          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     80          // A known shortcoming is that when a message is enqueued as "hold" for a
     81          // sleeping device, the timer tick may have counted down to 1, so that msg
     82          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     83          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     84          // So the hold time will vary within this interval:
     85          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     86          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     87          #define NWK_INDIRECT_CNT_RTG_TMR    1
     88          // To hold msg for sleeping end devices for 30 secs:
     89          // #define CNT_RTG_TIMER            1
     90          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     91          // To hold msg for sleeping end devices for 30 mins:
     92          // #define CNT_RTG_TIMER            60
     93          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     94          // To hold msg for sleeping end devices for 30 days:
     95          // #define CNT_RTG_TIMER            60
     96          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     97          // Maximum msgs to hold per associated device.
     98          #define NWK_INDIRECT_MSG_MAX_PER    3
     99          // Maximum total msgs to hold for all associated devices.
    100          #define NWK_INDIRECT_MSG_MAX_ALL    \
    101                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    102          
    103          /*********************************************************************
    104           * TYPEDEFS
    105           */
    106          
    107          /*********************************************************************
    108           * NWK GLOBAL VARIABLES
    109           */
    110          
    111          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    112          CONST deviceTableIndex_t gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   15           DB 21
    113          
    114          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    115          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    116          
    117          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    118          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    120          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    121          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    122          

   \                                 In  segment CODE_C, align 1
    123          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    124          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    125          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    126          
    127          // change this if using a different stack profile...
    128          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    130          
    131          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132            uint8 CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133            uint8 CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    135            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    136            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    137          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    138            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    139            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    140          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    141            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    142            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    143          #endif // STACK_PROFILE_ID
    144          
    145          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    146          uint8 gMIN_TREE_LQI = MIN_LQI_COST_3;
   \                     gMIN_TREE_LQI:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LQI>`
   \   000001                REQUIRE __INIT_XDATA_I
    147          
    148          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 462
   \   0001CE                REQUIRE __INIT_XDATA_Z
    150          
    151          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )

   \                                 In  segment CODE_C, align 1
    152            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = NWK_MIN_ROUTER_CHILDREN;
   \                     gNWK_MIN_ROUTER_CHILDREN:
   \   000000   0000         DW 0

   \                                 In  segment CODE_C, align 1
    153            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = NWK_MIN_ENDDEVICE_CHILDREN;
   \                     gNWK_MIN_ENDDEVICE_CHILDREN:
   \   000000   0000         DW 0
    154          #else
    155            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = 0;
    156            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = 0;
    157          #endif
    158          

   \                                 In  segment CODE_C, align 1
    159          CONFIG_ITEM rtgTableIndex_t gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   28           DB 40

   \                                 In  segment CODE_C, align 1
    160          CONFIG_ITEM srcRtgTableIndex_t gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C           DB 12

   \                                 In  segment CODE_C, align 1
    161          CONFIG_ITEM rreqTableIndex_t gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    162          

   \                                 In  segment CODE_C, align 1
    163          CONFIG_ITEM neighborTableIndex_t gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   04           DB 4
    164          
    165           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 92
   \   00005C                REQUIRE __INIT_XDATA_Z
    167          

   \                                 In  segment CODE_C, align 1
    168          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    169          

   \                                 In  segment CODE_C, align 1
    170          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    171          

   \                                 In  segment CODE_C, align 1
    172          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    173          

   \                                 In  segment CODE_C, align 1
    174          CONST uint8 gGOOD_LINK_COST = GOOD_LINK_COST;
   \                     gGOOD_LINK_COST:
   \   000000   03           DB 3
    175          

   \                                 In  segment CODE_C, align 1
    176          CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
   \                     gMAX_PASSIVE_ACK_CNT:
   \   000000   08           DB 8
    177          
    178          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    180          
    181          #if defined ( ZIGBEE_SOURCE_ROUTING ) || defined ( ZBIT )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
   \                     rtgSrcRelayList:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
    184          #endif
    185          
    186          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    188          
    189          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    191          
    192          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    195          

   \                                 In  segment CODE_C, align 1
    196          CONFIG_ITEM bcastTableIndex_t gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    197          
    198          // For tree addressing, this switch allows the allocation of a
    199          // router address to an end device when end device address are
    200          // all used up.  If this option is enabled, address space
    201          // could be limited.

   \                                 In  segment CODE_C, align 1
    202          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    203          
    204          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING ) || defined ( ZBIT )
    205          // number of link status periods after the last received address conflict report
    206          // (network status command)

   \                                 In  segment CODE_C, align 1
    207          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
   \                     gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
   \   000000   04           DB 4
    208          #endif
    209          
    210          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZBIT )
    211          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
    212          #endif
    213          
    214          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    215          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   E803         DW 1000
    216          
    217          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    218          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    219          
    220          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    221          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    222          
    223          // Network message radius

   \                                 In  segment CODE_C, align 1
    224          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    225          
    226          #if ( ZSTACK_ROUTER_BUILD ) || defined ( ZBIT )
    227          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
    228          #endif
    229          
    230          // Maximum number of devices either aged out or not recognized as child

   \                                 In  segment CODE_C, align 1
    231          CONST uint8 gMAX_NOT_MYCHILD_DEVICES = MAX_NOT_MYCHILD_DEVICES;
   \                     gMAX_NOT_MYCHILD_DEVICES:
   \   000000   05           DB 5
    232          
    233          // Child table Management timeout values

   \                                 In  segment CODE_C, align 1
    234          CONST uint16 gKEEPALIVE_TIMEOUT_MAX = KEEPALIVE_TIMEOUT_MAX;
   \                     gKEEPALIVE_TIMEOUT_MAX:
   \   000000   3C00         DW 60

   \                                 In  segment CODE_C, align 1
    235          CONST uint16 gTIMEOUT_COUNTER_MAX = TIMEOUT_COUNTER_MAX;
   \                     gTIMEOUT_COUNTER_MAX:
   \   000000   3C00         DW 60
    236          
    237          // This table stores devices that have been aged out by the Child Aging Table
    238          // mechanism or have never been a child of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    239          nwkNotMyChild_t notMyChildList[MAX_NOT_MYCHILD_DEVICES];
   \                     notMyChildList:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    240          

   \                                 In  segment CODE_C, align 1
    241          CONST uint32 gMAX_NWK_FRAMECOUNTER_CHANGES = MAX_NWK_FRAMECOUNTER_CHANGES;
   \                     gMAX_NWK_FRAMECOUNTER_CHANGES:
   \   000000   E8030000     DD 1000
    242          
    243          #if defined ( FEATURE_MNP )
    244            uint8 gMAX_MNP_QUEUED = MAX_MNP_QUEUED;
    245          #endif
    246          
    247          /*********************************************************************
    248           * APS GLOBAL VARIABLES
    249           */
    250          
    251          // The Maximum number of binding records
    252          // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    253          CONFIG_ITEM bindTableIndex_t gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   04           DB 4
    254          
    255          #if defined ( REFLECTOR )
    256            // The Maximum number of cluster IDs in a binding record
    257            // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    258            CONFIG_ITEM uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    259          

   \                                 In  segment CODE_C, align 1
    260            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    261          
    262            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    263            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    264          #endif
    265          
    266          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    267          CONFIG_ITEM uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    268          
    269          // APS End Device Broadcast Table
    270          #if ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    271            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
   \                     apsEndDeviceBroadcastTable:
   \   000000                DS 90
   \   00005A                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    272            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
   \                     gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`
   \   000001                REQUIRE __INIT_XDATA_I
    273          #endif
    274          
    275          /*********************************************************************
    276           * SECURITY GLOBAL VARIABLES
    277           */
    278          
    279          // This is the default pre-configured key,
    280          // change this to make a unique key
    281          // SEC_KEY_LEN is defined in ssp.h.
    282          
    283          #if defined ( DEFAULT_KEY )

   \                                 In  segment CODE_C, align 1
    284          CONFIG_ITEM uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   05           DB 5
   \   000003   07           DB 7
   \   000004   09           DB 9
   \   000005   0B           DB 11
   \   000006   0D           DB 13
   \   000007   0F           DB 15
   \   000008   00           DB 0
   \   000009   02           DB 2
   \   00000A   04           DB 4
   \   00000B   06           DB 6
   \   00000C   08           DB 8
   \   00000D   0A           DB 10
   \   00000E   0C           DB 12
   \   00000F   0D           DB 13
    285          #else
    286          CONST uint8 defaultKey[SEC_KEY_LEN] =
    287          {
    288          #if defined ( APP_TP ) || defined ( APP_TP2 )
    289            // Key for ZigBee Conformance Testing
    290            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    291            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    292          #else
    293            // Key for In-House Testing
    294            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    295            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    296          #endif
    297          };
    298          #endif
    299          
    300          // This is the default pre-configured Trust Center Link key,
    301          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    302          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] = DEFAULT_TC_LINK_KEY;
   \                     defaultTCLinkKey:
   \   000000   5A           DB 90
   \   000001   69           DB 105
   \   000002   67           DB 103
   \   000003   42           DB 66
   \   000004   65           DB 101
   \   000005   65           DB 101
   \   000006   41           DB 65
   \   000007   6C           DB 108
   \   000008   6C           DB 108
   \   000009   69           DB 105
   \   00000A   61           DB 97
   \   00000B   6E           DB 110
   \   00000C   63           DB 99
   \   00000D   65           DB 101
   \   00000E   30           DB 48
   \   00000F   39           DB 57
    303          
    304          /*********************************************************************
    305           * STATUS STRINGS
    306           */
    307          #if defined ( LCD_SUPPORTED) || defined (DEBUG_UART)

   \                                 In  segment XDATA_ROM_C, align 1
    308            const char PingStr[]         = "Ping Rcvd from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Rcvd from"
   \            20526376
   \            64206672
   \            6F6D00  

   \                                 In  segment XDATA_ROM_C, align 1
    309            const char AssocCnfStr[]     = "Assoc Cnf";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Cnf"
   \            6320436E
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
    310            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    311            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    312            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    313            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    314            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    315            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    316            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    317            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    318            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    319            const char AssocRspFailStr[] = "Assoc Rsp fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Rsp fail"
   \            63205273
   \            70206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    320            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    321            const char AssocCnfFailStr[] = "Assoc Cnf fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Cnf fail"
   \            6320436E
   \            66206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    322            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    323            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    324          #endif
    325          
    326          /*********************************************************************
    327           * @fn       nwk_globals_init()
    328           *
    329           * @brief
    330           *
    331           *   Initialize nwk layer globals.  These are the system defaults and
    332           *   should be changed by the user here.  The default definitions are
    333           *   defined in nwk.h or NLMEDE.h.
    334           *
    335           * @param   none
    336           *
    337           * @return  none
    338           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    339          void nwk_globals_init( void )
   \                     nwk_globals_init:
    340          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    341            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   `??AddrMgrInit::?relay`; Banked call to: AddrMgrInit
    342          
    343          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    344            if ( ZSTACK_ROUTER_BUILD )
    345            {
    346              // Initialize the Cskip Table
    347              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    348              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    349            }
    350          #endif
    351          
    352            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    353            // to 0 (compiler flag).
    354            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
    355            {
    356              NLME_InitLinkStatus();
    357            }
    358          
    359          #if defined ( ZIGBEE_FREQ_AGILITY )
    360            NwkFreqAgilityInit();
    361          #endif
    362          
    363          #if defined ( ZIGBEE_CHILD_AGING )
    364            if ( ( ZSTACK_ROUTER_BUILD ) && ( zgChildAgingEnable == TRUE ) )
    365            {
    366              // Set the function pointers for the Child Aging feature
    367              NwkInitChildAging();
    368            }
    369          #endif  // ZIGBEE_CHILD_AGING
    370          }
   \   00000B                REQUIRE ?Subroutine0
   \   00000B                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    371          
    372          /*********************************************************************
    373           * @fn       NIB_init()
    374           *
    375           * @brief
    376           *
    377           *   Initialize attribute values in NIB
    378           *
    379           * @param   none
    380           *
    381           * @return  none
    382           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    383          void NIB_init()
   \                     NIB_init:
    384          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    385            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000004                ; Setup parameters for call to function osal_rand
   \   000004   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000007   EA           MOV     A,R2
   \   000008   90....       MOV     DPTR,#_NIB
   \   00000B   F0           MOVX    @DPTR,A
    386          
    387            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000C   90....       MOV     DPTR,#_NIB + 17
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    388            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000012   90....       MOV     DPTR,#_NIB + 4
   \   000015   7414         MOV     A,#0x14
   \   000017   F0           MOVX    @DPTR,A
    389          
    390          #if ( NWK_MODE == NWK_MODE_MESH )
    391            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000018   90....       MOV     DPTR,#_NIB + 40
   \   00001B   740F         MOV     A,#0xf
   \   00001D   F0           MOVX    @DPTR,A
    392            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
    393          #endif
    394          
    395            // BROADCAST SETTINGS:
    396            // *******************
    397            //   Broadcast Delivery Time
    398            //     - set to multiples of 100ms
    399            //     - should be 500ms more than the retry time
    400            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    401            //   Passive Ack Timeout
    402            //     - set to multiples of 100ms
    403            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000020   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000023   E0           MOVX    A,@DPTR
   \   000024   90....       MOV     DPTR,#_NIB + 7
   \   000027   F0           MOVX    @DPTR,A
    404            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000028   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   90....       MOV     DPTR,#_NIB + 1
   \   00002F   F0           MOVX    @DPTR,A
    405            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000030   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000033   E0           MOVX    A,@DPTR
   \   000034   90....       MOV     DPTR,#_NIB + 2
   \   000037   F0           MOVX    @DPTR,A
    406          
    407            _NIB.ReportConstantCost = 0;
   \   000038   90....       MOV     DPTR,#_NIB + 8
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
    408            _NIB.RouteDiscRetries = 0;
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
    409            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   00003F   90....       MOV     DPTR,#_NIB + 11
   \   000042   04           INC     A
   \   000043   F0           MOVX    @DPTR,A
    410            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000044   90....       MOV     DPTR,#_NIB + 104
   \   000047   F0           MOVX    @DPTR,A
    411          
    412            if ( ZG_SECURE_ENABLED )
    413            {
    414              _NIB.SecurityLevel = SECURITY_LEVEL;
   \   000048   90....       MOV     DPTR,#_NIB + 12
   \   00004B   7405         MOV     A,#0x5
   \   00004D   F0           MOVX    @DPTR,A
    415            }
    416            else
    417            {
    418              _NIB.SecurityLevel = 0;
    419            }
    420          
    421            _NIB.SymLink = TRUE;
   \   00004E   A3           INC     DPTR
   \   00004F   7401         MOV     A,#0x1
   \   000051   F0           MOVX    @DPTR,A
    422          
    423            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000052   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000055   E0           MOVX    A,@DPTR
   \   000056   90....       MOV     DPTR,#_NIB + 14
   \   000059   F0           MOVX    @DPTR,A
    424          
    425            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   00005A   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   90....       MOV     DPTR,#_NIB + 15
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   E4           CLR     A
   \   000064   F0           MOVX    @DPTR,A
    426          
    427            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   000065   90....       MOV     DPTR,#zgRouteDiscoveryTime
   \   000068   E0           MOVX    A,@DPTR
   \   000069   90....       MOV     DPTR,#_NIB + 18
   \   00006C   F0           MOVX    @DPTR,A
    428            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   00006D   90....       MOV     DPTR,#zgRouteExpiryTime
   \   000070   E0           MOVX    A,@DPTR
   \   000071   90....       MOV     DPTR,#_NIB + 19
   \   000074   12....       LCALL   ?Subroutine1 & 0xFFFF
    429          
    430            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
    431            _NIB.nwkLogicalChannel = 0;
   \                     ??CrossCallReturnLabel_0:
   \   000077   A3           INC     DPTR
   \   000078   E4           CLR     A
   \   000079   12....       LCALL   ?Subroutine1 & 0xFFFF
    432            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
    433            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   00007C                ; Setup parameters for call to function osal_memset
   \   00007C   7C08         MOV     R4,#0x8
   \   00007E   7D00         MOV     R5,#0x0
   \   000080   7900         MOV     R1,#0x0
   \   000082   7A..         MOV     R2,#(_NIB + 25) & 0xff
   \   000084   7B..         MOV     R3,#((_NIB + 25) >> 8) & 0xff
   \   000086   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    434            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   000089   90....       MOV     DPTR,#_NIB + 33
   \   00008C   74FE         MOV     A,#-0x2
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   04           INC     A
   \   000091   F0           MOVX    @DPTR,A
    435          
    436            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   000092                ; Setup parameters for call to function sAddrExtCpy
   \   000092   7C..         MOV     R4,#zgExtendedPANID & 0xff
   \   000094   7D..         MOV     R5,#(zgExtendedPANID >> 8) & 0xff
   \   000096   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   000098   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   00009A   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
    437          
    438            _NIB.nwkKeyLoaded = FALSE;
   \   00009D   90....       MOV     DPTR,#_NIB + 61
   \   0000A0   E4           CLR     A
   \   0000A1   F0           MOVX    @DPTR,A
    439          
    440          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    441            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
   \   0000A2   90....       MOV     DPTR,#_NIB + 96
   \   0000A5   7402         MOV     A,#0x2
   \   0000A7   F0           MOVX    @DPTR,A
    442            _NIB.nwkUniqueAddr = FALSE;
   \   0000A8   A3           INC     DPTR
   \   0000A9   E4           CLR     A
   \   0000AA   F0           MOVX    @DPTR,A
    443          #else
    444            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
    445            _NIB.nwkUniqueAddr = TRUE;
    446          #endif
    447          
    448            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000AB   A3           INC     DPTR
   \   0000AC   740F         MOV     A,#0xf
   \   0000AE   F0           MOVX    @DPTR,A
    449            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000AF   A3           INC     DPTR
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   F0           MOVX    @DPTR,A
    450          
    451            //MTO and source routing
    452            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000B3   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   90....       MOV     DPTR,#_NIB + 102
   \   0000BA   F0           MOVX    @DPTR,A
    453            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000BB   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   90....       MOV     DPTR,#_NIB + 101
   \   0000C2   F0           MOVX    @DPTR,A
    454            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000C3   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   90....       MOV     DPTR,#_NIB + 103
   \   0000CA   F0           MOVX    @DPTR,A
    455          
    456          #if defined ( ZIGBEE_MULTICAST )
    457            _NIB.nwkUseMultiCast = MULTICAST_ENABLED;
   \   0000CB   90....       MOV     DPTR,#_NIB + 100
   \   0000CE   7401         MOV     A,#0x1
   \   0000D0   F0           MOVX    @DPTR,A
    458          #else
    459            _NIB.nwkUseMultiCast = FALSE;
    460          #endif
    461          
    462          #if defined ( NV_RESTORE )
    463            if ( osal_nv_read( ZCD_NV_NWKMGR_ADDR, 0, sizeof( _NIB.nwkManagerAddr ),
    464                               &_NIB.nwkManagerAddr ) != SUCCESS )
    465          #endif
    466            {
    467              _NIB.nwkManagerAddr = 0x0000;
   \   0000D1   90....       MOV     DPTR,#_NIB + 105
   \   0000D4   E4           CLR     A
   \   0000D5   F0           MOVX    @DPTR,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   F0           MOVX    @DPTR,A
    468            }
    469          
    470            _NIB.nwkUpdateId = 0;
   \   0000D8   90....       MOV     DPTR,#_NIB + 109
   \   0000DB   F0           MOVX    @DPTR,A
    471            _NIB.nwkTotalTransmissions = 0;
   \   0000DC   90....       MOV     DPTR,#_NIB + 107
   \   0000DF   F0           MOVX    @DPTR,A
   \   0000E0   A3           INC     DPTR
   \   0000E1   F0           MOVX    @DPTR,A
    472          
    473            if ( ZSTACK_ROUTER_BUILD )
    474            {
    475          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    476              NLME_InitStochasticAddressing();
    477          #else
    478              NLME_InitTreeAddressing();
    479          #endif
    480            }
    481          }
   \   0000E2   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   74FE         MOV     A,#-0x2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   04           INC     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    482          
    483          /*********************************************************************
    484           * @fn       nwk_Status()
    485           *
    486           * @brief
    487           *
    488           *   Status report.
    489           *
    490           * @param   statusCode
    491           * @param   statusValue
    492           *
    493           * @return  none
    494           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    496          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V2,R4
   \   000007   8D..         MOV     ?V3,R5
    497          #if defined ( LCD_SUPPORTED )
    498            switch ( statusCode )
   \   000009   8A..         MOV     ?V0,R2
   \   00000B   8B..         MOV     ?V1,R3
   \   00000D   78..         MOV     R0,#?V0
   \   00000F   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   000012   0000         DW        0
   \   000014   0500         DW        5
   \   000016   0200         DW        2
   \   000018   ....         DW        ??nwk_Status_0
   \   00001A   0300         DW        3
   \   00001C   ....         DW        ??nwk_Status_1
   \   00001E   0400         DW        4
   \   000020   ....         DW        ??nwk_Status_2
   \   000022   0310         DW        4099
   \   000024   ....         DW        ??nwk_Status_3
   \   000026   0410         DW        4100
   \   000028   ....         DW        ??nwk_Status_4
   \   00002A   ....         DW        ??nwk_Status_5
    499            {
    500              case NWK_STATUS_COORD_ADDR:
    501                if ( ZSTACK_ROUTER_BUILD )
    502                {
    503                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
    504                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
    505                  BuzzerControl( BUZZER_BLIP );
    506                }
    507                break;
    508          
    509              case NWK_STATUS_ROUTER_ADDR:
    510                if ( ZSTACK_ROUTER_BUILD )
    511                {
    512                  HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
    513                }
    514                break;
    515          
    516              case NWK_STATUS_ORPHAN_RSP:
    517                if ( ZSTACK_ROUTER_BUILD )
    518                {
    519                  if ( statusValue == ZSuccess )
    520                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
    521                  else
    522                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
    523                }
    524                break;
    525          
    526              case NWK_ERROR_ASSOC_RSP:
    527                if ( ZSTACK_ROUTER_BUILD )
    528                {
    529                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
    530                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    531                }
    532                break;
    533          
    534              case NWK_STATUS_ED_ADDR:
    535                if ( ZSTACK_END_DEVICE_BUILD )
    536                {
    537                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_1:
   \   00002C                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00002C   75..01       MOV     ?V0,#0x1
   \   00002F   78..         MOV     R0,#?V0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000034   7910         MOV     R1,#0x10
   \   000036   7A..         MOV     R2,#EndDeviceStr & 0xff
   \   000038   7B..         MOV     R3,#(EndDeviceStr >> 8) & 0xff
   \   00003A   800E         SJMP    ??nwk_Status_6
    538                }
    539                break;
    540          
    541              case NWK_STATUS_PARENT_ADDR:
    542                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
   \                     ??nwk_Status_2:
   \   00003C                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00003C   75..02       MOV     ?V0,#0x2
   \   00003F   78..         MOV     R0,#?V0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   7910         MOV     R1,#0x10
   \   000046   7A..         MOV     R2,#ParentStr & 0xff
   \   000048   7B..         MOV     R3,#(ParentStr >> 8) & 0xff
   \                     ??nwk_Status_6:
   \   00004A   12....       LCALL   `??HalLcdWriteStringValue::?relay`; Banked call to: HalLcdWriteStringValue
   \   00004D   8027         SJMP    ??nwk_Status_7
    543                break;
    544          
    545              case NWK_STATUS_ASSOC_CNF:
    546                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
   \                     ??nwk_Status_0:
   \   00004F                ; Setup parameters for call to function HalLcdWriteScreen
   \   00004F   7C..         MOV     R4,#SuccessStr & 0xff
   \   000051   7D..         MOV     R5,#(SuccessStr >> 8) & 0xff
   \   000053   7A..         MOV     R2,#AssocCnfStr & 0xff
   \   000055   7B..         MOV     R3,#(AssocCnfStr >> 8) & 0xff
   \   000057   802C         SJMP    ??nwk_Status_8
    547                break;
    548          
    549              case NWK_ERROR_ASSOC_CNF_DENIED:
    550                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_3:
   \   000059                ; Setup parameters for call to function HalLcdWriteString
   \   000059   7901         MOV     R1,#0x1
   \   00005B   7A..         MOV     R2,#AssocCnfFailStr & 0xff
   \   00005D   7B..         MOV     R3,#(AssocCnfFailStr >> 8) & 0xff
   \   00005F   12....       LCALL   `??HalLcdWriteString::?relay`; Banked call to: HalLcdWriteString
    551                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
   \   000062                ; Setup parameters for call to function HalLcdWriteValue
   \   000062   75..02       MOV     ?V0,#0x2
   \   000065   78..         MOV     R0,#?V0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   7910         MOV     R1,#0x10
   \   00006C   AA..         MOV     R2,?V2
   \   00006E   AB..         MOV     R3,?V3
   \   000070   E4           CLR     A
   \   000071   FC           MOV     R4,A
   \   000072   FD           MOV     R5,A
   \   000073   12....       LCALL   `??HalLcdWriteValue::?relay`; Banked call to: HalLcdWriteValue
   \                     ??nwk_Status_7:
   \   000076   7401         MOV     A,#0x1
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
    552                break;
   \   00007B   800B         SJMP    ??nwk_Status_5
    553          
    554              case NWK_ERROR_ENERGY_SCAN_FAILED:
    555                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
   \                     ??nwk_Status_4:
   \   00007D                ; Setup parameters for call to function HalLcdWriteScreen
   \   00007D   7C..         MOV     R4,#ScanFailedStr & 0xff
   \   00007F   7D..         MOV     R5,#(ScanFailedStr >> 8) & 0xff
   \   000081   7A..         MOV     R2,#EnergyLevelStr & 0xff
   \   000083   7B..         MOV     R3,#(EnergyLevelStr >> 8) & 0xff
   \                     ??nwk_Status_8:
   \   000085   12....       LCALL   `??HalLcdWriteScreen::?relay`; Banked call to: HalLcdWriteScreen
    556                break;
    557            }
    558          #endif
    559            
    560          
    561          }
   \                     ??nwk_Status_5:
   \   000088   7F04         MOV     R7,#0x4
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA
    562          
    563          /*********************************************************************
    564           * @fn      nwk_adjustDelay()
    565           *
    566           * @brief   Adjust the retransmit delay. Modify this function to
    567           *          change the default delay behavior.
    568           *
    569           * @param   existingDelay - default delay
    570           * @param   confirmStatus - data confirm status
    571           * @param   bufOptions - network buffer options
    572           *
    573           * @return  delay value - this number is the number of
    574           *          network event ticks (~2ms).
    575           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    576          uint16 nwk_adjustDelay( uint16 existingDelay, uint8 confirmStatus, uint16 bufOptions )
   \                     nwk_adjustDelay:
    577          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    578            uint16 result = existingDelay;
   \   000007   EA           MOV     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   F9           MOV     R1,A
    579            uint16 mask = 0;       // Random mask
    580            uint16 startValue = 0; // Start value
    581          
    582            switch ( confirmStatus )
   \   00000B   EE           MOV     A,R6
   \   00000C   241F         ADD     A,#0x1f
   \   00000E   6004         JZ      ??nwk_adjustDelay_0
   \   000010   24F0         ADD     A,#-0x10
   \   000012   7013         JNZ     ??nwk_adjustDelay_1
    583            {
    584              case ZMacTransactionOverFlow:
    585              case ZMacChannelAccessFailure:
    586                if ( bufOptions & (HANDLE_DELAY | HANDLE_HI_DELAY) )
   \                     ??nwk_adjustDelay_0:
   \   000014   EC           MOV     A,R4
   \   000015   5430         ANL     A,#0x30
   \   000017   600E         JZ      ??nwk_adjustDelay_1
    587                {
    588                  // Delay 4 - 18 ms
    589                  mask = 0x0007;
    590                  startValue = 2;
    591                }
    592                break;
    593          
    594              case ZNwkNoRoute:
    595              case ZMAC_NO_RESOURCES:
    596              case ZMacNoACK:
    597              default:
    598                // leave default delay
    599                mask = 0;
    600                startValue = 0;
    601                break;
    602            }
    603          
    604            if ( (mask > 0) && (startValue > 0) )
    605            {
    606              result = (osal_rand() & mask) + startValue;
   \   000019                ; Setup parameters for call to function osal_rand
   \   000019   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   00001C   EA           MOV     A,R2
   \   00001D   5407         ANL     A,#0x7
   \   00001F   7900         MOV     R1,#0x0
   \   000021   2402         ADD     A,#0x2
   \   000023   F8           MOV     R0,A
   \   000024   5001         JNC     ??nwk_adjustDelay_1
   \   000026   09           INC     R1
    607            }
    608          
    609            return ( result );
   \                     ??nwk_adjustDelay_1:
   \   000027   E8           MOV     A,R0
   \   000028   FA           MOV     R2,A
   \   000029   E9           MOV     A,R1
   \   00002A   FB           MOV     R3,A
   \   00002B   7F02         MOV     R7,#0x2
   \   00002D   02....       LJMP    ?BANKED_LEAVE_XDATA
    610          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LQI>`:
   \   000000   06           DB 6

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST`:
   \   000000   12           DB 18

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??nwk_globals_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??NIB_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??nwk_Status::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??nwk_adjustDelay::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_adjustDelay
    611          
    612          /*********************************************************************
    613          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   NIB_init
        2      0   -> osal_memset
        2      0   -> osal_rand
        2      0   -> sAddrExtCpy
      0     13   nwk_Status
        0     12   -> HalLcdWriteScreen
        0     12   -> HalLcdWriteString
        0     13   -> HalLcdWriteStringValue
        0     13   -> HalLcdWriteValue
      0     10   nwk_adjustDelay
        0     10   -> osal_rand
      2      0   nwk_globals_init
        2      0   -> AddrMgrInit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for gAPS_MAX_ENDDEVICE_BROADCAST
       1  ?<Initializer for gMIN_TREE_LQI>
       7  ?Subroutine0
       9  ?Subroutine1
      15  AssocCnfFailStr
      10  AssocCnfStr
      10  AssocIndStr
      15  AssocRspFailStr
     462  AssociatedDevList
      56  BindingTable
       2  Cskip
       1  CskipChldrn
       1  CskipRtrs
      11  EndDeviceStr
      13  EnergyLevelStr
       7  FailedStr
     229  NIB_init
       6  NIB_init::?relay
      12  NetworkIDStr
      16  OrphanRspStr
       8  ParentStr
      15  PingStr
       8  RouterStr
      12  ScanFailedStr
       5  SentStr
       8  SuccessStr
      13  ZigbeeCoordStr
      90  apsEndDeviceBroadcastTable
      36  bcastHoldAckMask
       9  bcastHoldHandle
      72  bcastTable
      16  defaultKey
      16  defaultTCLinkKey
       1  gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
       1  gAPS_MAX_GROUPS
       2  gBIND_REC_SIZE
       1  gDEFAULT_ROUTE_REQUEST_RADIUS
       1  gDEF_NWK_RADIUS
       1  gGOOD_LINK_COST
       2  gKEEPALIVE_TIMEOUT_MAX
       1  gLINK_DOWN_TRIGGER
       1  gMAX_BCAST
       1  gMAX_BINDING_CLUSTER_IDS
       1  gMAX_BROADCAST_QUEUED
       1  gMAX_NEIGHBOR_ENTRIES
       1  gMAX_NOT_MYCHILD_DEVICES
       4  gMAX_NWK_FRAMECOUNTER_CHANGES
       1  gMAX_PASSIVE_ACK_CNT
       1  gMAX_RREQ_ENTRIES
       1  gMAX_RTG_ENTRIES
       1  gMAX_RTG_SRC_ENTRIES
       1  gMAX_SOURCE_ROUTE
       1  gMIN_TREE_LQI
       1  gMTO_ROUTE_EXPIRY_TIME
       2  gMTO_RREQ_LIMIT_TIME
       1  gNWK_CONFLICTED_ADDR_EXPIRY_TIME
       1  gNWK_INDIRECT_CNT_RTG_TMR
       1  gNWK_INDIRECT_MSG_MAX_ALL
       1  gNWK_INDIRECT_MSG_MAX_PER
       1  gNWK_MAX_BINDING_ENTRIES
       1  gNWK_MAX_DATABUFS_CONFIRMED
       1  gNWK_MAX_DATABUFS_SCHEDULED
       1  gNWK_MAX_DATABUFS_TOTAL
       1  gNWK_MAX_DATABUFS_WAITING
       1  gNWK_MAX_DEVICE_LIST
       1  gNWK_MAX_SLEEPING_END_DEVICES
       2  gNWK_MIN_ENDDEVICE_CHILDREN
       2  gNWK_MIN_ROUTER_CHILDREN
       1  gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
       2  gTIMEOUT_COUNTER_MAX
      92  neighborTable
      20  notMyChildList
     141  nwk_Status
       6  nwk_Status::?relay
      48  nwk_adjustDelay
       6  nwk_adjustDelay::?relay
      11  nwk_globals_init
       6  nwk_globals_init::?relay
      64  rtDiscTable
      24  rtgSrcRelayList
      72  rtgSrcTable
     280  rtgTable

 
   445 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
    76 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
   178 bytes in segment XDATA_ROM_C
 1 281 bytes in segment XDATA_Z
 
   547 bytes of CODE  memory
   178 bytes of CONST memory
 1 283 bytes of XDATA memory

Errors: none
Warnings: none
