###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                31/Jul/2016  23:07:12
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\stack\af\AF.c
#    Command line       =  
#        -f "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3 -DPOLL_RATE=0) -f
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x9669
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=2000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Components\stack\af\AF.c" -D xNWK_AUTO_POLL -D xZIGBEEPRO -D
#        HAL_UART=TRUE -D HAL_UART_DMA=1 -D xHAL_LED=TRUE -D xPOWER_SAVING -D
#        SHT10 -lC "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\" -lA
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\8470p\Desktop\Z-Stack Mesh
#        1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\" -e
#        --no_code_motion --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\AF.lst
#    Object file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\AF.r51
#
###############################################################################

C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\stack\af\AF.c
      1          /**************************************************************************************************
      2            Filename:       AF.c
      3            Revised:        $Date: 2014-06-30 16:29:17 -0700 (Mon, 30 Jun 2014) $
      4            Revision:       $Revision: 39295 $
      5          
      6            Description:    Application Framework - Device Description helper functions
      7          
      8          
      9            Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "nwk_globals.h"
     47          #include "nwk_util.h"
     48          #include "aps_groups.h"
     49          #include "ZDProfile.h"
     50          #include "aps_frag.h"
     51          #include "rtg.h"
     52          
     53          #if defined ( MT_AF_CB_FUNC )
     54            #include "MT_AF.h"
     55          #endif
     56          
     57          #if defined ( INTER_PAN )
     58            #include "stub_aps.h"
     59          #endif
     60          #include "debug.h"
     61          /*********************************************************************
     62           * MACROS
     63           */
     64          
     65          /*********************************************************************
     66           * @fn      afSend
     67           *
     68           * @brief   Helper macro for V1 API to invoke V2 API.
     69           *
     70           * input parameters
     71           *
     72           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
     73           * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
     74           * @param   cID - A valid cluster ID as specified by the Profile.
     75           * @param   len - Number of bytes of data pointed to by next param.
     76           * @param  *buf - A pointer to the data bytes to send.
     77           * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
     78           * @param  *transID - A pointer to a byte which can be modified and which will
     79           *                    be used as the transaction sequence number of the msg.
     80           *
     81           * output parameters
     82           *
     83           * @param  *transID - Incremented by one if the return value is success.
     84           *
     85           * @return  afStatus_t - See previous definition of afStatus_... types.
     86           */
     87          #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \
     88                  AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \
     89                                    (cID), (len), (buf), (transID), (options), (radius) )
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     95          epList_t *epList;
   \                     epList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
     96          
     97          /*********************************************************************
     98           * LOCAL FUNCTIONS
     99           */
    100          
    101          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
    102                          zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    103                          uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
    104          
    105          static epList_t *afFindEndPointDescList( uint8 EndPoint );
    106          
    107          static pDescCB afGetDescCB( endPointDesc_t *epDesc );
    108          
    109          /*********************************************************************
    110           * PUBLIC FUNCTIONS
    111           */
    112          
    113          /*********************************************************************
    114           * @fn      afInit
    115           *
    116           * @brief   Initialization function for the AF.
    117           *
    118           * @param   none
    119           *
    120           * @return  none
    121          void afInit( void )
    122          {
    123          }
    124           */
    125          
    126          /*********************************************************************
    127           * @fn      afRegisterExtended
    128           *
    129           * @brief   Register an Application's EndPoint description.
    130           *
    131           * @param   epDesc - pointer to the Application's endpoint descriptor.
    132           * @param   descFn - pointer to descriptor callback function
    133           * @param   applFn - pointer to the Application callback function
    134           *
    135           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    136           *
    137           * @return  Pointer to epList_t on success, NULL otherwise.
    138           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    139          epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
   \                     afRegisterExtended:
    140          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
    141            epList_t *ep = osal_mem_alloc(sizeof(epList_t));
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0B         MOV     R2,#0xb
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
    142          
    143            if (ep != NULL)
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   6045         JZ      ??CrossCallReturnLabel_70
    144            {
    145              ep->nextDesc = epList;
   \   000018   90....       MOV     DPTR,#epList
   \   00001B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00001E   12....       LCALL   ??Subroutine36_0 & 0xFFFF
    146              epList = ep;
   \                     ??CrossCallReturnLabel_69:
   \   000021   90....       MOV     DPTR,#epList
   \   000024   EA           MOV     A,R2
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   EB           MOV     A,R3
   \   000028   12....       LCALL   ?Subroutine22 & 0xFFFF
    147              ep->epDesc = epDesc;
   \                     ??CrossCallReturnLabel_32:
   \   00002B   EE           MOV     A,R6
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   EF           MOV     A,R7
   \   00002F   12....       LCALL   ?Subroutine21 & 0xFFFF
    148              ep->pfnDescCB = descFn;
   \                     ??CrossCallReturnLabel_30:
   \   000032   E5..         MOV     A,?V0
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   E5..         MOV     A,?V1
   \   000038   12....       LCALL   ?Subroutine21 & 0xFFFF
    149              ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \                     ??CrossCallReturnLabel_31:
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   7432         MOV     A,#0x32
   \   00003F   12....       LCALL   ?Subroutine19 & 0xFFFF
    150              ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \                     ??CrossCallReturnLabel_26:
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?Subroutine19 & 0xFFFF
    151              ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
   \                     ??CrossCallReturnLabel_27:
   \   000047   A3           INC     DPTR
   \   000048   F0           MOVX    @DPTR,A
    152              ep->pfnApplCB = applFn;
   \   000049   740C         MOV     A,#0xc
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ?Subroutine12 & 0xFFFF
    153            }
   \                     ??CrossCallReturnLabel_16:
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   12....       LCALL   ??Subroutine36_0 & 0xFFFF
    154          
    155            return ep;
   \                     ??CrossCallReturnLabel_70:
   \   00005D   02....       LJMP    ?Subroutine0 & 0xFFFF
    156          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    157          
    158          /*********************************************************************
    159           * @fn      afRegister
    160           *
    161           * @brief   Register an Application's EndPoint description.
    162           *
    163           * @param   epDesc - pointer to the Application's endpoint descriptor.
    164           *
    165           * NOTE:  The memory that epDesc is pointing to must exist after this call.
    166           *
    167           * @return  afStatus_SUCCESS - Registered
    168           *          afStatus_MEM_FAIL - not enough memory to add descriptor
    169           *          afStatus_INVALID_PARAMETER - duplicate endpoint
    170           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    171          afStatus_t afRegister( endPointDesc_t *epDesc )
   \                     afRegister:
    172          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    173            if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F9           MOV     R1,A
   \   00000F   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000012   8B..         MOV     ?V1,R3
   \   000014   EA           MOV     A,R2
   \   000015   45..         ORL     A,?V1
   \   000017   6004         JZ      ??afRegister_0
    174            {
    175              return afStatus_INVALID_PARAMETER;
   \   000019   7902         MOV     R1,#0x2
   \   00001B   8027         SJMP    ??afRegister_1
    176            }
    177          
    178            return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
   \                     ??afRegister_0:
   \   00001D                ; Setup parameters for call to function afRegisterExtended
   \   00001D   E4           CLR     A
   \   00001E   F5..         MOV     ?V0,A
   \   000020   F5..         MOV     ?V1,A
   \   000022   78..         MOV     R0,#?V0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FB           MOV     R3,A
   \   00002F   12....       LCALL   `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   8B..         MOV     ?V1,R3
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V1
   \   00003C   7004         JNZ     ??afRegister_2
   \   00003E   7910         MOV     R1,#0x10
   \   000040   8002         SJMP    ??afRegister_1
   \                     ??afRegister_2:
   \   000042   7900         MOV     R1,#0x0
   \                     ??afRegister_1:
   \   000044   02....       LJMP    ?Subroutine1 & 0xFFFF
    179          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    180          
    181          /*********************************************************************
    182           * @fn      afDelete
    183           *
    184           * @brief   Delete an Application's EndPoint descriptor and frees the memory
    185           *
    186           * @param   EndPoint - Application Endpoint to delete
    187           *
    188           * @return  afStatus_SUCCESS - endpoint deleted
    189           *          afStatus_INVALID_PARAMETER - endpoint not found
    190           *          afStatus_FAILED - endpoint list empty
    191           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    192          afStatus_t afDelete( uint8 EndPoint )
   \                     afDelete:
    193          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    194            epList_t *epCurrent;
    195            epList_t *epPrevious;
    196          
    197            if ( epList != NULL )
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   00000D   604B         JZ      ??afDelete_0
    198            {
    199              epPrevious = epCurrent = epList;
   \   00000F   90....       MOV     DPTR,#epList
   \   000012   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000015   F9           MOV     R1,A
    200          
    201              // first element of the list matches
    202              if ( epCurrent->epDesc->endPoint == EndPoint )
   \   000016   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000019   700C         JNZ     ??afDelete_1
    203              {
    204                epList = epCurrent->nextDesc;
   \   00001B   12....       LCALL   ?Subroutine15 & 0xFFFF
    205                osal_mem_free( epCurrent );
    206          
    207                return ( afStatus_SUCCESS );
    208              }
   \                     ??CrossCallReturnLabel_104:
   \   00001E   90....       MOV     DPTR,#epList
   \   000021   E8           MOV     A,R0
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E9           MOV     A,R1
   \   000025   8027         SJMP    ??afDelete_2
    209              else
    210              {
    211                // search the list
    212                for ( epCurrent = epPrevious->nextDesc;
   \                     ??afDelete_1:
   \   000027   8882         MOV     DPL,R0
   \   000029   8983         MOV     DPH,R1
   \   00002B   8008         SJMP    ??afDelete_3
    213                      epCurrent != NULL;
    214                      epCurrent = epCurrent->nextDesc )
    215                {
    216                  if ( epCurrent->epDesc->endPoint == EndPoint )
    217                  {
    218                    epPrevious->nextDesc = epCurrent->nextDesc;
    219                    osal_mem_free( epCurrent );
    220          
    221                    // delete the entry and free the memory
    222                    return ( afStatus_SUCCESS );
    223                  }
    224                  epPrevious = epCurrent;
   \                     ??afDelete_4:
   \   00002D   EA           MOV     A,R2
   \   00002E   F8           MOV     R0,A
   \   00002F   EB           MOV     A,R3
   \   000030   F9           MOV     R1,A
   \   000031   8A82         MOV     DPL,R2
   \   000033   8B83         MOV     DPH,R3
   \                     ??afDelete_3:
   \   000035   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000038   601C         JZ      ??afDelete_5
   \   00003A   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00003D   70EE         JNZ     ??afDelete_4
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000046   8882         MOV     DPL,R0
   \   000048   8983         MOV     DPH,R1
   \   00004A   EC           MOV     A,R4
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   ED           MOV     A,R5
   \                     ??afDelete_2:
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F                ; Setup parameters for call to function osal_mem_free
   \   00004F   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000052   7900         MOV     R1,#0x0
   \   000054   8006         SJMP    ??afDelete_6
    225                }
    226              }
    227          
    228              // no endpoint found
    229              return ( afStatus_INVALID_PARAMETER );
   \                     ??afDelete_5:
   \   000056   7902         MOV     R1,#0x2
   \   000058   8002         SJMP    ??afDelete_6
    230            }
    231            else
    232            {
    233              // epList is empty
    234              return ( afStatus_FAILED );
   \                     ??afDelete_0:
   \   00005A   7901         MOV     R1,#0x1
    235            }
   \                     ??afDelete_6:
   \   00005C                REQUIRE ?Subroutine2
   \   00005C                ; // Fall through to label ?Subroutine2
    236          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FC           MOV     R4,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F583         MOV     DPH,A
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6E           XRL     A,R6
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine43_0
   \   000004                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000003   22           RET
    237          
    238          /*********************************************************************
    239           * @fn          afDataConfirm
    240           *
    241           * @brief       This function will generate the Data Confirm back to
    242           *              the application.
    243           *
    244           * @param       endPoint - confirm end point
    245           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    246           * @param       status - status of APSDE_DATA_REQUEST
    247           *
    248           * @return      none
    249           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    250          void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afDataConfirm:
    251          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   8A..         MOV     ?V1,R2
   \   000009   8B..         MOV     ?V2,R3
    252            endPointDesc_t *epDesc;
    253            afDataConfirm_t *msgPtr;
    254          
    255            // Find the endpoint description
    256            epDesc = afFindEndPointDesc( endPoint );
   \   00000B                ; Setup parameters for call to function afFindEndPointDesc
   \   00000B   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00000E   8A..         MOV     ?V4,R2
   \   000010   8B..         MOV     ?V5,R3
   \   000012   AE..         MOV     R6,?V4
   \   000014   AF..         MOV     R7,?V5
    257            if ( epDesc == NULL )
   \   000016   EE           MOV     A,R6
   \   000017   4F           ORL     A,R7
   \   000018   6029         JZ      ??afDataConfirm_0
    258              return;
    259          
    260            // Determine the incoming command type
    261            msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
   \   00001A                ; Setup parameters for call to function osal_msg_allocate
   \   00001A   7A04         MOV     R2,#0x4
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
    262            if ( msgPtr )
   \   000021   EA           MOV     A,R2
   \   000022   4B           ORL     A,R3
   \   000023   601E         JZ      ??afDataConfirm_0
    263            {
    264              // Build the Data Confirm message
    265              msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   74FD         MOV     A,#-0x3
   \   00002B   F0           MOVX    @DPTR,A
    266              msgPtr->hdr.status = status;
   \   00002C   A3           INC     DPTR
   \   00002D   E5..         MOV     A,?V2
   \   00002F   12....       LCALL   ?Subroutine22 & 0xFFFF
    267              msgPtr->endpoint = endPoint;
    268              msgPtr->transID = transID;
    269          //	DBG_PRINTF_VALUE("\r\n [AF_CONFIRM] tranid:", msgPtr->transID, 16);	
    270          
    271          //	DBG_PRINTF_VALUE("\r\n [AF_CONFIRM] status:", msgPtr->hdr.status, 16);	
    272          
    273          #if defined ( MT_AF_CB_FUNC )
    274              /* If MT has subscribed for this callback, don't send as a message. */
    275              if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
    276              {
    277                /* Send callback if it's subscribed */
    278                MT_AfDataConfirm ((void *)msgPtr);
    279                /* Release the memory. */
    280                osal_msg_deallocate( (void *)msgPtr );
    281              }
    282              else
    283          #endif
    284              {
    285                /* send message through task message */
    286                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
    287          //	  DBG_PRINTF_VALUE("\r\n[taskID]: ", *(epDesc->task_id), 16);
    288          //	  DBG_PRINTF_VALUE("\r\n[af confirm]: ", status, 16);
    289          
    290              }
    291            }
   \                     ??CrossCallReturnLabel_33:
   \   000032   E5..         MOV     A,?V0
   \   000034   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000037   A3           INC     DPTR
   \   000038   E5..         MOV     A,?V1
   \   00003A   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00003D   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000040   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    292          }
   \                     ??afDataConfirm_0:
   \   000043   7F06         MOV     R7,#0x6
   \   000045   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_msg_send
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F583         MOV     DPH,A
   \   000007   8882         MOV     DPL,R0
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET
    293          
    294          /*********************************************************************
    295           * @fn          afReflectError
    296           *
    297           * @brief       This function will generate the Reflect Error message to
    298           *              the application.
    299           *
    300           * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
    301           * @param       dstAddr - intended destination
    302           * @param       endPoint - confirm end point
    303           * @param       transID - transaction ID from APSDE_DATA_REQUEST
    304           * @param       status - status of APSDE_DATA_REQUEST
    305           *
    306           * @return      none
    307           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    308          void afReflectError( uint8 dstAddrMode, uint16 dstAddr, uint8 endPoint, uint8 transID, ZStatus_t status )
   \                     afReflectError:
    309          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V1,R1
   \   000007   8A..         MOV     ?V4,R2
   \   000009   8B..         MOV     ?V5,R3
   \   00000B   8C..         MOV     ?V0,R4
   \   00000D   8D..         MOV     ?V2,R5
    310            endPointDesc_t *epDesc;
    311            afReflectError_t *msgPtr;
    312          
    313            // Find the endpoint description
    314            epDesc = afFindEndPointDesc( endPoint );
   \   00000F                ; Setup parameters for call to function afFindEndPointDesc
   \   00000F   A9..         MOV     R1,?V0
   \   000011   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000014   8A..         MOV     ?V6,R2
   \   000016   8B..         MOV     ?V7,R3
    315            if ( epDesc == NULL )
   \   000018   EA           MOV     A,R2
   \   000019   45..         ORL     A,?V7
   \   00001B   605D         JZ      ??afReflectError_0
    316              return;
    317          
    318            // Determine the incoming command type
    319            msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
   \   00001D                ; Setup parameters for call to function osal_msg_allocate
   \   00001D   7A07         MOV     R2,#0x7
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   000024   8A..         MOV     ?V8,R2
   \   000026   8B..         MOV     ?V9,R3
   \   000028   AE..         MOV     R6,?V8
   \   00002A   AF..         MOV     R7,?V9
    320            if ( msgPtr )
   \   00002C   EE           MOV     A,R6
   \   00002D   4F           ORL     A,R7
   \   00002E   604A         JZ      ??afReflectError_0
    321            {
    322              // Build the Data Confirm message
    323              msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   74FE         MOV     A,#-0x2
   \   000036   F0           MOVX    @DPTR,A
   \   000037   7412         MOV     A,#0x12
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FC           MOV     R4,A
    324              msgPtr->hdr.status = status;
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   12....       LCALL   ?Subroutine33 & 0xFFFF
    325              msgPtr->endpoint = endPoint;
   \                     ??CrossCallReturnLabel_57:
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   E5..         MOV     A,?V0
   \   00004A   12....       LCALL   ?Subroutine23 & 0xFFFF
    326              msgPtr->transID = transID;
   \                     ??CrossCallReturnLabel_35:
   \   00004D   E5..         MOV     A,?V2
   \   00004F   12....       LCALL   ?Subroutine23 & 0xFFFF
    327              msgPtr->dstAddrMode = dstAddrMode;
   \                     ??CrossCallReturnLabel_36:
   \   000052   A3           INC     DPTR
   \   000053   E5..         MOV     A,?V1
   \   000055   12....       LCALL   ?Subroutine20 & 0xFFFF
    328              msgPtr->dstAddr = dstAddr;
   \                     ??CrossCallReturnLabel_28:
   \   000058   E5..         MOV     A,?V4
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V5
   \   00005E   F0           MOVX    @DPTR,A
    329          
    330          #if defined ( MT_AF_CB_FUNC )
    331              /* If MT has subscribed for this callback, don't send as a message. */
    332              if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
    333              {
    334                /* Send callback if it's subscribed */
    335                MT_AfReflectError( (void *)msgPtr );
    336                /* Release the memory. */
    337                osal_msg_deallocate( (void *)msgPtr );
    338              }
    339              else
    340          #endif
    341              {
    342          		DBG_PRINTF_VALUE("\r\n[afreflector]: ", status, 16);
   \   00005F                ; Setup parameters for call to function uart_put_string_value
   \   00005F   7910         MOV     R1,#0x10
   \   000061   7D00         MOV     R5,#0x0
   \   000063   7A..         MOV     R2,#`?<Constant "\\r\\n[afreflector]: ">` & 0xff
   \   000065   7B..         MOV     R3,#(`?<Constant "\\r\\n[afreflector]: ">` >> 8) & 0xff
   \   000067   12....       LCALL   `??uart_put_string_value::?relay`; Banked call to: uart_put_string_value
    343          
    344                /* send message through task message */
    345                osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
   \   00006A                ; Setup parameters for call to function osal_msg_send
   \   00006A   EE           MOV     A,R6
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   85..82       MOV     DPL,?V6
   \   000071   85..83       MOV     DPH,?V7
   \   000074   12....       LCALL   ?Subroutine5 & 0xFFFF
    346              }
    347            }
   \                     ??CrossCallReturnLabel_1:
   \   000077   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    348          }
   \                     ??afReflectError_0:
   \   00007A   7F0A         MOV     R7,#0xa
   \   00007C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    349          
    350          /*********************************************************************
    351           * @fn          afIncomingData
    352           *
    353           * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
    354           *
    355           * @param       aff  - pointer to APS frame format
    356           * @param       SrcAddress  - Source address
    357           * @param       SrcPanId  - Source PAN ID
    358           * @param       sig - incoming message's link quality
    359           * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
    360           * @param       SecurityUse - Security enable/disable
    361           * @param       timestamp - the MAC Timer2 timestamp at Rx.
    362           * @param       radius - incoming messages received radius
    363           *
    364           * @return      none
    365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    366          void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
   \                     afIncomingData:
    367                               NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
    368                               uint32 timestamp, uint8 radius )
    369          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7402         MOV     A,#0x2
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   EC           MOV     A,R4
   \   000010   F0           MOVX    @DPTR,A
   \   000011   A3           INC     DPTR
   \   000012   ED           MOV     A,R5
   \   000013   F0           MOVX    @DPTR,A
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   E9           MOV     A,R1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   8A..         MOV     ?V2,R2
   \   00001D   8B..         MOV     ?V3,R3
    370            endPointDesc_t *epDesc = NULL;
    371            epList_t *pList = epList;
   \   00001F   90....       MOV     DPTR,#epList
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V1,A
    372          #if !defined ( APS_NO_GROUPS )
    373            uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
   \   000029   75..FE       MOV     ?V8,#-0x2
    374          #endif
    375          
    376            if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
   \   00002C   8A82         MOV     DPL,R2
   \   00002E   8B83         MOV     DPH,R3
   \   000030   E0           MOVX    A,@DPTR
   \   000031   540C         ANL     A,#0xc
   \   000033   640C         XRL     A,#0xc
   \   000035   7026         JNZ     ??afIncomingData_0
    377            {
    378          #if !defined ( APS_NO_GROUPS )
    379              // Find the first endpoint for this group
    380              grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
   \   000037                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   000037   79FE         MOV     R1,#-0x2
   \   000039   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00003C   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   00003F   E9           MOV     A,R1
   \   000040   F5..         MOV     ?V8,A
    381              if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
   \   000042   74FE         MOV     A,#-0x2
   \   000044   65..         XRL     A,?V8
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    382                return;   // No endpoint found
    383          
    384              epDesc = afFindEndPointDesc( grpEp );
   \   00004B                ; Setup parameters for call to function afFindEndPointDesc
   \   00004B   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00004E   8A..         MOV     ?V0,R2
   \   000050   8B..         MOV     ?V1,R3
   \   000052   AE..         MOV     R6,?V0
   \   000054   AF..         MOV     R7,?V1
    385              if ( epDesc == NULL )
   \   000056   EE           MOV     A,R6
   \   000057   4F           ORL     A,R7
   \   000058   7052         JNZ     ??afIncomingData_2
    386                return;   // Endpoint descriptor not found
   \   00005A   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    387          
    388              pList = afFindEndPointDescList( epDesc->endPoint );
    389          #else
    390              return; // Not supported
    391          #endif
    392            }
    393            else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
   \                     ??afIncomingData_0:
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F4           CPL     A
   \   000061   702E         JNZ     ??afIncomingData_3
    394            {
    395              // Set the list
    396              if ( pList != NULL )
   \   000063   E5..         MOV     A,?V0
   \   000065   45..         ORL     A,?V1
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??afIncomingData_1 & 0xFFFF
    397              {
    398                epDesc = pList->epDesc;
   \   00006C   85..82       MOV     DPL,?V0
   \   00006F   85..83       MOV     DPH,?V1
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FE           MOV     R6,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   FF           MOV     R7,A
   \                     ??afIncomingData_4:
   \   000079   741C         MOV     A,#0x1c
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   F5..         MOV     ?V14,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   F5..         MOV     ?V15,A
   \   000085   7421         MOV     A,#0x21
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   78..         MOV     R0,#?V4
   \   00008C   12....       LCALL   ?L_MOV_X
   \   00008F   8037         SJMP    ??afIncomingData_5
    399              }
    400            }
    401            else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
   \                     ??afIncomingData_3:
   \   000091                ; Setup parameters for call to function afFindEndPointDesc
   \   000091   8A82         MOV     DPL,R2
   \   000093   8B83         MOV     DPH,R3
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F9           MOV     R1,A
   \   000099   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   00009C   8A..         MOV     ?V4,R2
   \   00009E   8B..         MOV     ?V5,R3
   \   0000A0   A8..         MOV     R0,?V4
   \   0000A2   A9..         MOV     R1,?V5
   \   0000A4   E8           MOV     A,R0
   \   0000A5   FE           MOV     R6,A
   \   0000A6   E9           MOV     A,R1
   \   0000A7   FF           MOV     R7,A
   \   0000A8   E8           MOV     A,R0
   \   0000A9   49           ORL     A,R1
   \   0000AA   60CD         JZ      ??afIncomingData_4
    402            {
    403              pList = afFindEndPointDescList( epDesc->endPoint );
   \                     ??afIncomingData_2:
   \   0000AC                ; Setup parameters for call to function afFindEndPointDescList
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   E0           MOVX    A,@DPTR
   \   0000B1   F9           MOV     R1,A
   \   0000B2   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000B5   8A..         MOV     ?V0,R2
   \   0000B7   8B..         MOV     ?V1,R3
   \   0000B9   80BE         SJMP    ??afIncomingData_4
    404            }
    405          
    406            while ( epDesc )
    407            {
    408              uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
    409          
    410              if ( pList->pfnDescCB )
    411              {
    412                uint16 *pID = (uint16 *)(pList->pfnDescCB(
    413                                           AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
    414                if ( pID )
    415                {
    416                  epProfileID = *pID;
    417                  osal_mem_free( pID );
    418                }
    419              }
    420              else if ( epDesc->simpleDesc )
    421              {
    422                epProfileID = epDesc->simpleDesc->AppProfId;
    423              }
    424          
    425              // First part of verification is to make sure that:
    426              // the local Endpoint ProfileID matches the received ProfileID OR
    427              // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
    428              // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
    429              if ( (aff->ProfileID == epProfileID) ||
    430                   ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
    431                   ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
    432              {
    433                // Save original endpoint
    434                uint8 endpoint = aff->DstEndPoint;
    435          
    436                // overwrite with descriptor's endpoint
    437                aff->DstEndPoint = epDesc->endPoint;
    438          
    439                afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
    440                                   nwkSeqNum, SecurityUse, timestamp, radius );
    441          
    442                // Restore with original endpoint
    443                aff->DstEndPoint = endpoint;
    444              }
    445          
    446              if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
    447              {
    448          #if !defined ( APS_NO_GROUPS )
    449                // Find the next endpoint for this group
    450                grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
    451                if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
    452                  return;   // No endpoint found
    453          
    454                epDesc = afFindEndPointDesc( grpEp );
    455                if ( epDesc == NULL )
    456                  return;   // Endpoint descriptor not found
    457          
    458                pList = afFindEndPointDescList( epDesc->endPoint );
    459          #else
    460                return;
    461          #endif
    462              }
    463              else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
    464              {
    465                pList = pList->nextDesc;
    466                if ( pList )
    467                  epDesc = pList->epDesc;
   \                     ??afIncomingData_6:
   \   0000BB   85..82       MOV     DPL,?V0
   \   0000BE   85..83       MOV     DPH,?V1
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   FE           MOV     R6,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   FF           MOV     R7,A
   \                     ??afIncomingData_5:
   \   0000C8   EE           MOV     A,R6
   \   0000C9   4F           ORL     A,R7
   \   0000CA   7003         JNZ     $+5
   \   0000CC   02....       LJMP    ??afIncomingData_1 & 0xFFFF
   \   0000CF   800D         SJMP    ??afIncomingData_7
   \                     ??afIncomingData_8:
   \   0000D1                ; Setup parameters for call to function afFindEndPointDescList
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F9           MOV     R1,A
   \   0000D7   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0000DA   8A..         MOV     ?V0,R2
   \   0000DC   8B..         MOV     ?V1,R3
   \                     ??afIncomingData_7:
   \   0000DE   75..FE       MOV     ?V10,#-0x2
   \   0000E1   75..FF       MOV     ?V11,#-0x1
   \   0000E4   85..82       MOV     DPL,?V0
   \   0000E7   85..83       MOV     DPH,?V1
   \   0000EA   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   0000ED   8E82         MOV     DPL,R6
   \   0000EF   8F83         MOV     DPH,R7
   \   0000F1   6028         JZ      ??afIncomingData_9
   \   0000F3                ; Setup parameters for indirect call
   \   0000F3   E0           MOVX    A,@DPTR
   \   0000F4   FA           MOV     R2,A
   \   0000F5   7902         MOV     R1,#0x2
   \   0000F7   85..82       MOV     DPL,?V0
   \   0000FA   85..83       MOV     DPH,?V1
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   A3           INC     DPTR
   \   000101   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000104   12....       LCALL   ?CALL_IND
   \   000107   EA           MOV     A,R2
   \   000108   4B           ORL     A,R3
   \   000109   6027         JZ      ??afIncomingData_10
   \   00010B   8A82         MOV     DPL,R2
   \   00010D   8B83         MOV     DPH,R3
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   F5..         MOV     ?V10,A
   \   000112   A3           INC     DPTR
   \   000113   E0           MOVX    A,@DPTR
   \   000114   F5..         MOV     ?V11,A
   \   000116                ; Setup parameters for call to function osal_mem_free
   \   000116   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   000119   8017         SJMP    ??afIncomingData_10
   \                     ??afIncomingData_9:
   \   00011B   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00011E   6012         JZ      ??afIncomingData_10
   \   000120   8E82         MOV     DPL,R6
   \   000122   8F83         MOV     DPH,R7
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   12....       LCALL   ??Subroutine38_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00012A   A3           INC     DPTR
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   F5..         MOV     ?V10,A
   \   00012E   A3           INC     DPTR
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F5..         MOV     ?V11,A
   \                     ??afIncomingData_10:
   \   000132   85..82       MOV     DPL,?V2
   \   000135   85..83       MOV     DPH,?V3
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   E0           MOVX    A,@DPTR
   \   000141   65..         XRL     A,?V10
   \   000143   7004         JNZ     ??afIncomingData_11
   \   000145   A3           INC     DPTR
   \   000146   E0           MOVX    A,@DPTR
   \   000147   65..         XRL     A,?V11
   \                     ??afIncomingData_11:
   \   000149   6025         JZ      ??afIncomingData_12
   \   00014B   8E82         MOV     DPL,R6
   \   00014D   8F83         MOV     DPH,R7
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   85..82       MOV     DPL,?V2
   \   000153   85..83       MOV     DPH,?V3
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   A3           INC     DPTR
   \   000159   A3           INC     DPTR
   \   00015A   A3           INC     DPTR
   \   00015B   A3           INC     DPTR
   \   00015C   A3           INC     DPTR
   \   00015D   A3           INC     DPTR
   \   00015E   7007         JNZ     ??afIncomingData_13
   \   000160   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000163   707C         JNZ     ??CrossCallReturnLabel_23
   \   000165   8009         SJMP    ??afIncomingData_12
   \                     ??afIncomingData_13:
   \   000167   E0           MOVX    A,@DPTR
   \   000168   F4           CPL     A
   \   000169   7003         JNZ     ??afIncomingData_14
   \   00016B   A3           INC     DPTR
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   F4           CPL     A
   \                     ??afIncomingData_14:
   \   00016E   7071         JNZ     ??CrossCallReturnLabel_23
   \                     ??afIncomingData_12:
   \   000170   E5..         MOV     A,?V2
   \   000172   2402         ADD     A,#0x2
   \   000174   F5..         MOV     ?V10,A
   \   000176   E4           CLR     A
   \   000177   35..         ADDC    A,?V3
   \   000179   F5..         MOV     ?V11,A
   \   00017B   85..82       MOV     DPL,?V10
   \   00017E   F583         MOV     DPH,A
   \   000180   E0           MOVX    A,@DPTR
   \   000181   85..82       MOV     DPL,?XSP + 0
   \   000184   85..83       MOV     DPH,?XSP + 1
   \   000187   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   00018A   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00018D                ; Setup parameters for call to function afBuildMSGIncoming
   \   00018D   7425         MOV     A,#0x25
   \   00018F   12....       LCALL   ?XSTACK_DISP0_8
   \   000192   E0           MOVX    A,@DPTR
   \   000193   F5..         MOV     ?V9,A
   \   000195   78..         MOV     R0,#?V9
   \   000197   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00019A   78..         MOV     R0,#?V4
   \   00019C   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00019F   7425         MOV     A,#0x25
   \   0001A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A4   E0           MOVX    A,@DPTR
   \   0001A5   F5..         MOV     ?V9,A
   \   0001A7   78..         MOV     R0,#?V9
   \   0001A9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001AC   7424         MOV     A,#0x24
   \   0001AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001B4   78..         MOV     R0,#?V14
   \   0001B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B9   740C         MOV     A,#0xc
   \   0001BB   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BE   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0001C1   740D         MOV     A,#0xd
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   E0           MOVX    A,@DPTR
   \   0001C7   F9           MOV     R1,A
   \   0001C8   EE           MOV     A,R6
   \   0001C9   FC           MOV     R4,A
   \   0001CA   EF           MOV     A,R7
   \   0001CB   FD           MOV     R5,A
   \   0001CC   AA..         MOV     R2,?V2
   \   0001CE   AB..         MOV     R3,?V3
   \   0001D0   12....       LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
   \   0001D3   740C         MOV     A,#0xc
   \   0001D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D8   85..82       MOV     DPL,?XSP + 0
   \   0001DB   85..83       MOV     DPH,?XSP + 1
   \   0001DE   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   0001E1   85..82       MOV     DPL,?V2
   \   0001E4   85..83       MOV     DPH,?V3
   \   0001E7   E0           MOVX    A,@DPTR
   \   0001E8   540C         ANL     A,#0xc
   \   0001EA   640C         XRL     A,#0xc
   \   0001EC   7025         JNZ     ??afIncomingData_15
   \   0001EE                ; Setup parameters for call to function aps_FindGroupForEndpoint
   \   0001EE   A9..         MOV     R1,?V8
   \   0001F0   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   0001F3   12....       LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
   \   0001F6   E9           MOV     A,R1
   \   0001F7   F5..         MOV     ?V8,A
   \   0001F9   74FE         MOV     A,#-0x2
   \   0001FB   65..         XRL     A,?V8
   \   0001FD   6030         JZ      ??afIncomingData_1
   \   0001FF                ; Setup parameters for call to function afFindEndPointDesc
   \   0001FF   12....       LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
   \   000202   8A..         MOV     ?V0,R2
   \   000204   8B..         MOV     ?V1,R3
   \   000206   AE..         MOV     R6,?V0
   \   000208   AF..         MOV     R7,?V1
   \   00020A   EE           MOV     A,R6
   \   00020B   4F           ORL     A,R7
   \   00020C   6003         JZ      $+5
   \   00020E   02....       LJMP    ??afIncomingData_8 & 0xFFFF
   \   000211   801C         SJMP    ??afIncomingData_1
   \                     ??afIncomingData_15:
   \   000213   A3           INC     DPTR
   \   000214   A3           INC     DPTR
   \   000215   E0           MOVX    A,@DPTR
   \   000216   F4           CPL     A
   \   000217   7016         JNZ     ??afIncomingData_1
   \   000219   85..82       MOV     DPL,?V0
   \   00021C   85..83       MOV     DPH,?V1
   \   00021F   E0           MOVX    A,@DPTR
   \   000220   F5..         MOV     ?V0,A
   \   000222   A3           INC     DPTR
   \   000223   E0           MOVX    A,@DPTR
   \   000224   F5..         MOV     ?V1,A
   \   000226   E5..         MOV     A,?V0
   \   000228   45..         ORL     A,?V1
   \   00022A   6003         JZ      $+5
   \   00022C   02....       LJMP    ??afIncomingData_6 & 0xFFFF
    468                else
    469                  epDesc = NULL;
    470              }
    471              else
    472                epDesc = NULL;
    473            }
    474          }
   \                     ??afIncomingData_1:
   \   00022F   7404         MOV     A,#0x4
   \   000231   12....       LCALL   ?DEALLOC_XSTACK8
   \   000234   7F10         MOV     R7,#0x10
   \   000236   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V10
   \   000004   85..83       MOV     DPH,?V11
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine34_0
   \   000001                ; // Fall through to label ??Subroutine34_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine34_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine39_0
   \   000001                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine40_0
   \   000001                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine41_0
   \   000001                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine42_0
   \   000002                ; // Fall through to label ??Subroutine42_0
    475          
    476          /*********************************************************************
    477           * @fn          afBuildMSGIncoming
    478           *
    479           * @brief       Build the message for the app
    480           *
    481           * @param
    482           *
    483           * @return      pointer to next in data buffer
    484           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    485          static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
   \                     afBuildMSGIncoming:
    486                           zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
    487                           uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
    488          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
   \   00000D   89..         MOV     ?V6,R1
    489            afIncomingMSGPacket_t *MSGpkt;
    490            const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
    491            uint8 *asdu = aff->asdu;
   \   00000F   EA           MOV     A,R2
   \   000010   240E         ADD     A,#0xe
   \   000012   F582         MOV     DPL,A
   \   000014   E4           CLR     A
   \   000015   35..         ADDC    A,?V1
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V4,A
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V5,A
    492            MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
   \   000020                ; Setup parameters for call to function osal_msg_allocate
   \   000020   EA           MOV     A,R2
   \   000021   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000024   2427         ADD     A,#0x27
   \   000026   FA           MOV     R2,A
   \   000027   7B00         MOV     R3,#0x0
   \   000029   12....       LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
   \   00002C   8A..         MOV     ?V8,R2
   \   00002E   8B..         MOV     ?V9,R3
   \   000030   AE..         MOV     R6,?V8
   \   000032   AF..         MOV     R7,?V9
    493          
    494            if ( MSGpkt == NULL )
   \   000034   EE           MOV     A,R6
   \   000035   4F           ORL     A,R7
   \   000036   7003         JNZ     $+5
   \   000038   02....       LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
    495            {
    496              return;
    497            }
    498          
    499            MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
   \   00003B   8E82         MOV     DPL,R6
   \   00003D   8F83         MOV     DPH,R7
   \   00003F   741A         MOV     A,#0x1a
   \   000041   12....       LCALL   ?Subroutine28 & 0xFFFF
    500            MSGpkt->groupId = aff->GroupID;
   \                     ??CrossCallReturnLabel_45:
   \   000044   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000047   12....       LCALL   ?Subroutine17 & 0xFFFF
    501            MSGpkt->clusterId = aff->ClusterID;
   \                     ??CrossCallReturnLabel_24:
   \   00004A   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   12....       LCALL   ??Subroutine36_0 & 0xFFFF
    502            afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
   \                     ??CrossCallReturnLabel_71:
   \   000052                ; Setup parameters for call to function afCopyAddress
   \   000052   7413         MOV     A,#0x13
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00005A   EE           MOV     A,R6
   \   00005B   2406         ADD     A,#0x6
   \   00005D   FA           MOV     R2,A
   \   00005E   E4           CLR     A
   \   00005F   3F           ADDC    A,R7
   \   000060   FB           MOV     R3,A
   \   000061   12....       LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
    503            MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
   \   000064   85..82       MOV     DPL,?V0
   \   000067   85..83       MOV     DPH,?V1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   C0E0         PUSH    A
   \   000070   EE           MOV     A,R6
   \   000071   240F         ADD     A,#0xf
   \   000073   F582         MOV     DPL,A
   \   000075   E4           CLR     A
   \   000076   3F           ADDC    A,R7
   \   000077   F583         MOV     DPH,A
   \   000079   D0E0         POP     A
   \   00007B   F0           MOVX    @DPTR,A
    504            MSGpkt->endPoint = epDesc->endPoint;
   \   00007C   85..82       MOV     DPL,?V2
   \   00007F   85..83       MOV     DPH,?V3
   \   000082   E0           MOVX    A,@DPTR
   \   000083   C0E0         PUSH    A
   \   000085   EE           MOV     A,R6
   \   000086   2414         ADD     A,#0x14
   \   000088   F582         MOV     DPL,A
   \   00008A   E4           CLR     A
   \   00008B   3F           ADDC    A,R7
   \   00008C   F583         MOV     DPH,A
   \   00008E   D0E0         POP     A
   \   000090   F0           MOVX    @DPTR,A
    505            MSGpkt->wasBroadcast = aff->wasBroadcast;
   \   000091   E5..         MOV     A,?V0
   \   000093   240C         ADD     A,#0xc
   \   000095   F582         MOV     DPL,A
   \   000097   E4           CLR     A
   \   000098   35..         ADDC    A,?V1
   \   00009A   F583         MOV     DPH,A
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   C0E0         PUSH    A
   \   00009F   EE           MOV     A,R6
   \   0000A0   2415         ADD     A,#0x15
   \   0000A2   F582         MOV     DPL,A
   \   0000A4   E4           CLR     A
   \   0000A5   3F           ADDC    A,R7
   \   0000A6   F583         MOV     DPH,A
   \   0000A8   D0E0         POP     A
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   7417         MOV     A,#0x17
   \   0000AD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B0   12....       LCALL   ?Subroutine13 & 0xFFFF
    506            MSGpkt->LinkQuality = sig->LinkQuality;
   \                     ??CrossCallReturnLabel_17:
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   C0E0         PUSH    A
   \   0000B6   EE           MOV     A,R6
   \   0000B7   2416         ADD     A,#0x16
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   E4           CLR     A
   \   0000BC   3F           ADDC    A,R7
   \   0000BD   F583         MOV     DPH,A
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ?Subroutine30 & 0xFFFF
    507            MSGpkt->correlation = sig->correlation;
   \                     ??CrossCallReturnLabel_50:
   \   0000C4   A3           INC     DPTR
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   C0E0         PUSH    A
   \   0000C8   EE           MOV     A,R6
   \   0000C9   2417         ADD     A,#0x17
   \   0000CB   F582         MOV     DPL,A
   \   0000CD   E4           CLR     A
   \   0000CE   3F           ADDC    A,R7
   \   0000CF   F583         MOV     DPH,A
   \   0000D1   D0E0         POP     A
   \   0000D3   12....       LCALL   ?Subroutine30 & 0xFFFF
    508            MSGpkt->rssi = sig->rssi;
   \                     ??CrossCallReturnLabel_51:
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   C0E0         PUSH    A
   \   0000DB   EE           MOV     A,R6
   \   0000DC   2418         ADD     A,#0x18
   \   0000DE   F582         MOV     DPL,A
   \   0000E0   E4           CLR     A
   \   0000E1   3F           ADDC    A,R7
   \   0000E2   F583         MOV     DPH,A
   \   0000E4   D0E0         POP     A
   \   0000E6   F0           MOVX    @DPTR,A
    509            MSGpkt->SecurityUse = SecurityUse;
   \   0000E7   7419         MOV     A,#0x19
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   C0E0         PUSH    A
   \   0000EF   EE           MOV     A,R6
   \   0000F0   2419         ADD     A,#0x19
   \   0000F2   F582         MOV     DPL,A
   \   0000F4   E4           CLR     A
   \   0000F5   3F           ADDC    A,R7
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   D0E0         POP     A
   \   0000FA   F0           MOVX    @DPTR,A
    510            MSGpkt->timestamp = timestamp;
   \   0000FB   741A         MOV     A,#0x1a
   \   0000FD   12....       LCALL   ?XSTACK_DISP0_8
   \   000100   12....       LCALL   ?XLOAD_R0123
   \   000103   EE           MOV     A,R6
   \   000104   241A         ADD     A,#0x1a
   \   000106   F582         MOV     DPL,A
   \   000108   E4           CLR     A
   \   000109   3F           ADDC    A,R7
   \   00010A   F583         MOV     DPH,A
   \   00010C   12....       LCALL   ?XSTORE_R0123
    511            MSGpkt->nwkSeqNum = nwkSeqNum;
   \   00010F   EE           MOV     A,R6
   \   000110   241E         ADD     A,#0x1e
   \   000112   F582         MOV     DPL,A
   \   000114   E4           CLR     A
   \   000115   3F           ADDC    A,R7
   \   000116   F583         MOV     DPH,A
   \   000118   E5..         MOV     A,?V6
   \   00011A   F0           MOVX    @DPTR,A
    512            MSGpkt->macSrcAddr = aff->macSrcAddr;
   \   00011B   E5..         MOV     A,?V0
   \   00011D   2415         ADD     A,#0x15
   \   00011F   F582         MOV     DPL,A
   \   000121   E4           CLR     A
   \   000122   35..         ADDC    A,?V1
   \   000124   F583         MOV     DPH,A
   \   000126   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000129   2424         ADD     A,#0x24
   \   00012B   F582         MOV     DPL,A
   \   00012D   E4           CLR     A
   \   00012E   3F           ADDC    A,R7
   \   00012F   F583         MOV     DPH,A
   \   000131   12....       LCALL   ?Subroutine17 & 0xFFFF
    513            MSGpkt->macDestAddr = aff->macDestAddr;
   \                     ??CrossCallReturnLabel_25:
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00013F   2412         ADD     A,#0x12
   \   000141   12....       LCALL   ?Subroutine18 & 0xFFFF
    514            MSGpkt->srcAddr.panId = SrcPanId;
   \                     ??CrossCallReturnLabel_77:
   \   000144   7415         MOV     A,#0x15
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00014C   2410         ADD     A,#0x10
   \   00014E   12....       LCALL   ?Subroutine18 & 0xFFFF
    515            MSGpkt->cmd.TransSeqNumber = 0;
   \                     ??CrossCallReturnLabel_78:
   \   000151   EE           MOV     A,R6
   \   000152   241F         ADD     A,#0x1f
   \   000154   F582         MOV     DPL,A
   \   000156   E4           CLR     A
   \   000157   3F           ADDC    A,R7
   \   000158   F583         MOV     DPH,A
   \   00015A   E4           CLR     A
   \   00015B   F0           MOVX    @DPTR,A
    516            MSGpkt->cmd.DataLength = aff->asduLength;
   \   00015C   EE           MOV     A,R6
   \   00015D   2420         ADD     A,#0x20
   \   00015F   F8           MOV     R0,A
   \   000160   E4           CLR     A
   \   000161   3F           ADDC    A,R7
   \   000162   F9           MOV     R1,A
   \   000163   E5..         MOV     A,?V0
   \   000165   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000168   8882         MOV     DPL,R0
   \   00016A   8983         MOV     DPH,R1
   \   00016C   F0           MOVX    @DPTR,A
   \   00016D   A3           INC     DPTR
   \   00016E   E4           CLR     A
   \   00016F   F0           MOVX    @DPTR,A
    517            MSGpkt->radius = radius;
   \   000170   741E         MOV     A,#0x1e
   \   000172   12....       LCALL   ?XSTACK_DISP0_8
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C0E0         PUSH    A
   \   000178   EE           MOV     A,R6
   \   000179   2426         ADD     A,#0x26
   \   00017B   F582         MOV     DPL,A
   \   00017D   E4           CLR     A
   \   00017E   3F           ADDC    A,R7
   \   00017F   F583         MOV     DPH,A
   \   000181   D0E0         POP     A
   \   000183   12....       LCALL   ?Subroutine30 & 0xFFFF
    518          
    519            if ( MSGpkt->cmd.DataLength )
   \                     ??CrossCallReturnLabel_52:
   \   000186   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000189   6033         JZ      ??afBuildMSGIncoming_1
    520            {
    521              MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
   \   00018B   EE           MOV     A,R6
   \   00018C   2427         ADD     A,#0x27
   \   00018E   FA           MOV     R2,A
   \   00018F   E4           CLR     A
   \   000190   3F           ADDC    A,R7
   \   000191   FB           MOV     R3,A
   \   000192   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000195   EA           MOV     A,R2
   \   000196   F0           MOVX    @DPTR,A
   \   000197   A3           INC     DPTR
   \   000198   EB           MOV     A,R3
   \   000199   F0           MOVX    @DPTR,A
    522              osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
   \   00019A                ; Setup parameters for call to function osal_memcpy
   \   00019A   85....       MOV     ?V8,?V4
   \   00019D   85....       MOV     ?V9,?V5
   \   0001A0   75..00       MOV     ?V10,#0x0
   \   0001A3   78..         MOV     R0,#?V8
   \   0001A5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001A8   EE           MOV     A,R6
   \   0001A9   2420         ADD     A,#0x20
   \   0001AB   F582         MOV     DPL,A
   \   0001AD   E4           CLR     A
   \   0001AE   3F           ADDC    A,R7
   \   0001AF   F583         MOV     DPH,A
   \   0001B1   12....       LCALL   ?Subroutine10 & 0xFFFF
    523            }
   \                     ??CrossCallReturnLabel_10:
   \   0001B4   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0001B7   7403         MOV     A,#0x3
   \   0001B9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001BC   8007         SJMP    ??afBuildMSGIncoming_2
    524            else
    525            {
    526              MSGpkt->cmd.Data = NULL;
   \                     ??afBuildMSGIncoming_1:
   \   0001BE   12....       LCALL   ?Subroutine27 & 0xFFFF
    527            }
   \                     ??CrossCallReturnLabel_44:
   \   0001C1   E4           CLR     A
   \   0001C2   F0           MOVX    @DPTR,A
   \   0001C3   A3           INC     DPTR
   \   0001C4   F0           MOVX    @DPTR,A
    528          
    529          #if defined ( MT_AF_CB_FUNC )
    530            // If ZDO or SAPI have registered for this endpoint, dont intercept it here
    531            if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
    532            {
    533              MT_AfIncomingMsg( (void *)MSGpkt );
    534              // Release the memory.
    535              osal_msg_deallocate( (void *)MSGpkt );
    536            }
    537            else
    538          #endif
    539            {
    540              // Send message through task message.
    541              osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
   \                     ??afBuildMSGIncoming_2:
   \   0001C5                ; Setup parameters for call to function osal_msg_send
   \   0001C5   EE           MOV     A,R6
   \   0001C6   FA           MOV     R2,A
   \   0001C7   EF           MOV     A,R7
   \   0001C8   FB           MOV     R3,A
   \   0001C9   85..82       MOV     DPL,?V2
   \   0001CC   85..83       MOV     DPH,?V3
   \   0001CF   12....       LCALL   ?Subroutine5 & 0xFFFF
    542            }
   \                     ??CrossCallReturnLabel_2:
   \   0001D2   12....       LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
    543          }
   \                     ??afBuildMSGIncoming_0:
   \   0001D5   7F0B         MOV     R7,#0xb
   \   0001D7   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   2410         ADD     A,#0x10
   \   000002   F582         MOV     DPL,A
   \   000004   E4           CLR     A
   \   000005   35..         ADDC    A,?V1
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function afFindEndPointDescList
   \   000001   85..82       MOV     DPL,?V0
   \   000004   85..83       MOV     DPH,?V1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   F582         MOV     DPL,A
   \   000002   E4           CLR     A
   \   000003   3F           ADDC    A,R7
   \   000004   F583         MOV     DPH,A
   \   000006                REQUIRE ??Subroutine36_0
   \   000006                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET
    544          
    545          /*********************************************************************
    546           * @fn      AF_DataRequest
    547           *
    548           * @brief   Common functionality for invoking APSDE_DataReq() for both
    549           *          SendMulti and MSG-Send.
    550           *
    551           * input parameters
    552           *
    553           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    554           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    555           * @param   cID - A valid cluster ID as specified by the Profile.
    556           * @param   len - Number of bytes of data pointed to by next param.
    557           * @param  *buf - A pointer to the data bytes to send.
    558           * @param  *transID - A pointer to a byte which can be modified and which will
    559           *                    be used as the transaction sequence number of the msg.
    560           * @param   options - Valid bit mask of Tx options.
    561           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    562           *
    563           * output parameters
    564           *
    565           * @param  *transID - Incremented by one if the return value is success.
    566           *
    567           * @return  afStatus_t - See previous definition of afStatus_... types.
    568           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    569          uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
   \                     AF_DataRequestDiscoverRoute:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequest:
    571                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    572                                     uint8 options, uint8 radius )
    573          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0,R4
   \   000010   8D..         MOV     ?V1,R5
   \   000012   89..         MOV     ?V2,R1
    574            pDescCB pfnDescCB;
    575            ZStatus_t stat;
    576            APSDE_DataReq_t req;
    577            afDataReqMTU_t mtu;
    578            epList_t *pList;
    579          
    580            // Verify source end point
    581            if ( srcEP == NULL )
   \   000014   EC           MOV     A,R4
   \   000015   45..         ORL     A,?V1
   \   000017   7003         JNZ     $+5
   \   000019   02....       LJMP    ??AF_DataRequest_0 & 0xFFFF
    582            {
    583              return afStatus_INVALID_PARAMETER;
    584            }
    585          
    586          #if !defined( REFLECTOR )
    587            if ( dstAddr->addrMode == afAddrNotPresent )
    588            {
    589              return afStatus_INVALID_PARAMETER;
    590            }
    591          #endif
    592          
    593            // Check if route is available before sending data
    594            if ( options & AF_LIMIT_CONCENTRATOR  )
   \   00001C   E9           MOV     A,R1
   \   00001D   A2E3         MOV     C,0xE0 /* A   */.3
   \   00001F   5042         JNC     ??AF_DataRequest_1
    595            {
    596              if ( dstAddr->addrMode != afAddr16Bit )
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6402         XRL     A,#0x2
   \   000030   6003         JZ      $+5
   \   000032   02....       LJMP    ??AF_DataRequest_0 & 0xFFFF
    597              {
    598                return ( afStatus_INVALID_PARAMETER );
    599              }
    600          
    601              // First, make sure the destination is not its self, then check for an existing route.
    602              if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
    603                  && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
   \   000035                ; Setup parameters for call to function NLME_GetShortAddr
   \   000035   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000038   8A..         MOV     ?V4,R2
   \   00003A   8B..         MOV     ?V5,R3
   \   00003C   A8..         MOV     R0,?V4
   \   00003E   A9..         MOV     R1,?V5
   \   000040   8E82         MOV     DPL,R6
   \   000042   8F83         MOV     DPH,R7
   \   000044   E0           MOVX    A,@DPTR
   \   000045   68           XRL     A,R0
   \   000046   7003         JNZ     ??AF_DataRequest_2
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   69           XRL     A,R1
   \                     ??AF_DataRequest_2:
   \   00004B   6016         JZ      ??AF_DataRequest_1
   \   00004D                ; Setup parameters for call to function RTG_CheckRtStatus
   \   00004D   7C03         MOV     R4,#0x3
   \   00004F   7901         MOV     R1,#0x1
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000058   12....       LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
   \   00005B   E9           MOV     A,R1
   \   00005C   6005         JZ      ??AF_DataRequest_1
    604              {
    605                // A valid route to a concentrator wasn't found
    606                return ( afStatus_NO_ROUTE );
   \   00005E   79CD         MOV     R1,#-0x33
   \   000060   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    607              }
    608            }
    609          
    610            // Validate broadcasting
    611            if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
    612                 ( dstAddr->addrMode == afAddrBroadcast )    )
   \                     ??AF_DataRequest_1:
   \   000063   8E82         MOV     DPL,R6
   \   000065   8F83         MOV     DPH,R7
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   6402         XRL     A,#0x2
   \   000072   6011         JZ      ??AF_DataRequest_4
   \   000074   8E82         MOV     DPL,R6
   \   000076   8F83         MOV     DPH,R7
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   640F         XRL     A,#0xf
   \   000083   704B         JNZ     ??AF_DataRequest_5
    613            {
    614              // Check for valid broadcast values
    615              if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
   \                     ??AF_DataRequest_4:
   \   000085                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00008C   12....       LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
   \   00008F   E9           MOV     A,R1
   \   000090   8E82         MOV     DPL,R6
   \   000092   8F83         MOV     DPH,R7
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   602B         JZ      ??AF_DataRequest_6
    616              {
    617                // Force mode to broadcast
    618                dstAddr->addrMode = afAddrBroadcast;
   \   00009E   740F         MOV     A,#0xf
   \   0000A0   F0           MOVX    @DPTR,A
    619              }
    620              else
    621              {
    622                // Address is not a valid broadcast type
    623                if ( dstAddr->addrMode == afAddrBroadcast )
    624                {
    625                  return afStatus_INVALID_PARAMETER;
    626                }
    627              }
    628            }
    629            else if ( dstAddr->addrMode != afAddr64Bit &&
    630                      dstAddr->addrMode != afAddrGroup &&
    631                      dstAddr->addrMode != afAddrNotPresent )
    632            {
    633              return afStatus_INVALID_PARAMETER;
    634            }
    635          
    636            // Set destination address
    637            req.dstAddr.addrMode = dstAddr->addrMode;
   \                     ??AF_DataRequest_7:
   \   0000A1   EE           MOV     A,R6
   \   0000A2   2408         ADD     A,#0x8
   \   0000A4   F8           MOV     R0,A
   \   0000A5   E4           CLR     A
   \   0000A6   3F           ADDC    A,R7
   \   0000A7   F9           MOV     R1,A
   \   0000A8   8882         MOV     DPL,R0
   \   0000AA   8983         MOV     DPH,R1
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   C0E0         PUSH    A
   \   0000AF   740A         MOV     A,#0xa
   \   0000B1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B4   D0E0         POP     A
   \   0000B6   12....       LCALL   ?Subroutine25 & 0xFFFF
    638            if ( dstAddr->addrMode == afAddr64Bit )
   \                     ??CrossCallReturnLabel_39:
   \   0000B9   704B         JNZ     ??AF_DataRequest_8
    639            {
    640              osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
   \   0000BB                ; Setup parameters for call to function sAddrExtCpy
   \   0000BB   EE           MOV     A,R6
   \   0000BC   FC           MOV     R4,A
   \   0000BD   EF           MOV     A,R7
   \   0000BE   FD           MOV     R5,A
   \   0000BF   7402         MOV     A,#0x2
   \   0000C1   12....       LCALL   ?XSTACK_DISP101_8
   \   0000C4   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   0000C7   804C         SJMP    ??CrossCallReturnLabel_72
    641            }
   \                     ??AF_DataRequest_6:
   \   0000C9   E0           MOVX    A,@DPTR
   \   0000CA   640F         XRL     A,#0xf
   \   0000CC   70D3         JNZ     ??AF_DataRequest_7
   \   0000CE   8031         SJMP    ??AF_DataRequest_0
   \                     ??AF_DataRequest_5:
   \   0000D0   8E82         MOV     DPL,R6
   \   0000D2   8F83         MOV     DPH,R7
   \   0000D4   A3           INC     DPTR
   \   0000D5   A3           INC     DPTR
   \   0000D6   A3           INC     DPTR
   \   0000D7   A3           INC     DPTR
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   6403         XRL     A,#0x3
   \   0000DF   60C0         JZ      ??AF_DataRequest_7
   \   0000E1   8E82         MOV     DPL,R6
   \   0000E3   8F83         MOV     DPH,R7
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   6401         XRL     A,#0x1
   \   0000F0   60AF         JZ      ??AF_DataRequest_7
   \   0000F2   8E82         MOV     DPL,R6
   \   0000F4   8F83         MOV     DPH,R7
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   60A0         JZ      ??AF_DataRequest_7
   \                     ??AF_DataRequest_0:
   \   000101   7902         MOV     R1,#0x2
   \   000103   02....       LJMP    ??AF_DataRequest_3 & 0xFFFF
    642            else
    643            {
    644              req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
   \                     ??AF_DataRequest_8:
   \   000106   8E82         MOV     DPL,R6
   \   000108   8F83         MOV     DPH,R7
   \   00010A   12....       LCALL   ??Subroutine43_0 & 0xFFFF
    645            }
   \                     ??CrossCallReturnLabel_98:
   \   00010D   7402         MOV     A,#0x2
   \   00010F   12....       LCALL   ?XSTACK_DISP0_8
   \   000112   12....       LCALL   ??Subroutine36_0 & 0xFFFF
    646          
    647            // This option is to use Wildcard ProfileID in outgoing packets
    648            if ( options & AF_WILDCARD_PROFILEID )
   \                     ??CrossCallReturnLabel_72:
   \   000115   E5..         MOV     A,?V2
   \   000117   A2E1         MOV     C,0xE0 /* A   */.1
   \   000119   7411         MOV     A,#0x11
   \   00011B   5009         JNC     ??AF_DataRequest_9
    649            {
    650              req.profileID = ZDO_WILDCARD_PROFILE_ID;
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   74FF         MOV     A,#-0x1
   \   000122   F0           MOVX    @DPTR,A
   \   000123   A3           INC     DPTR
   \   000124   807C         SJMP    ??AF_DataRequest_10
    651            }
    652            else
    653            {
    654              req.profileID = ZDO_PROFILE_ID;
   \                     ??AF_DataRequest_9:
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   E4           CLR     A
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   A3           INC     DPTR
   \   00012C   F0           MOVX    @DPTR,A
    655          
    656              if ( (pfnDescCB = afGetDescCB( srcEP )) )
   \   00012D   90....       MOV     DPTR,#epList
   \                     ??AF_DataRequest_11:
   \   000130   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000133   6049         JZ      ??AF_DataRequest_12
   \   000135   8882         MOV     DPL,R0
   \   000137   8983         MOV     DPH,R1
   \   000139   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   00013C   E5..         MOV     A,?V0
   \   00013E   6A           XRL     A,R2
   \   00013F   7003         JNZ     ??AF_DataRequest_13
   \   000141   E5..         MOV     A,?V1
   \   000143   6B           XRL     A,R3
   \                     ??AF_DataRequest_13:
   \   000144   8882         MOV     DPL,R0
   \   000146   8983         MOV     DPH,R1
   \   000148   70E6         JNZ     ??AF_DataRequest_11
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000151   E8           MOV     A,R0
   \   000152   FC           MOV     R4,A
   \   000153   E9           MOV     A,R1
   \   000154   FD           MOV     R5,A
   \   000155   EC           MOV     A,R4
   \   000156   4D           ORL     A,R5
   \   000157   6025         JZ      ??AF_DataRequest_12
    657              {
    658                uint16 *pID = (uint16 *)(pfnDescCB(
    659                                             AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
   \   000159                ; Setup parameters for indirect call
   \   000159   85..82       MOV     DPL,?V0
   \   00015C   85..83       MOV     DPH,?V1
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   FA           MOV     R2,A
   \   000161   7902         MOV     R1,#0x2
   \   000163   8C82         MOV     DPL,R4
   \   000165   8D83         MOV     DPH,R5
   \   000167   12....       LCALL   ?CALL_IND
    660                if ( pID )
   \   00016A   EA           MOV     A,R2
   \   00016B   4B           ORL     A,R3
   \   00016C   6035         JZ      ??AF_DataRequest_14
    661                {
    662                  req.profileID = *pID;
   \   00016E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000171   7411         MOV     A,#0x11
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   12....       LCALL   ??Subroutine36_0 & 0xFFFF
    663                  osal_mem_free( pID );
   \                     ??CrossCallReturnLabel_73:
   \   000179                ; Setup parameters for call to function osal_mem_free
   \   000179   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
   \   00017C   8025         SJMP    ??AF_DataRequest_14
    664                }
    665              }
    666              else if ( srcEP->simpleDesc )
   \                     ??AF_DataRequest_12:
   \   00017E   85..82       MOV     DPL,?V0
   \   000181   85..83       MOV     DPH,?V1
   \   000184   12....       LCALL   ??Subroutine34_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000187   601A         JZ      ??AF_DataRequest_14
    667              {
    668                req.profileID = srcEP->simpleDesc->AppProfId;
   \   000189   85..82       MOV     DPL,?V0
   \   00018C   85..83       MOV     DPH,?V1
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    669              }
    670            }
   \                     ??CrossCallReturnLabel_82:
   \   000195   A3           INC     DPTR
   \   000196   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000199   7411         MOV     A,#0x11
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   E8           MOV     A,R0
   \   00019F   F0           MOVX    @DPTR,A
   \   0001A0   A3           INC     DPTR
   \   0001A1   E9           MOV     A,R1
   \                     ??AF_DataRequest_10:
   \   0001A2   F0           MOVX    @DPTR,A
    671          
    672            req.txOptions = 0;
   \                     ??AF_DataRequest_14:
   \   0001A3   7417         MOV     A,#0x17
   \   0001A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A8   E4           CLR     A
   \   0001A9   F0           MOVX    @DPTR,A
   \   0001AA   A3           INC     DPTR
   \   0001AB   F0           MOVX    @DPTR,A
    673          
    674            if ( ( options & AF_ACK_REQUEST              ) &&
    675                 ( req.dstAddr.addrMode != AddrBroadcast ) &&
    676                 ( req.dstAddr.addrMode != AddrGroup     )    )
   \   0001AC   E5..         MOV     A,?V2
   \   0001AE   A2E4         MOV     C,0xE0 /* A   */.4
   \   0001B0   501A         JNC     ??AF_DataRequest_15
   \   0001B2   740A         MOV     A,#0xa
   \   0001B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   640F         XRL     A,#0xf
   \   0001BA   6010         JZ      ??AF_DataRequest_15
   \   0001BC   E0           MOVX    A,@DPTR
   \   0001BD   6401         XRL     A,#0x1
   \   0001BF   600B         JZ      ??AF_DataRequest_15
    677            {
    678              req.txOptions |=  APS_TX_OPTIONS_ACK;
   \   0001C1   7417         MOV     A,#0x17
   \   0001C3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C6   7404         MOV     A,#0x4
   \   0001C8   F0           MOVX    @DPTR,A
   \   0001C9   A3           INC     DPTR
   \   0001CA   E4           CLR     A
   \   0001CB   F0           MOVX    @DPTR,A
    679            }
    680          
    681            if ( options & AF_SKIP_ROUTING )
   \                     ??AF_DataRequest_15:
   \   0001CC   E5..         MOV     A,?V2
   \   0001CE   A2E7         MOV     C,0xE0 /* A   */.7
   \   0001D0   5009         JNC     ??AF_DataRequest_16
    682            {
    683              req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
   \   0001D2   7417         MOV     A,#0x17
   \   0001D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D7   E0           MOVX    A,@DPTR
   \   0001D8   4410         ORL     A,#0x10
   \   0001DA   F0           MOVX    @DPTR,A
    684            }
    685          
    686            if ( options & AF_EN_SECURITY )
   \                     ??AF_DataRequest_16:
   \   0001DB   E5..         MOV     A,?V2
   \   0001DD   A2E6         MOV     C,0xE0 /* A   */.6
   \   0001DF   5012         JNC     ??AF_DataRequest_17
    687            {
    688              req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
   \   0001E1   7417         MOV     A,#0x17
   \   0001E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   4401         ORL     A,#0x1
   \   0001E9   F0           MOVX    @DPTR,A
    689              mtu.aps.secure = TRUE;
   \   0001EA   7401         MOV     A,#0x1
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   7401         MOV     A,#0x1
   \   0001F1   8006         SJMP    ??AF_DataRequest_18
    690            }
    691            else
    692            {
    693              mtu.aps.secure = FALSE;
   \                     ??AF_DataRequest_17:
   \   0001F3   7401         MOV     A,#0x1
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   E4           CLR     A
   \                     ??AF_DataRequest_18:
   \   0001F9   F0           MOVX    @DPTR,A
    694            }
    695          
    696            if ( options & AF_PREPROCESS )
   \   0001FA   E5..         MOV     A,?V2
   \   0001FC   A2E2         MOV     C,0xE0 /* A   */.2
   \   0001FE   5009         JNC     ??AF_DataRequest_19
    697            {
    698              req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
   \   000200   7417         MOV     A,#0x17
   \   000202   12....       LCALL   ?XSTACK_DISP0_8
   \   000205   E0           MOVX    A,@DPTR
   \   000206   4440         ORL     A,#0x40
   \   000208   F0           MOVX    @DPTR,A
    699            }
    700          
    701            mtu.kvp = FALSE;
   \                     ??AF_DataRequest_19:
   \   000209   85..82       MOV     DPL,?XSP + 0
   \   00020C   85..83       MOV     DPH,?XSP + 1
   \   00020F   E4           CLR     A
   \   000210   F0           MOVX    @DPTR,A
    702          
    703            if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
   \   000211   E5..         MOV     A,?V2
   \   000213   A2E5         MOV     C,0xE0 /* A   */.5
   \   000215   5009         JNC     ??AF_DataRequest_20
    704            {
    705              req.discoverRoute = DISC_ROUTE_INITIATE;
   \   000217   741A         MOV     A,#0x1a
   \   000219   12....       LCALL   ?XSTACK_DISP0_8
   \   00021C   7404         MOV     A,#0x4
   \   00021E   800D         SJMP    ??AF_DataRequest_21
    706            }
    707            else
    708            {
    709              req.discoverRoute = AF_DataRequestDiscoverRoute;
   \                     ??AF_DataRequest_20:
   \   000220   90....       MOV     DPTR,#AF_DataRequestDiscoverRoute
   \   000223   E0           MOVX    A,@DPTR
   \   000224   C0E0         PUSH    A
   \   000226   741A         MOV     A,#0x1a
   \   000228   12....       LCALL   ?XSTACK_DISP0_8
   \   00022B   D0E0         POP     A
   \                     ??AF_DataRequest_21:
   \   00022D   F0           MOVX    @DPTR,A
   \   00022E   7434         MOV     A,#0x34
   \   000230   12....       LCALL   ?XSTACK_DISP0_8
   \   000233   E0           MOVX    A,@DPTR
   \   000234   F5..         MOV     ?V4,A
   \   000236   A3           INC     DPTR
   \   000237   E0           MOVX    A,@DPTR
   \   000238   F5..         MOV     ?V5,A
    710            }
    711          
    712            req.transID       = *transID;
   \   00023A   85..82       MOV     DPL,?V4
   \   00023D   F583         MOV     DPH,A
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   C0E0         PUSH    A
   \   000242   7419         MOV     A,#0x19
   \   000244   12....       LCALL   ?XSTACK_DISP0_8
   \   000247   D0E0         POP     A
   \   000249   12....       LCALL   ?Subroutine24 & 0xFFFF
    713            req.srcEP         = srcEP->endPoint;
   \                     ??CrossCallReturnLabel_37:
   \   00024C   C0E0         PUSH    A
   \   00024E   740B         MOV     A,#0xb
   \   000250   12....       LCALL   ?XSTACK_DISP0_8
   \   000253   D0E0         POP     A
   \   000255   12....       LCALL   ?Subroutine20 & 0xFFFF
    714            req.dstEP         = dstAddr->endPoint;
   \                     ??CrossCallReturnLabel_29:
   \   000258   A3           INC     DPTR
   \   000259   A3           INC     DPTR
   \   00025A   A3           INC     DPTR
   \   00025B   A3           INC     DPTR
   \   00025C   E0           MOVX    A,@DPTR
   \   00025D   C0E0         PUSH    A
   \   00025F   740C         MOV     A,#0xc
   \   000261   12....       LCALL   ?XSTACK_DISP0_8
   \   000264   D0E0         POP     A
   \   000266   F0           MOVX    @DPTR,A
    715            req.clusterID     = cID;
   \   000267   742E         MOV     A,#0x2e
   \   000269   12....       LCALL   ?XSTACK_DISP0_8
   \   00026C   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00026F   740F         MOV     A,#0xf
   \   000271   12....       LCALL   ?XSTACK_DISP0_8
   \   000274   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000277   7430         MOV     A,#0x30
   \   000279   12....       LCALL   ?XSTACK_DISP0_8
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   FE           MOV     R6,A
   \   00027E   A3           INC     DPTR
   \   00027F   E0           MOVX    A,@DPTR
   \   000280   FF           MOV     R7,A
    716            req.asduLen       = len;
   \   000281   7413         MOV     A,#0x13
   \   000283   12....       LCALL   ?XSTACK_DISP0_8
   \   000286   EE           MOV     A,R6
   \   000287   F0           MOVX    @DPTR,A
   \   000288   A3           INC     DPTR
   \   000289   EF           MOV     A,R7
   \   00028A   F0           MOVX    @DPTR,A
    717            req.asdu          = buf;
   \   00028B   7432         MOV     A,#0x32
   \   00028D   12....       LCALL   ?XSTACK_DISP0_8
   \   000290   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000293   7415         MOV     A,#0x15
   \   000295   12....       LCALL   ?XSTACK_DISP0_8
   \   000298   12....       LCALL   ??Subroutine36_0 & 0xFFFF
    718            req.radiusCounter = radius;
   \                     ??CrossCallReturnLabel_75:
   \   00029B   7436         MOV     A,#0x36
   \   00029D   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A0   E0           MOVX    A,@DPTR
   \   0002A1   C0E0         PUSH    A
   \   0002A3   741B         MOV     A,#0x1b
   \   0002A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002A8   D0E0         POP     A
   \   0002AA   12....       LCALL   ?Subroutine24 & 0xFFFF
    719          #if defined ( INTER_PAN )
    720            req.dstPanId      = dstAddr->panId;
    721          #endif // INTER_PAN
    722          
    723            // Look if there is a Callback function registered for this endpoint
    724            // The callback is used to control the AF Transaction ID used when sending messages
    725            pList = afFindEndPointDescList( srcEP->endPoint );
   \                     ??CrossCallReturnLabel_38:
   \   0002AD   F9           MOV     R1,A
   \   0002AE   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   0002B1   8A..         MOV     ?V6,R2
   \   0002B3   8B..         MOV     ?V7,R3
   \   0002B5   AC..         MOV     R4,?V6
   \   0002B7   AD..         MOV     R5,?V7
    726          
    727            if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
   \   0002B9   EC           MOV     A,R4
   \   0002BA   4D           ORL     A,R5
   \   0002BB   6026         JZ      ??AF_DataRequest_22
   \   0002BD   8C82         MOV     DPL,R4
   \   0002BF   8D83         MOV     DPH,R5
   \   0002C1   A3           INC     DPTR
   \   0002C2   A3           INC     DPTR
   \   0002C3   A3           INC     DPTR
   \   0002C4   A3           INC     DPTR
   \   0002C5   A3           INC     DPTR
   \   0002C6   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0002C9   6018         JZ      ??AF_DataRequest_22
    728            {
    729              pList->pfnApplCB( &req );
   \   0002CB                ; Setup parameters for indirect call
   \   0002CB   7402         MOV     A,#0x2
   \   0002CD   12....       LCALL   ?XSTACK_DISP101_8
   \   0002D0   8C82         MOV     DPL,R4
   \   0002D2   8D83         MOV     DPH,R5
   \   0002D4   A3           INC     DPTR
   \   0002D5   A3           INC     DPTR
   \   0002D6   A3           INC     DPTR
   \   0002D7   A3           INC     DPTR
   \   0002D8   A3           INC     DPTR
   \   0002D9   A3           INC     DPTR
   \   0002DA   A3           INC     DPTR
   \   0002DB   A3           INC     DPTR
   \   0002DC   A3           INC     DPTR
   \   0002DD   12....       LCALL   ??Subroutine38_0 & 0xFFFF
    730            }
   \                     ??CrossCallReturnLabel_83:
   \   0002E0   12....       LCALL   ?CALL_IND
    731          
    732          #if defined ( INTER_PAN )
    733            if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
    734            {
    735              if ( len > INTERP_DataReqMTU() )
    736              {
    737                stat = afStatus_INVALID_PARAMETER;
    738              }
    739              else
    740              {
    741                stat = INTERP_DataReq( &req );
    742              }
    743            }
    744            else
    745          #endif // INTER_PAN
    746            {
    747              if (len > afDataReqMTU( &mtu ) )
   \                     ??AF_DataRequest_22:
   \   0002E3                ; Setup parameters for call to function afDataReqMTU
   \   0002E3   AA..         MOV     R2,?XSP + 0
   \   0002E5   AB..         MOV     R3,?XSP + 1
   \   0002E7   12....       LCALL   `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
   \   0002EA   E9           MOV     A,R1
   \   0002EB   C3           CLR     C
   \   0002EC   9E           SUBB    A,R6
   \   0002ED   E4           CLR     A
   \   0002EE   9F           SUBB    A,R7
   \   0002EF   5019         JNC     ??AF_DataRequest_23
    748              {
    749                if (apsfSendFragmented)
   \   0002F1   90....       MOV     DPTR,#apsfSendFragmented
   \   0002F4   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0002F7   600D         JZ      ??AF_DataRequest_24
    750                {
    751                  stat = (*apsfSendFragmented)( &req );
   \   0002F9                ; Setup parameters for indirect call
   \   0002F9   7402         MOV     A,#0x2
   \   0002FB   12....       LCALL   ?XSTACK_DISP101_8
   \   0002FE   12....       LCALL   ??Subroutine39_0 & 0xFFFF
    752                }
   \                     ??CrossCallReturnLabel_79:
   \   000301   12....       LCALL   ?CALL_IND
   \   000304   800C         SJMP    ??AF_DataRequest_25
    753                else
    754                {
    755                  stat = afStatus_INVALID_PARAMETER;
   \                     ??AF_DataRequest_24:
   \   000306   7E02         MOV     R6,#0x2
   \   000308   800A         SJMP    ??AF_DataRequest_26
    756                }
    757              }
    758              else
    759              {
    760                stat = APSDE_DataReq( &req );
   \                     ??AF_DataRequest_23:
   \   00030A                ; Setup parameters for call to function APSDE_DataReq
   \   00030A   7402         MOV     A,#0x2
   \   00030C   12....       LCALL   ?XSTACK_DISP101_8
   \   00030F   12....       LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
   \                     ??AF_DataRequest_25:
   \   000312   E9           MOV     A,R1
   \   000313   FE           MOV     R6,A
    761              }
    762            }
    763          
    764            /*
    765             * If this is an EndPoint-to-EndPoint message on the same device, it will not
    766             * get added to the NWK databufs. So it will not go OTA and it will not get
    767             * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
    768             * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
    769             * message with the first in line TransSeqNumber, even on a multi message.
    770             * Also note that a reflected msg will not have its confirmation generated
    771             * here.
    772             */
    773            if ( (req.dstAddr.addrMode == Addr16Bit) &&
    774                 (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
   \                     ??AF_DataRequest_26:
   \   000314   740A         MOV     A,#0xa
   \   000316   12....       LCALL   ?XSTACK_DISP0_8
   \   000319   E0           MOVX    A,@DPTR
   \   00031A   6402         XRL     A,#0x2
   \   00031C   702E         JNZ     ??AF_DataRequest_27
   \   00031E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00031E   12....       LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
   \   000321   8A..         MOV     ?V6,R2
   \   000323   8B..         MOV     ?V7,R3
   \   000325   A8..         MOV     R0,?V6
   \   000327   A9..         MOV     R1,?V7
   \   000329   7402         MOV     A,#0x2
   \   00032B   12....       LCALL   ?XSTACK_DISP0_8
   \   00032E   E0           MOVX    A,@DPTR
   \   00032F   68           XRL     A,R0
   \   000330   7003         JNZ     ??AF_DataRequest_28
   \   000332   A3           INC     DPTR
   \   000333   E0           MOVX    A,@DPTR
   \   000334   69           XRL     A,R1
   \                     ??AF_DataRequest_28:
   \   000335   7015         JNZ     ??AF_DataRequest_27
    775            {
    776          
    777              afDataConfirm( srcEP->endPoint, *transID, stat );
   \   000337                ; Setup parameters for call to function afDataConfirm
   \   000337   EE           MOV     A,R6
   \   000338   FB           MOV     R3,A
   \   000339   85..82       MOV     DPL,?V4
   \   00033C   85..83       MOV     DPH,?V5
   \   00033F   E0           MOVX    A,@DPTR
   \   000340   FA           MOV     R2,A
   \   000341   85..82       MOV     DPL,?V0
   \   000344   85..83       MOV     DPH,?V1
   \   000347   E0           MOVX    A,@DPTR
   \   000348   F9           MOV     R1,A
   \   000349   12....       LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
    778            }
    779          
    780            if ( stat == afStatus_SUCCESS )
   \                     ??AF_DataRequest_27:
   \   00034C   EE           MOV     A,R6
   \   00034D   7009         JNZ     ??AF_DataRequest_29
    781            {
    782              (*transID)++;
   \   00034F   85..82       MOV     DPL,?V4
   \   000352   85..83       MOV     DPH,?V5
   \   000355   E0           MOVX    A,@DPTR
   \   000356   04           INC     A
   \   000357   F0           MOVX    @DPTR,A
    783            }
    784          
    785            return (afStatus_t)stat;
   \                     ??AF_DataRequest_29:
   \   000358   EE           MOV     A,R6
   \   000359   F9           MOV     R1,A
   \                     ??AF_DataRequest_3:
   \   00035A   741E         MOV     A,#0x1e
   \   00035C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00035F   7F08         MOV     R7,#0x8
   \   000361   02....       LJMP    ?BANKED_LEAVE_XDATA
    786          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   6403         XRL     A,#0x3
   \   000006   22           RET
    787          
    788          #if defined ( ZIGBEE_SOURCE_ROUTING )
    789          /*********************************************************************
    790           * @fn      AF_DataRequestSrcRtg
    791           *
    792           * @brief   Common functionality for invoking APSDE_DataReq() for both
    793           *          SendMulti and MSG-Send.
    794           *
    795           * input parameters
    796           *
    797           * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
    798           * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
    799           * @param   cID - A valid cluster ID as specified by the Profile.
    800           * @param   len - Number of bytes of data pointed to by next param.
    801           * @param  *buf - A pointer to the data bytes to send.
    802           * @param  *transID - A pointer to a byte which can be modified and which will
    803           *                    be used as the transaction sequence number of the msg.
    804           * @param   options - Valid bit mask of Tx options.
    805           * @param   radius - Normally set to AF_DEFAULT_RADIUS.
    806           * @param   relayCnt - Number of devices in the relay list
    807           * @param   pRelayList - Pointer to the relay list
    808           *
    809           * output parameters
    810           *
    811           * @param  *transID - Incremented by one if the return value is success.
    812           *
    813           * @return  afStatus_t - See previous definition of afStatus_... types.
    814           */
    815          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    816          afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
   \                     AF_DataRequestSrcRtg:
    817                                     uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
    818                                     uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
    819          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0,R4
   \   00000B   8D..         MOV     ?V1,R5
   \   00000D   89..         MOV     ?V2,R1
    820            uint8 status;
    821          
    822            /* Add the source route to the source routing table */
    823            status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
    824                                                   pRelayList );
   \   00000F                ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000017   7415         MOV     A,#0x15
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F9           MOV     R1,A
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000025   12....       LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
   \   000028   E9           MOV     A,R1
   \   000029   F9           MOV     R1,A
    825          
    826            if( status == RTG_SUCCESS)
   \   00002A   7043         JNZ     ??AF_DataRequestSrcRtg_0
    827            {
    828              /* Call AF_DataRequest to send the data */
    829              status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
   \   00002C                ; Setup parameters for call to function AF_DataRequest
   \   00002C   7414         MOV     A,#0x14
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F5..         MOV     ?V3,A
   \   000034   78..         MOV     R0,#?V3
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   7413         MOV     A,#0x13
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000041   7413         MOV     A,#0x13
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000049   7413         MOV     A,#0x13
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000051   7413         MOV     A,#0x13
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000059   A9..         MOV     R1,?V2
   \   00005B   AC..         MOV     R4,?V0
   \   00005D   AD..         MOV     R5,?V1
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   FB           MOV     R3,A
   \   000063   12....       LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
   \   000066   7409         MOV     A,#0x9
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006B   E9           MOV     A,R1
   \   00006C   F9           MOV     R1,A
   \   00006D   800B         SJMP    ??AF_DataRequestSrcRtg_1
    830            }
    831            else if( status == RTG_INVALID_PATH )
   \                     ??AF_DataRequestSrcRtg_0:
   \   00006F   7405         MOV     A,#0x5
   \   000071   69           XRL     A,R1
   \   000072   7004         JNZ     ??AF_DataRequestSrcRtg_2
    832            {
    833              /* The source route relay count is exceeding the network limit */
    834              status = afStatus_INVALID_PARAMETER;
   \   000074   7902         MOV     R1,#0x2
   \   000076   8002         SJMP    ??AF_DataRequestSrcRtg_1
    835            }
    836            else
    837            {
    838              /* The guaranteed adding entry fails due to memory failure */
    839              status = afStatus_MEM_FAIL;
   \                     ??AF_DataRequestSrcRtg_2:
   \   000078   7910         MOV     R1,#0x10
    840            }
    841            return status;
   \                     ??AF_DataRequestSrcRtg_1:
   \   00007A   02....       LJMP    ?Subroutine0 & 0xFFFF
    842          }
    843          
    844          #endif
    845          
    846          /*********************************************************************
    847           * @fn      afFindEndPointDescList
    848           *
    849           * @brief   Find the endpoint description entry from the endpoint
    850           *          number.
    851           *
    852           * @param   EndPoint - Application Endpoint to look for
    853           *
    854           * @return  the address to the endpoint/interface description entry
    855           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    856          static epList_t *afFindEndPointDescList( uint8 EndPoint )
   \                     afFindEndPointDescList:
    857          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    858            epList_t *epSearch;
    859          
    860            for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
   \   000004   90....       MOV     DPTR,#epList
   \   000007   8004         SJMP    ??afFindEndPointDescList_0
   \                     ??afFindEndPointDescList_1:
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \                     ??afFindEndPointDescList_0:
   \   00000D   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000010   600B         JZ      ??afFindEndPointDescList_2
    861            {
    862              if (epSearch->epDesc->endPoint == EndPoint)
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   12....       LCALL   ??Subroutine37_0 & 0xFFFF
    863              {
    864                break;
    865              }
    866            }
   \                     ??CrossCallReturnLabel_84:
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   69           XRL     A,R1
   \   00001B   70EC         JNZ     ??afFindEndPointDescList_1
    867          
    868            return epSearch;
   \                     ??afFindEndPointDescList_2:
   \   00001D                REQUIRE ?Subroutine3
   \   00001D                ; // Fall through to label ?Subroutine3
    869          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F8           MOV     R0,A
   \   000004                REQUIRE ??Subroutine38_0
   \   000004                ; // Fall through to label ??Subroutine38_0
    870          
    871          /*********************************************************************
    872           * @fn      afFindEndPointDesc
    873           *
    874           * @brief   Find the endpoint description entry from the endpoint
    875           *          number.
    876           *
    877           * @param   EndPoint - Application Endpoint to look for
    878           *
    879           * @return  the address to the endpoint/interface description entry
    880           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    881          endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
   \                     afFindEndPointDesc:
    882          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    883            epList_t *epSearch;
    884          
    885            // Look for the endpoint
    886            epSearch = afFindEndPointDescList( EndPoint );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
    887          
    888            if ( epSearch )
   \   00000C   E582         MOV     A,DPL
   \   00000E   4583         ORL     A,DPH
   \   000010   6005         JZ      ??afFindEndPointDesc_0
    889              return ( epSearch->epDesc );
   \   000012   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000015   8004         SJMP    ??afFindEndPointDesc_1
    890            else
    891              return ( (endPointDesc_t *)NULL );
   \                     ??afFindEndPointDesc_0:
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \                     ??afFindEndPointDesc_1:
   \   00001B   02....       LJMP    ?Subroutine1 & 0xFFFF
    892          }
    893          
    894          /*********************************************************************
    895           * @fn      afFindSimpleDesc
    896           *
    897           * @brief   Find the Simple Descriptor from the endpoint number.
    898           *
    899           * @param   EP - Application Endpoint to look for.
    900           *
    901           * @return  Non-zero to indicate that the descriptor memory must be freed.
    902           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004                REQUIRE ??Subroutine37_0
   \   000004                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    903          uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
   \                     afFindSimpleDesc:
    904          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0,R1
    905            epList_t *epItem = afFindEndPointDescList( EP );
   \   00000B                ; Setup parameters for call to function afFindEndPointDescList
   \   00000B   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000E   8A..         MOV     ?V2,R2
   \   000010   8B..         MOV     ?V3,R3
   \   000012   AC..         MOV     R4,?V2
   \   000014   AD..         MOV     R5,?V3
    906            uint8 rtrn = FALSE;
   \   000016   7900         MOV     R1,#0x0
    907          
    908            if ( epItem )
   \   000018   EC           MOV     A,R4
   \   000019   4D           ORL     A,R5
   \   00001A   6039         JZ      ??afFindSimpleDesc_0
    909            {
    910              if ( epItem->pfnDescCB )
   \   00001C   8C82         MOV     DPL,R4
   \   00001E   8D83         MOV     DPH,R5
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000027   601C         JZ      ??afFindSimpleDesc_1
    911              {
    912                *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
   \   000029                ; Setup parameters for indirect call
   \   000029   AA..         MOV     R2,?V0
   \   00002B   09           INC     R1
   \   00002C   8C82         MOV     DPL,R4
   \   00002E   8D83         MOV     DPH,R5
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   12....       LCALL   ??Subroutine37_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000035   12....       LCALL   ?CALL_IND
   \   000038   8E82         MOV     DPL,R6
   \   00003A   8F83         MOV     DPH,R7
   \   00003C   EA           MOV     A,R2
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   EB           MOV     A,R3
   \   000040   F0           MOVX    @DPTR,A
    913                rtrn = TRUE;
   \   000041   7901         MOV     R1,#0x1
   \   000043   8018         SJMP    ??afFindSimpleDesc_2
    914              }
    915              else
    916              {
    917                *ppDesc = epItem->epDesc->simpleDesc;
   \                     ??afFindSimpleDesc_1:
   \   000045   12....       LCALL   ?Subroutine9 & 0xFFFF
    918              }
    919            }
   \                     ??CrossCallReturnLabel_86:
   \   000048   12....       LCALL   ??Subroutine40_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   EA           MOV     A,R2
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   EB           MOV     A,R3
   \   000053   8007         SJMP    ??afFindSimpleDesc_3
    920            else
    921            {
    922              *ppDesc = NULL;
   \                     ??afFindSimpleDesc_0:
   \   000055   8E82         MOV     DPL,R6
   \   000057   8F83         MOV     DPH,R7
   \   000059   E4           CLR     A
   \   00005A   F0           MOVX    @DPTR,A
   \   00005B   A3           INC     DPTR
   \                     ??afFindSimpleDesc_3:
   \   00005C   F0           MOVX    @DPTR,A
    923            }
    924          
    925            return rtrn;
   \                     ??afFindSimpleDesc_2:
   \   00005D   02....       LJMP    ?Subroutine0 & 0xFFFF
    926          }
    927          
    928          /*********************************************************************
    929           * @fn      afGetDescCB
    930           *
    931           * @brief   Get the Descriptor callback function.
    932           *
    933           * @param   epDesc - pointer to the endpoint descriptor
    934           *
    935           * @return  function pointer or NULL
    936           */
    937          static pDescCB afGetDescCB( endPointDesc_t *epDesc )
    938          {
    939            epList_t *epSearch;
    940          
    941            // Start at the beginning
    942            epSearch = epList;
    943          
    944            // Look through the list until the end
    945            while ( epSearch )
    946            {
    947              // Is there a match?
    948              if ( epSearch->epDesc == epDesc )
    949              {
    950                return ( epSearch->pfnDescCB );
    951              }
    952              else
    953                epSearch = epSearch->nextDesc;  // Next entry
    954            }
    955          
    956            return ( (pDescCB)NULL );
    957          }
    958          
    959          /*********************************************************************
    960           * @fn      afDataReqMTU
    961           *
    962           * @brief   Get the Data Request MTU(Max Transport Unit).
    963           *
    964           * @param   fields - afDataReqMTU_t
    965           *
    966           * @return  uint8(MTU)
    967           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    968          uint8 afDataReqMTU( afDataReqMTU_t* fields )
   \                     afDataReqMTU:
    969          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    970            uint8 len;
    971            uint8 hdr;
    972          
    973            if ( fields->kvp == TRUE )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   6401         XRL     A,#0x1
   \   00000C   7004         JNZ     ??afDataReqMTU_0
    974            {
    975              hdr = AF_HDR_KVP_MAX_LEN;
   \   00000E   7E08         MOV     R6,#0x8
   \   000010   8002         SJMP    ??afDataReqMTU_1
    976            }
    977            else
    978            {
    979              hdr = AF_HDR_V1_1_MAX_LEN;
   \                     ??afDataReqMTU_0:
   \   000012   7E00         MOV     R6,#0x0
    980            }
    981          
    982            len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
    983          
    984            return len;
   \                     ??afDataReqMTU_1:
   \   000014                ; Setup parameters for call to function APSDE_DataReqMTU
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   12....       LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
   \   00001C   E9           MOV     A,R1
   \   00001D   C3           CLR     C
   \   00001E   9E           SUBB    A,R6
   \   00001F   F9           MOV     R1,A
   \   000020   02....       LJMP    ?Subroutine2 & 0xFFFF
    985          }
    986          
    987          /*********************************************************************
    988           * @fn      afGetMatch
    989           *
    990           * @brief   Set the allow response flag.
    991           *
    992           * @param   ep - Application Endpoint to look for
    993           * @param   action - true - allow response, false - no response
    994           *
    995           * @return  TRUE allow responses, FALSE no response
    996           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    997          uint8 afGetMatch( uint8 ep )
   \                     afGetMatch:
    998          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    999            epList_t *epSearch;
   1000          
   1001            // Look for the endpoint
   1002            epSearch = afFindEndPointDescList( ep );
   \   000005                ; Setup parameters for call to function afFindEndPointDescList
   \   000005   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   1003          
   1004            if ( epSearch )
   \   00000C   E582         MOV     A,DPL
   \   00000E   4583         ORL     A,DPH
   \   000010   6011         JZ      ??afGetMatch_0
   1005            {
   1006              if ( epSearch->flags & eEP_AllowMatch )
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001D   5004         JNC     ??afGetMatch_0
   1007                return ( TRUE );
   \   00001F   7901         MOV     R1,#0x1
   \   000021   8002         SJMP    ??afGetMatch_1
   1008              else
   1009                return ( FALSE );
   1010            }
   1011            else
   1012              return ( FALSE );
   \                     ??afGetMatch_0:
   \   000023   7900         MOV     R1,#0x0
   \                     ??afGetMatch_1:
   \   000025                REQUIRE ?Subroutine1
   \   000025                ; // Fall through to label ?Subroutine1
   1013          }
   1014          
   1015          /*********************************************************************
   1016           * @fn      afSetMatch
   1017           *
   1018           * @brief   Set the allow response flag.
   1019           *
   1020           * @param   ep - Application Endpoint to look for
   1021           * @param   action - true - allow response, false - no response
   1022           *
   1023           * @return  TRUE if success, FALSE if endpoint not found
   1024           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1025          uint8 afSetMatch( uint8 ep, uint8 action )
   \                     afSetMatch:
   1026          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FF           MOV     R7,A
   1027            epList_t *epSearch;
   1028          
   1029            // Look for the endpoint
   1030            epSearch = afFindEndPointDescList( ep );
   \   000007                ; Setup parameters for call to function afFindEndPointDescList
   \   000007   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   1031          
   1032            if ( epSearch )
   \   00000E   E582         MOV     A,DPL
   \   000010   4583         ORL     A,DPH
   \   000012   6018         JZ      ??afSetMatch_0
   1033            {
   1034              if ( action )
   \   000014   EF           MOV     A,R7
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   6005         JZ      ??afSetMatch_1
   1035              {
   1036                epSearch->flags |= eEP_AllowMatch;
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   D2E0         SETB    0xE0 /* A   */.0
   \   000022   8003         SJMP    ??afSetMatch_2
   1037              }
   1038              else
   1039              {
   1040                epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
   \                     ??afSetMatch_1:
   \   000024   E0           MOVX    A,@DPTR
   \   000025   C2E0         CLR     0xE0 /* A   */.0
   \                     ??afSetMatch_2:
   \   000027   F0           MOVX    @DPTR,A
   1041              }
   1042              return ( TRUE );
   \   000028   7901         MOV     R1,#0x1
   \   00002A   8002         SJMP    ??afSetMatch_3
   1043            }
   1044            else
   1045              return ( FALSE );
   \                     ??afSetMatch_0:
   \   00002C   7900         MOV     R1,#0x0
   \                     ??afSetMatch_3:
   \   00002E   80..         SJMP    ?Subroutine1
   1046          }
   1047          
   1048          /*********************************************************************
   1049           * @fn      afNumEndPoints
   1050           *
   1051           * @brief   Returns the number of endpoints defined (including 0)
   1052           *
   1053           * @param   none
   1054           *
   1055           * @return  number of endpoints
   1056           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1057          uint8 afNumEndPoints( void )
   \                     afNumEndPoints:
   1058          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1059            epList_t *epSearch;
   1060            uint8 endpoints;
   1061          
   1062            // Start at the beginning
   1063            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   12....       LCALL   ?Subroutine13 & 0xFFFF
   1064            endpoints = 0;
   \                     ??CrossCallReturnLabel_18:
   \   00000A   7900         MOV     R1,#0x0
   \   00000C   8008         SJMP    ??afNumEndPoints_0
   1065          
   1066            while ( epSearch )
   1067            {
   1068              endpoints++;
   \                     ??afNumEndPoints_1:
   \   00000E   09           INC     R1
   1069              epSearch = epSearch->nextDesc;
   \   00000F   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   1070            }
   \                     ??CrossCallReturnLabel_92:
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \                     ??afNumEndPoints_0:
   \   000016   E582         MOV     A,DPL
   \   000018   4583         ORL     A,DPH
   \   00001A   70F2         JNZ     ??afNumEndPoints_1
   1071          
   1072            return ( endpoints );
   \   00001C   02....       LJMP    ?Subroutine3 & 0xFFFF
   1073          }
   1074          
   1075          /*********************************************************************
   1076           * @fn      afEndPoints
   1077           *
   1078           * @brief   Fills in the passed in buffer with the endpoint (numbers).
   1079           *          Use afNumEndPoints to find out how big a buffer to supply.
   1080           *
   1081           * @param   epBuf - pointer to mem used
   1082           *
   1083           * @return  void
   1084           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1085          void afEndPoints( uint8 *epBuf, uint8 skipZDO )
   \                     afEndPoints:
   1086          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1087            epList_t *epSearch;
   1088            uint8 endPoint;
   1089          
   1090            // Start at the beginning
   1091            epSearch = epList;
   \   000004   90....       MOV     DPTR,#epList
   \   000007   801A         SJMP    ??afEndPoints_0
   1092          
   1093            while ( epSearch )
   1094            {
   1095              endPoint = epSearch->epDesc->endPoint;
   \                     ??afEndPoints_1:
   \   000009   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   1096          
   1097              if ( !skipZDO || endPoint != 0 )
   \   00000E   E9           MOV     A,R1
   \   00000F   6003         JZ      ??afEndPoints_2
   \   000011   E8           MOV     A,R0
   \   000012   600B         JZ      ??afEndPoints_3
   1098                *epBuf++ = endPoint;
   \                     ??afEndPoints_2:
   \   000014   E8           MOV     A,R0
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   AA82         MOV     R2,DPL
   \   00001D   AB83         MOV     R3,DPH
   1099          
   1100              epSearch = epSearch->nextDesc;
   \                     ??afEndPoints_3:
   \   00001F   8C82         MOV     DPL,R4
   \   000021   8D83         MOV     DPH,R5
   1101            }
   \                     ??afEndPoints_0:
   \   000023   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000026   EC           MOV     A,R4
   \   000027   4D           ORL     A,R5
   \   000028   70DF         JNZ     ??afEndPoints_1
   1102          }
   \   00002A   02....       LJMP    ?Subroutine3 & 0xFFFF
   1103          
   1104          /*********************************************************************
   1105           * @fn      afCopyAddress
   1106           *
   1107           * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
   1108           *          from the zAddrType_t parameter.
   1109           *
   1110           * @param   epBuf - pointer to mem used
   1111           *
   1112           * @return  void
   1113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1114          void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
   \                     afCopyAddress:
   1115          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1116            afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
   \   000009   EC           MOV     A,R4
   \   00000A   2408         ADD     A,#0x8
   \   00000C   F8           MOV     R0,A
   \   00000D   E4           CLR     A
   \   00000E   3D           ADDC    A,R5
   \   00000F   F9           MOV     R1,A
   \   000010   8882         MOV     DPL,R0
   \   000012   8983         MOV     DPH,R1
   \   000014   E0           MOVX    A,@DPTR
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ?Subroutine25 & 0xFFFF
   1117            if ( zAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_40:
   \   000024   7005         JNZ     ??afCopyAddress_0
   1118            {
   1119              (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
   \   000026                ; Setup parameters for call to function sAddrExtCpy
   \   000026   12....       LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
   \   000029   800E         SJMP    ??CrossCallReturnLabel_76
   1120            }
   1121            else
   1122            {
   1123              afAddr->addr.shortAddr = zAddr->addr.shortAddr;
   \                     ??afCopyAddress_0:
   \   00002B   8C82         MOV     DPL,R4
   \   00002D   8D83         MOV     DPH,R5
   \   00002F   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   1124            }
   \                     ??CrossCallReturnLabel_103:
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   12....       LCALL   ??Subroutine36_0 & 0xFFFF
   1125          
   1126            // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
   1127            afAddr->panId = 0;
   \                     ??CrossCallReturnLabel_76:
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   F0           MOVX    @DPTR,A
   1128          }
   \   00004B   02....       LJMP    ?Subroutine2 & 0xFFFF
   1129          
   1130          /**************************************************************************************************
   1131           * @fn          afAPSF_ConfigGet
   1132           *
   1133           * @brief       This function ascertains the fragmentation configuration that corresponds to
   1134           *              the specified EndPoint.
   1135           *
   1136           * input parameters
   1137           *
   1138           * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
   1139           *
   1140           * output parameters
   1141           *
   1142           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1143           *
   1144           * @return      None.
   1145           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1146          void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigGet:
   1147          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1148            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   A8..         MOV     R0,?V0
   \   000012   A9..         MOV     R1,?V1
   1149          
   1150            if (pList == NULL)
   \   000014   E8           MOV     A,R0
   \   000015   49           ORL     A,R1
   \   000016   700D         JNZ     ??afAPSF_ConfigGet_0
   1151            {
   1152              pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
   \   000018   8E82         MOV     DPL,R6
   \   00001A   8F83         MOV     DPH,R7
   \   00001C   7432         MOV     A,#0x32
   \   00001E   F0           MOVX    @DPTR,A
   1153              pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
   \   00001F   A3           INC     DPTR
   \   000020   7401         MOV     A,#0x1
   \   000022   F0           MOVX    @DPTR,A
   \   000023   8021         SJMP    ??afAPSF_ConfigGet_1
   1154            }
   1155            else
   1156            {
   1157              (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigGet_0:
   \   000025                ; Setup parameters for call to function osal_memcpy
   \   000025   E8           MOV     A,R0
   \   000026   2406         ADD     A,#0x6
   \   000028   F5..         MOV     ?V0,A
   \   00002A   E4           CLR     A
   \   00002B   39           ADDC    A,R1
   \   00002C   F5..         MOV     ?V1,A
   \   00002E   75..00       MOV     ?V2,#0x0
   \   000031   78..         MOV     R0,#?V0
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000036   7C02         MOV     R4,#0x2
   \   000038   7D00         MOV     R5,#0x0
   \   00003A   EE           MOV     A,R6
   \   00003B   FA           MOV     R2,A
   \   00003C   EF           MOV     A,R7
   \   00003D   FB           MOV     R3,A
   \   00003E   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   000041   7403         MOV     A,#0x3
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   1158            }
   1159          }
   \                     ??afAPSF_ConfigGet_1:
   \   000046                REQUIRE ?Subroutine0
   \   000046                ; // Fall through to label ?Subroutine0
   1160          
   1161          /**************************************************************************************************
   1162           * @fn          afAPSF_ConfigSet
   1163           *
   1164           * @brief       This function attempts to set the fragmentation configuration that corresponds to
   1165           *              the specified EndPoint.
   1166           *
   1167           * input parameters
   1168           *
   1169           * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
   1170           * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
   1171           *
   1172           * output parameters
   1173           *
   1174           * None.
   1175           *
   1176           * @return      afStatus_SUCCESS for success.
   1177           *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
   1178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1179          afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
   \                     afAPSF_ConfigSet:
   1180          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1181            epList_t *pList = afFindEndPointDescList(endPoint);
   \   000009                ; Setup parameters for call to function afFindEndPointDescList
   \   000009   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   1182          
   1183            if (pList == NULL)
   \   00000C   EA           MOV     A,R2
   \   00000D   4B           ORL     A,R3
   \   00000E   7004         JNZ     ??afAPSF_ConfigSet_0
   1184            {
   1185              return afStatus_INVALID_PARAMETER;
   \   000010   7902         MOV     R1,#0x2
   \   000012   8021         SJMP    ??afAPSF_ConfigSet_1
   1186            }
   1187          
   1188            (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
   \                     ??afAPSF_ConfigSet_0:
   \   000014                ; Setup parameters for call to function osal_memcpy
   \   000014   8E..         MOV     ?V0,R6
   \   000016   8F..         MOV     ?V1,R7
   \   000018   75..00       MOV     ?V2,#0x0
   \   00001B   78..         MOV     R0,#?V0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000020   7C02         MOV     R4,#0x2
   \   000022   7D00         MOV     R5,#0x0
   \   000024   EA           MOV     A,R2
   \   000025   2406         ADD     A,#0x6
   \   000027   FA           MOV     R2,A
   \   000028   5001         JNC     ??afAPSF_ConfigSet_2
   \   00002A   0B           INC     R3
   \                     ??afAPSF_ConfigSet_2:
   \   00002B   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   00002E   7403         MOV     A,#0x3
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   1189            return afStatus_SUCCESS;
   \   000033   7900         MOV     R1,#0x0
   \                     ??afAPSF_ConfigSet_1:
   \   000035   80..         SJMP    ?Subroutine0
   1190          }
   1191          
   1192          /**************************************************************************************************
   1193           * @fn          afSetApplCB
   1194           *
   1195           * @brief       Sets the pointer to the Application Callback function for a
   1196           *              specific EndPoint.
   1197           *
   1198           * input parameters
   1199           *
   1200           * @param       endPoint - The specific EndPoint for which to set Application Callback.
   1201           * @param       pApplFn - A pointer to the Application Callback function.
   1202           *
   1203           * output parameters
   1204           *
   1205           * None.
   1206           *
   1207           * @return      TRUE if success, FALSE if endpoint not found
   1208           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1209          uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
   \                     afSetApplCB:
   1210          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1211            if ( pApplFn != NULL )
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   601F         JZ      ??afSetApplCB_0
   1212            {
   1213              epList_t *epSearch;
   1214          
   1215              // Look for the endpoint
   1216              epSearch = afFindEndPointDescList( endPoint );
   \   00000D                ; Setup parameters for call to function afFindEndPointDescList
   \   00000D   12....       LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
   \   000010   8A82         MOV     DPL,R2
   \   000012   8B83         MOV     DPH,R3
   1217          
   1218              if ( epSearch )
   \   000014   E582         MOV     A,DPL
   \   000016   4583         ORL     A,DPH
   \   000018   6012         JZ      ??afSetApplCB_0
   1219              {
   1220                epSearch->pfnApplCB = pApplFn;
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
   1221          
   1222                return ( TRUE );
   \   000028   7901         MOV     R1,#0x1
   \   00002A   8002         SJMP    ??afSetApplCB_1
   1223              }
   1224            }
   1225          
   1226            return ( FALSE );
   \                     ??afSetApplCB_0:
   \   00002C   7900         MOV     R1,#0x0
   \                     ??afSetApplCB_1:
   \   00002E   80..         SJMP    ?Subroutine0
   1227          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AF_DataRequestDiscoverRoute>`:
   \   000000   01           DB 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegisterExtended::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegisterExtended

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afRegister::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afRegister

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDelete::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDelete

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afReflectError::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afReflectError

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afIncomingData::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afIncomingData

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afBuildMSGIncoming::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afBuildMSGIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequest::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??AF_DataRequestSrcRtg::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AF_DataRequestSrcRtg

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDescList::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDescList

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindEndPointDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindEndPointDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afFindSimpleDesc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afFindSimpleDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afDataReqMTU::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afDataReqMTU

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afGetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afGetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetMatch::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetMatch

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afNumEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afNumEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afEndPoints::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afEndPoints

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afCopyAddress::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afCopyAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigGet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigGet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afAPSF_ConfigSet::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afAPSF_ConfigSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??afSetApplCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    afSetApplCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\r\\n[afreflector]: ">`:
   \   000000   0D0A5B61     DB "\015\012[afreflector]: "
   \            66726566
   \            6C656374
   \            6F725D3A
   \            2000    
   1228          
   1229          /**************************************************************************************************
   1230          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      1     67   AF_DataRequest
        0     46   -> APSDE_DataReq
        0     46   -> NLME_GetShortAddr
        0     46   -> NLME_IsAddressBroadcast
        0     46   -> RTG_CheckRtStatus
        0     46   -> afDataConfirm
        0     46   -> afDataReqMTU
        0     46   -> afFindEndPointDescList
        0     46   -> osal_mem_free
        0     46   -> sAddrExtCpy
      0     33   AF_DataRequestSrcRtg
        0     21   -> AF_DataRequest
        0     12   -> RTG_AddSrcRtgEntry_Guaranteed
      0     15   afAPSF_ConfigGet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      0     15   afAPSF_ConfigSet
        0     12   -> afFindEndPointDescList
        0     15   -> osal_memcpy
      1     62   afBuildMSGIncoming
        0     19   -> afCopyAddress
        0     22   -> osal_memcpy
        0     19   -> osal_msg_allocate
        0     19   -> osal_msg_send
      1     28   afCopyAddress
        0      9   -> sAddrExtCpy
      1     60   afDataConfirm
        0     14   -> afFindEndPointDesc
        0     14   -> osal_msg_allocate
        0     14   -> osal_msg_send
      0     55   afDataReqMTU
        0      9   -> APSDE_DataReqMTU
      0      9   afDelete
        0      9   -> osal_mem_free
      3      0   afEndPoints
      0     38   afFindEndPointDesc
        0     10   -> afFindEndPointDescList
      2     46   afFindEndPointDescList
      0     12   afFindSimpleDesc
        0     12   -> afFindEndPointDescList
      0     10   afGetMatch
        0     10   -> afFindEndPointDescList
      1     50   afIncomingData
        0     40   -> afBuildMSGIncoming
        0     28   -> afFindEndPointDesc
        0     28   -> afFindEndPointDescList
        0     28   -> aps_FindGroupForEndpoint
        0     28   -> osal_mem_free
      2      0   afNumEndPoints
      1     19   afReflectError
        0     18   -> afFindEndPointDesc
        0     18   -> osal_msg_allocate
        0     18   -> osal_msg_send
        0     18   -> uart_put_string_value
      0     12   afRegister
        0     10   -> afFindEndPointDescList
        0     12   -> afRegisterExtended
      0     24   afRegisterExtended
        0     12   -> osal_mem_alloc
      0     12   afSetApplCB
        0     12   -> afFindEndPointDescList
      0     10   afSetMatch
        0     10   -> afFindEndPointDescList


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      18  ?<Constant "\r\n[afreflector]: ">
       1  ?<Initializer for AF_DataRequestDiscoverRoute>
       3  ??Subroutine34_0
       6  ??Subroutine35_0
       6  ??Subroutine36_0
       4  ??Subroutine37_0
       1  ??Subroutine38_0
       6  ??Subroutine39_0
       1  ??Subroutine40_0
       2  ??Subroutine41_0
       6  ??Subroutine42_0
       4  ??Subroutine43_0
       5  ?Subroutine0
       5  ?Subroutine1
       6  ?Subroutine10
      17  ?Subroutine11
       8  ?Subroutine12
       8  ?Subroutine13
       5  ?Subroutine14
       4  ?Subroutine15
       9  ?Subroutine16
      10  ?Subroutine17
       6  ?Subroutine18
       7  ?Subroutine19
       5  ?Subroutine2
       6  ?Subroutine20
       4  ?Subroutine21
       8  ?Subroutine22
       4  ?Subroutine23
       5  ?Subroutine24
       7  ?Subroutine25
      11  ?Subroutine26
      10  ?Subroutine27
       8  ?Subroutine28
      10  ?Subroutine29
       7  ?Subroutine3
       6  ?Subroutine30
       7  ?Subroutine31
       6  ?Subroutine32
       6  ?Subroutine33
       1  ?Subroutine4
      12  ?Subroutine5
      14  ?Subroutine6
       8  ?Subroutine7
       1  ?Subroutine8
       4  ?Subroutine9
     868  AF_DataRequest
       6  AF_DataRequest::?relay
       1  AF_DataRequestDiscoverRoute
     125  AF_DataRequestSrcRtg
       6  AF_DataRequestSrcRtg::?relay
      70  afAPSF_ConfigGet
       6  afAPSF_ConfigGet::?relay
      55  afAPSF_ConfigSet
       6  afAPSF_ConfigSet::?relay
     474  afBuildMSGIncoming
       6  afBuildMSGIncoming::?relay
      78  afCopyAddress
       6  afCopyAddress::?relay
      72  afDataConfirm
       6  afDataConfirm::?relay
      35  afDataReqMTU
       6  afDataReqMTU::?relay
      92  afDelete
       6  afDelete::?relay
      45  afEndPoints
       6  afEndPoints::?relay
      30  afFindEndPointDesc
       6  afFindEndPointDesc::?relay
      29  afFindEndPointDescList
       6  afFindEndPointDescList::?relay
      96  afFindSimpleDesc
       6  afFindSimpleDesc::?relay
      37  afGetMatch
       6  afGetMatch::?relay
     569  afIncomingData
       6  afIncomingData::?relay
      31  afNumEndPoints
       6  afNumEndPoints::?relay
     127  afReflectError
       6  afReflectError::?relay
      71  afRegister
       6  afRegister::?relay
      96  afRegisterExtended
       6  afRegisterExtended::?relay
      48  afSetApplCB
       6  afSetApplCB::?relay
      48  afSetMatch
       6  afSetMatch::?relay
       2  epList

 
 3 375 bytes in segment BANKED_CODE
   126 bytes in segment BANK_RELAYS
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
    18 bytes in segment XDATA_ROM_C
     2 bytes in segment XDATA_Z
 
 3 502 bytes of CODE  memory
    18 bytes of CONST memory
     3 bytes of XDATA memory

Errors: none
Warnings: none
