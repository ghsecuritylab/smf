///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.20.1.2476 for 8051               31/Jul/2016  23:07:12
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Components\stack\af\AF.c
//    Command line       =  
//        -f "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
//        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3 -DPOLL_RATE=0) -f
//        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x9669
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=2000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Components\stack\af\AF.c" -D xNWK_AUTO_POLL -D xZIGBEEPRO -D
//        HAL_UART=TRUE -D HAL_UART_DMA=1 -D xHAL_LED=TRUE -D xPOWER_SAVING -D
//        SHT10 -lC "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
//        -lA "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\8470p\Desktop\Z-Stack Mesh
//        1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\" -e
//        --no_code_motion --debug --core=plain --dptr=16,1 --data_model=large
//        --code_model=banked --calling_convention=xdata_reentrant
//        --place_constants=data_rom --nr_virtual_regs 16 -I
//        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\" -I
//        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\AF.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME AF

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?V12
        EXTERN ?V13
        EXTERN ?V14
        EXTERN ?V15
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?XLOAD_R0123
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTORE_R0123
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC `??AF_DataRequest::?relay`
        FUNCTION `??AF_DataRequest::?relay`,0203H
        PUBLIC `??AF_DataRequestSrcRtg::?relay`
        FUNCTION `??AF_DataRequestSrcRtg::?relay`,0203H
        PUBLIC `??afAPSF_ConfigGet::?relay`
        FUNCTION `??afAPSF_ConfigGet::?relay`,0203H
        PUBLIC `??afAPSF_ConfigSet::?relay`
        FUNCTION `??afAPSF_ConfigSet::?relay`,0203H
        FUNCTION `??afBuildMSGIncoming::?relay`,0203H
        PUBLIC `??afCopyAddress::?relay`
        FUNCTION `??afCopyAddress::?relay`,0203H
        PUBLIC `??afDataConfirm::?relay`
        FUNCTION `??afDataConfirm::?relay`,0203H
        PUBLIC `??afDataReqMTU::?relay`
        FUNCTION `??afDataReqMTU::?relay`,0203H
        PUBLIC `??afDelete::?relay`
        FUNCTION `??afDelete::?relay`,0203H
        PUBLIC `??afEndPoints::?relay`
        FUNCTION `??afEndPoints::?relay`,0203H
        PUBLIC `??afFindEndPointDesc::?relay`
        FUNCTION `??afFindEndPointDesc::?relay`,0203H
        FUNCTION `??afFindEndPointDescList::?relay`,0203H
        PUBLIC `??afFindSimpleDesc::?relay`
        FUNCTION `??afFindSimpleDesc::?relay`,0203H
        PUBLIC `??afGetMatch::?relay`
        FUNCTION `??afGetMatch::?relay`,0203H
        PUBLIC `??afIncomingData::?relay`
        FUNCTION `??afIncomingData::?relay`,0203H
        PUBLIC `??afNumEndPoints::?relay`
        FUNCTION `??afNumEndPoints::?relay`,0203H
        PUBLIC `??afReflectError::?relay`
        FUNCTION `??afReflectError::?relay`,0203H
        PUBLIC `??afRegister::?relay`
        FUNCTION `??afRegister::?relay`,0203H
        PUBLIC `??afRegisterExtended::?relay`
        FUNCTION `??afRegisterExtended::?relay`,0203H
        PUBLIC `??afSetApplCB::?relay`
        FUNCTION `??afSetApplCB::?relay`,0203H
        PUBLIC `??afSetMatch::?relay`
        FUNCTION `??afSetMatch::?relay`,0203H
        PUBLIC AF_DataRequest
        FUNCTION AF_DataRequest,0a1203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 46, STACK
        PUBLIC AF_DataRequestDiscoverRoute
        PUBLIC AF_DataRequestSrcRtg
        FUNCTION AF_DataRequestSrcRtg,0a1203H
        ARGFRAME XSTACK, 12, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC afAPSF_ConfigGet
        FUNCTION afAPSF_ConfigGet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC afAPSF_ConfigSet
        FUNCTION afAPSF_ConfigSet,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        FUNCTION afBuildMSGIncoming,0a1203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC afCopyAddress
        FUNCTION afCopyAddress,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDataConfirm
        FUNCTION afDataConfirm,0a1203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC afDataReqMTU
        FUNCTION afDataReqMTU,021203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afDelete
        FUNCTION afDelete,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC afEndPoints
        FUNCTION afEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        PUBLIC afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0a1203H
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION afFindEndPointDescList,0203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afFindSimpleDesc
        FUNCTION afFindSimpleDesc,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afGetMatch
        FUNCTION afGetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC afIncomingData
        FUNCTION afIncomingData,0a1203H
        ARGFRAME XSTACK, 10, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 40, STACK
        PUBLIC afNumEndPoints
        FUNCTION afNumEndPoints,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC afReflectError
        FUNCTION afReflectError,0a1203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC afRegister
        FUNCTION afRegister,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afRegisterExtended
        FUNCTION afRegisterExtended,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afSetApplCB
        FUNCTION afSetApplCB,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC afSetMatch
        FUNCTION afSetMatch,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC epList
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
APSDE_DataReq       SYMBOL "APSDE_DataReq"
`??APSDE_DataReq::?relay` SYMBOL "?relay", APSDE_DataReq
APSDE_DataReqMTU    SYMBOL "APSDE_DataReqMTU"
`??APSDE_DataReqMTU::?relay` SYMBOL "?relay", APSDE_DataReqMTU
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
`??NLME_GetShortAddr::?relay` SYMBOL "?relay", NLME_GetShortAddr
NLME_IsAddressBroadcast SYMBOL "NLME_IsAddressBroadcast"
`??NLME_IsAddressBroadcast::?relay` SYMBOL "?relay", NLME_IsAddressBroadcast
RTG_AddSrcRtgEntry_Guaranteed SYMBOL "RTG_AddSrcRtgEntry_Guaranteed"
`??RTG_AddSrcRtgEntry_Guaranteed::?relay` SYMBOL "?relay", RTG_AddSrcRtgEntry_Guaranteed
RTG_CheckRtStatus   SYMBOL "RTG_CheckRtStatus"
`??RTG_CheckRtStatus::?relay` SYMBOL "?relay", RTG_CheckRtStatus
aps_FindGroupForEndpoint SYMBOL "aps_FindGroupForEndpoint"
`??aps_FindGroupForEndpoint::?relay` SYMBOL "?relay", aps_FindGroupForEndpoint
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
`??osal_msg_allocate::?relay` SYMBOL "?relay", osal_msg_allocate
osal_msg_send       SYMBOL "osal_msg_send"
`??osal_msg_send::?relay` SYMBOL "?relay", osal_msg_send
sAddrExtCpy         SYMBOL "sAddrExtCpy"
`??sAddrExtCpy::?relay` SYMBOL "?relay", sAddrExtCpy
uart_put_string_value SYMBOL "uart_put_string_value"
`??uart_put_string_value::?relay` SYMBOL "?relay", uart_put_string_value
AF_DataRequest      SYMBOL "AF_DataRequest"
`??AF_DataRequest::?relay` SYMBOL "?relay", AF_DataRequest
AF_DataRequestSrcRtg SYMBOL "AF_DataRequestSrcRtg"
`??AF_DataRequestSrcRtg::?relay` SYMBOL "?relay", AF_DataRequestSrcRtg
afAPSF_ConfigGet    SYMBOL "afAPSF_ConfigGet"
`??afAPSF_ConfigGet::?relay` SYMBOL "?relay", afAPSF_ConfigGet
afAPSF_ConfigSet    SYMBOL "afAPSF_ConfigSet"
`??afAPSF_ConfigSet::?relay` SYMBOL "?relay", afAPSF_ConfigSet
afCopyAddress       SYMBOL "afCopyAddress"
`??afCopyAddress::?relay` SYMBOL "?relay", afCopyAddress
afDataConfirm       SYMBOL "afDataConfirm"
`??afDataConfirm::?relay` SYMBOL "?relay", afDataConfirm
afDataReqMTU        SYMBOL "afDataReqMTU"
`??afDataReqMTU::?relay` SYMBOL "?relay", afDataReqMTU
afDelete            SYMBOL "afDelete"
`??afDelete::?relay` SYMBOL "?relay", afDelete
afEndPoints         SYMBOL "afEndPoints"
`??afEndPoints::?relay` SYMBOL "?relay", afEndPoints
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
`??afFindEndPointDesc::?relay` SYMBOL "?relay", afFindEndPointDesc
afFindSimpleDesc    SYMBOL "afFindSimpleDesc"
`??afFindSimpleDesc::?relay` SYMBOL "?relay", afFindSimpleDesc
afGetMatch          SYMBOL "afGetMatch"
`??afGetMatch::?relay` SYMBOL "?relay", afGetMatch
afIncomingData      SYMBOL "afIncomingData"
`??afIncomingData::?relay` SYMBOL "?relay", afIncomingData
afNumEndPoints      SYMBOL "afNumEndPoints"
`??afNumEndPoints::?relay` SYMBOL "?relay", afNumEndPoints
afReflectError      SYMBOL "afReflectError"
`??afReflectError::?relay` SYMBOL "?relay", afReflectError
afRegister          SYMBOL "afRegister"
`??afRegister::?relay` SYMBOL "?relay", afRegister
afRegisterExtended  SYMBOL "afRegisterExtended"
`??afRegisterExtended::?relay` SYMBOL "?relay", afRegisterExtended
afSetApplCB         SYMBOL "afSetApplCB"
`??afSetApplCB::?relay` SYMBOL "?relay", afSetApplCB
afSetMatch          SYMBOL "afSetMatch"
`??afSetMatch::?relay` SYMBOL "?relay", afSetMatch

        EXTERN `??APSDE_DataReq::?relay`
        FUNCTION `??APSDE_DataReq::?relay`,00H
        EXTERN `??APSDE_DataReqMTU::?relay`
        FUNCTION `??APSDE_DataReqMTU::?relay`,00H
        EXTERN `??NLME_GetShortAddr::?relay`
        FUNCTION `??NLME_GetShortAddr::?relay`,00H
        EXTERN `??NLME_IsAddressBroadcast::?relay`
        FUNCTION `??NLME_IsAddressBroadcast::?relay`,00H
        EXTERN `??RTG_AddSrcRtgEntry_Guaranteed::?relay`
        FUNCTION `??RTG_AddSrcRtgEntry_Guaranteed::?relay`,00H
        EXTERN `??RTG_CheckRtStatus::?relay`
        FUNCTION `??RTG_CheckRtStatus::?relay`,00H
        EXTERN `??aps_FindGroupForEndpoint::?relay`
        FUNCTION `??aps_FindGroupForEndpoint::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_msg_allocate::?relay`
        FUNCTION `??osal_msg_allocate::?relay`,00H
        EXTERN `??osal_msg_send::?relay`
        FUNCTION `??osal_msg_send::?relay`,00H
        EXTERN `??sAddrExtCpy::?relay`
        FUNCTION `??sAddrExtCpy::?relay`,00H
        EXTERN `??uart_put_string_value::?relay`
        FUNCTION `??uart_put_string_value::?relay`,00H
        EXTERN APSDE_DataReq
        FUNCTION APSDE_DataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN APSDE_DataReqMTU
        FUNCTION APSDE_DataReqMTU,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_IsAddressBroadcast
        FUNCTION NLME_IsAddressBroadcast,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_AddSrcRtgEntry_Guaranteed
        FUNCTION RTG_AddSrcRtgEntry_Guaranteed,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RTG_CheckRtStatus
        FUNCTION RTG_CheckRtStatus,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroupForEndpoint
        FUNCTION aps_FindGroupForEndpoint,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN apsfSendFragmented
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN uart_put_string_value
        FUNCTION uart_put_string_value,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\stack\af\AF.c
//    1 /**************************************************************************************************
//    2   Filename:       AF.c
//    3   Revised:        $Date: 2014-06-30 16:29:17 -0700 (Mon, 30 Jun 2014) $
//    4   Revision:       $Revision: 39295 $
//    5 
//    6   Description:    Application Framework - Device Description helper functions
//    7 
//    8 
//    9   Copyright 2004-2014 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 
//   44 #include "OSAL.h"
//   45 #include "AF.h"
//   46 #include "nwk_globals.h"
//   47 #include "nwk_util.h"
//   48 #include "aps_groups.h"
//   49 #include "ZDProfile.h"
//   50 #include "aps_frag.h"
//   51 #include "rtg.h"
//   52 
//   53 #if defined ( MT_AF_CB_FUNC )
//   54   #include "MT_AF.h"
//   55 #endif
//   56 
//   57 #if defined ( INTER_PAN )
//   58   #include "stub_aps.h"
//   59 #endif
//   60 #include "debug.h"
//   61 /*********************************************************************
//   62  * MACROS
//   63  */
//   64 
//   65 /*********************************************************************
//   66  * @fn      afSend
//   67  *
//   68  * @brief   Helper macro for V1 API to invoke V2 API.
//   69  *
//   70  * input parameters
//   71  *
//   72  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//   73  * @param   srcEP - Origination (i.e. respond to or ack to) End Point.
//   74  * @param   cID - A valid cluster ID as specified by the Profile.
//   75  * @param   len - Number of bytes of data pointed to by next param.
//   76  * @param  *buf - A pointer to the data bytes to send.
//   77  * @param   options - Valid bit mask of AF Tx Options as defined in AF.h.
//   78  * @param  *transID - A pointer to a byte which can be modified and which will
//   79  *                    be used as the transaction sequence number of the msg.
//   80  *
//   81  * output parameters
//   82  *
//   83  * @param  *transID - Incremented by one if the return value is success.
//   84  *
//   85  * @return  afStatus_t - See previous definition of afStatus_... types.
//   86  */
//   87 #define afSend( dstAddr, srcEP, cID, len, buf, transID, options, radius ) \ 
//   88         AF_DataRequest( (dstAddr), afFindEndPointDesc( (srcEP) ), \ 
//   89                           (cID), (len), (buf), (transID), (options), (radius) )
//   90 
//   91 /*********************************************************************
//   92  * GLOBAL VARIABLES
//   93  */
//   94 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   95 epList_t *epList;
epList:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   96 
//   97 /*********************************************************************
//   98  * LOCAL FUNCTIONS
//   99  */
//  100 
//  101 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
//  102                 zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  103                 uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius );
//  104 
//  105 static epList_t *afFindEndPointDescList( uint8 EndPoint );
//  106 
//  107 static pDescCB afGetDescCB( endPointDesc_t *epDesc );
//  108 
//  109 /*********************************************************************
//  110  * PUBLIC FUNCTIONS
//  111  */
//  112 
//  113 /*********************************************************************
//  114  * @fn      afInit
//  115  *
//  116  * @brief   Initialization function for the AF.
//  117  *
//  118  * @param   none
//  119  *
//  120  * @return  none
//  121 void afInit( void )
//  122 {
//  123 }
//  124  */
//  125 
//  126 /*********************************************************************
//  127  * @fn      afRegisterExtended
//  128  *
//  129  * @brief   Register an Application's EndPoint description.
//  130  *
//  131  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  132  * @param   descFn - pointer to descriptor callback function
//  133  * @param   applFn - pointer to the Application callback function
//  134  *
//  135  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  136  *
//  137  * @return  Pointer to epList_t on success, NULL otherwise.
//  138  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  139 epList_t *afRegisterExtended( endPointDesc_t *epDesc, pDescCB descFn, pApplCB applFn )
afRegisterExtended:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function afRegisterExtended
        CODE
//  140 {
        FUNCALL afRegisterExtended, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
//  141   epList_t *ep = osal_mem_alloc(sizeof(epList_t));
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
//  142 
//  143   if (ep != NULL)
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_70
//  144   {
//  145     ep->nextDesc = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ??Subroutine36_0 & 0xFFFF
//  146     epList = ep;
??CrossCallReturnLabel_69:
        MOV     DPTR,#epList
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine22 & 0xFFFF
//  147     ep->epDesc = epDesc;
??CrossCallReturnLabel_32:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine21 & 0xFFFF
//  148     ep->pfnDescCB = descFn;
??CrossCallReturnLabel_30:
        MOV     A,?V0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V1
        LCALL   ?Subroutine21 & 0xFFFF
//  149     ep->apsfCfg.frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
??CrossCallReturnLabel_31:
        INC     DPTR
        INC     DPTR
        MOV     A,#0x32
        LCALL   ?Subroutine19 & 0xFFFF
//  150     ep->apsfCfg.windowSize = APSF_DEFAULT_WINDOW_SIZE;
??CrossCallReturnLabel_26:
        MOV     A,#0x1
        LCALL   ?Subroutine19 & 0xFFFF
//  151     ep->flags = eEP_AllowMatch;  // Default to allow Match Descriptor.
??CrossCallReturnLabel_27:
        INC     DPTR
        MOVX    @DPTR,A
//  152     ep->pfnApplCB = applFn;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  153   }
??CrossCallReturnLabel_16:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine36_0 & 0xFFFF
//  154 
//  155   return ep;
??CrossCallReturnLabel_70:
        LJMP    ?Subroutine0 & 0xFFFF
//  156 }
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function afRegisterExtended
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond2) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond2) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond2) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond2) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond2) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond2) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond2) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond2) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond2) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond2) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond2) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond2) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond2) CFA_SP SP+-2
          CFI (cfiCond2) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_48:
        RET
          CFI (cfiCond1) CFA_SP SP+0
          CFI (cfiCond2) CFA_SP SP+0
          CFI (cfiPicker3) CFA_SP SP+0
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function afRegisterExtended
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_48, ??CrossCallReturnLabel_31
          CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond5) CFA_SP SP+-4
          CFI (cfiCond5) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function afRegisterExtended
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_26
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+-4
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function afRegisterExtended
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_27
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+-4
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond4) CFA_SP SP+-2
          CFI (cfiCond5) CFA_SP SP+-2
          CFI (cfiCond6) CFA_SP SP+-2
          CFI (cfiCond7) CFA_SP SP+-2
          CFI (cfiPicker8) CFA_SP SP+0
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function afRegisterExtended
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+-2
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_49:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond9) CFA_SP SP+0
          CFI (cfiCond10) CFA_SP SP+0
          CFI (cfiPicker11) CFA_SP SP+0
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function afRegisterExtended
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+-2
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_107:
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI (cfiCond12) CFA_SP SP+0
          CFI (cfiCond13) CFA_SP SP+0
          CFI (cfiPicker14) CFA_SP SP+0
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  157 
//  158 /*********************************************************************
//  159  * @fn      afRegister
//  160  *
//  161  * @brief   Register an Application's EndPoint description.
//  162  *
//  163  * @param   epDesc - pointer to the Application's endpoint descriptor.
//  164  *
//  165  * NOTE:  The memory that epDesc is pointing to must exist after this call.
//  166  *
//  167  * @return  afStatus_SUCCESS - Registered
//  168  *          afStatus_MEM_FAIL - not enough memory to add descriptor
//  169  *          afStatus_INVALID_PARAMETER - duplicate endpoint
//  170  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  171 afStatus_t afRegister( endPointDesc_t *epDesc )
afRegister:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function afRegister
        CODE
//  172 {
        FUNCALL afRegister, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afRegister, afRegisterExtended
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  173   if (afFindEndPointDescList(epDesc->endPoint))  // Look for duplicate endpoint.
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JZ      ??afRegister_0
//  174   {
//  175     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afRegister_1
//  176   }
//  177 
//  178   return ((NULL == afRegisterExtended(epDesc, NULL, NULL)) ? afStatus_MEM_FAIL : afStatus_SUCCESS);
??afRegister_0:
        ; Setup parameters for call to function afRegisterExtended
        CLR     A
        MOV     ?V0,A
        MOV     ?V1,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??afRegisterExtended::?relay`; Banked call to: afRegisterExtended
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     ?V1,R3
        MOV     A,R2
        ORL     A,?V1
        JNZ     ??afRegister_2
        MOV     R1,#0x10
        SJMP    ??afRegister_1
??afRegister_2:
        MOV     R1,#0x0
??afRegister_1:
        LJMP    ?Subroutine1 & 0xFFFF
//  179 }
          CFI EndBlock cfiBlock15
//  180 
//  181 /*********************************************************************
//  182  * @fn      afDelete
//  183  *
//  184  * @brief   Delete an Application's EndPoint descriptor and frees the memory
//  185  *
//  186  * @param   EndPoint - Application Endpoint to delete
//  187  *
//  188  * @return  afStatus_SUCCESS - endpoint deleted
//  189  *          afStatus_INVALID_PARAMETER - endpoint not found
//  190  *          afStatus_FAILED - endpoint list empty
//  191  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192 afStatus_t afDelete( uint8 EndPoint )
afDelete:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function afDelete
        CODE
//  193 {
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDelete, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  194   epList_t *epCurrent;
//  195   epList_t *epPrevious;
//  196 
//  197   if ( epList != NULL )
        MOV     DPTR,#epList
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_61:
        JZ      ??afDelete_0
//  198   {
//  199     epPrevious = epCurrent = epList;
        MOV     DPTR,#epList
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_88:
        MOV     R1,A
//  200 
//  201     // first element of the list matches
//  202     if ( epCurrent->epDesc->endPoint == EndPoint )
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_13:
        JNZ     ??afDelete_1
//  203     {
//  204       epList = epCurrent->nextDesc;
        LCALL   ?Subroutine15 & 0xFFFF
//  205       osal_mem_free( epCurrent );
//  206 
//  207       return ( afStatus_SUCCESS );
//  208     }
??CrossCallReturnLabel_104:
        MOV     DPTR,#epList
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??afDelete_2
//  209     else
//  210     {
//  211       // search the list
//  212       for ( epCurrent = epPrevious->nextDesc;
??afDelete_1:
        MOV     DPL,R0
        MOV     DPH,R1
        SJMP    ??afDelete_3
//  213             epCurrent != NULL;
//  214             epCurrent = epCurrent->nextDesc )
//  215       {
//  216         if ( epCurrent->epDesc->endPoint == EndPoint )
//  217         {
//  218           epPrevious->nextDesc = epCurrent->nextDesc;
//  219           osal_mem_free( epCurrent );
//  220 
//  221           // delete the entry and free the memory
//  222           return ( afStatus_SUCCESS );
//  223         }
//  224         epPrevious = epCurrent;
??afDelete_4:
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     DPL,R2
        MOV     DPH,R3
??afDelete_3:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??afDelete_5
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_14:
        JNZ     ??afDelete_4
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
??afDelete_2:
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        MOV     R1,#0x0
        SJMP    ??afDelete_6
//  225       }
//  226     }
//  227 
//  228     // no endpoint found
//  229     return ( afStatus_INVALID_PARAMETER );
??afDelete_5:
        MOV     R1,#0x2
        SJMP    ??afDelete_6
//  230   }
//  231   else
//  232   {
//  233     // epList is empty
//  234     return ( afStatus_FAILED );
??afDelete_0:
        MOV     R1,#0x1
//  235   }
??afDelete_6:
          CFI EndBlock cfiBlock16
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  236 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock17

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function afDelete
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-2
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R4
        MOVX    A,@DPTR
        XRL     A,R6
        RET
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond19) CFA_SP SP+0
          CFI (cfiPicker20) CFA_SP SP+0
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20
//  237 
//  238 /*********************************************************************
//  239  * @fn          afDataConfirm
//  240  *
//  241  * @brief       This function will generate the Data Confirm back to
//  242  *              the application.
//  243  *
//  244  * @param       endPoint - confirm end point
//  245  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  246  * @param       status - status of APSDE_DATA_REQUEST
//  247  *
//  248  * @return      none
//  249  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  250 void afDataConfirm( uint8 endPoint, uint8 transID, ZStatus_t status )
afDataConfirm:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function afDataConfirm
        CODE
//  251 {
        FUNCALL afDataConfirm, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afDataConfirm, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0,R1
        MOV     ?V1,R2
        MOV     ?V2,R3
//  252   endPointDesc_t *epDesc;
//  253   afDataConfirm_t *msgPtr;
//  254 
//  255   // Find the endpoint description
//  256   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R6,?V4
        MOV     R7,?V5
//  257   if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afDataConfirm_0
//  258     return;
//  259 
//  260   // Determine the incoming command type
//  261   msgPtr = (afDataConfirm_t *)osal_msg_allocate( sizeof(afDataConfirm_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x4
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
//  262   if ( msgPtr )
        MOV     A,R2
        ORL     A,R3
        JZ      ??afDataConfirm_0
//  263   {
//  264     // Build the Data Confirm message
//  265     msgPtr->hdr.event = AF_DATA_CONFIRM_CMD;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x3
        MOVX    @DPTR,A
//  266     msgPtr->hdr.status = status;
        INC     DPTR
        MOV     A,?V2
        LCALL   ?Subroutine22 & 0xFFFF
//  267     msgPtr->endpoint = endPoint;
//  268     msgPtr->transID = transID;
//  269 //	DBG_PRINTF_VALUE("\r\n [AF_CONFIRM] tranid:", msgPtr->transID, 16);	
//  270 
//  271 //	DBG_PRINTF_VALUE("\r\n [AF_CONFIRM] status:", msgPtr->hdr.status, 16);	
//  272 
//  273 #if defined ( MT_AF_CB_FUNC )
//  274     /* If MT has subscribed for this callback, don't send as a message. */
//  275     if ( AFCB_CHECK(CB_ID_AF_DATA_CNF,*(epDesc->task_id)) )
//  276     {
//  277       /* Send callback if it's subscribed */
//  278       MT_AfDataConfirm ((void *)msgPtr);
//  279       /* Release the memory. */
//  280       osal_msg_deallocate( (void *)msgPtr );
//  281     }
//  282     else
//  283 #endif
//  284     {
//  285       /* send message through task message */
//  286       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
//  287 //	  DBG_PRINTF_VALUE("\r\n[taskID]: ", *(epDesc->task_id), 16);
//  288 //	  DBG_PRINTF_VALUE("\r\n[af confirm]: ", status, 16);
//  289 
//  290     }
//  291   }
??CrossCallReturnLabel_33:
        MOV     A,?V0
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_34:
        INC     DPTR
        MOV     A,?V1
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_56:
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  292 }
??afDataConfirm_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function afDataConfirm
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function afDataConfirm
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond23) CFA_SP SP+0
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiPicker25) CFA_SP SP+0
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25
//  293 
//  294 /*********************************************************************
//  295  * @fn          afReflectError
//  296  *
//  297  * @brief       This function will generate the Reflect Error message to
//  298  *              the application.
//  299  *
//  300  * @param       dstAddrMode - mode of dstAdd - 0 - normal short addr, 1 - group Address
//  301  * @param       dstAddr - intended destination
//  302  * @param       endPoint - confirm end point
//  303  * @param       transID - transaction ID from APSDE_DATA_REQUEST
//  304  * @param       status - status of APSDE_DATA_REQUEST
//  305  *
//  306  * @return      none
//  307  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  308 void afReflectError( uint8 dstAddrMode, uint16 dstAddr, uint8 endPoint, uint8 transID, ZStatus_t status )
afReflectError:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function afReflectError
        CODE
//  309 {
        FUNCALL afReflectError, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, uart_put_string_value
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afReflectError, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V1,R1
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V0,R4
        MOV     ?V2,R5
//  310   endPointDesc_t *epDesc;
//  311   afReflectError_t *msgPtr;
//  312 
//  313   // Find the endpoint description
//  314   epDesc = afFindEndPointDesc( endPoint );
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     R1,?V0
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V6,R2
        MOV     ?V7,R3
//  315   if ( epDesc == NULL )
        MOV     A,R2
        ORL     A,?V7
        JZ      ??afReflectError_0
//  316     return;
//  317 
//  318   // Determine the incoming command type
//  319   msgPtr = (afReflectError_t *)osal_msg_allocate( sizeof(afReflectError_t) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x7
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
//  320   if ( msgPtr )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afReflectError_0
//  321   {
//  322     // Build the Data Confirm message
//  323     msgPtr->hdr.event = AF_REFLECT_ERROR_CMD;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#-0x2
        MOVX    @DPTR,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
//  324     msgPtr->hdr.status = status;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        LCALL   ?Subroutine33 & 0xFFFF
//  325     msgPtr->endpoint = endPoint;
??CrossCallReturnLabel_57:
        INC     DPTR
        INC     DPTR
        MOV     A,?V0
        LCALL   ?Subroutine23 & 0xFFFF
//  326     msgPtr->transID = transID;
??CrossCallReturnLabel_35:
        MOV     A,?V2
        LCALL   ?Subroutine23 & 0xFFFF
//  327     msgPtr->dstAddrMode = dstAddrMode;
??CrossCallReturnLabel_36:
        INC     DPTR
        MOV     A,?V1
        LCALL   ?Subroutine20 & 0xFFFF
//  328     msgPtr->dstAddr = dstAddr;
??CrossCallReturnLabel_28:
        MOV     A,?V4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V5
        MOVX    @DPTR,A
//  329 
//  330 #if defined ( MT_AF_CB_FUNC )
//  331     /* If MT has subscribed for this callback, don't send as a message. */
//  332     if ( AFCB_CHECK( CB_ID_AF_REFLECT_ERROR, *(epDesc->task_id) ) )
//  333     {
//  334       /* Send callback if it's subscribed */
//  335       MT_AfReflectError( (void *)msgPtr );
//  336       /* Release the memory. */
//  337       osal_msg_deallocate( (void *)msgPtr );
//  338     }
//  339     else
//  340 #endif
//  341     {
//  342 		DBG_PRINTF_VALUE("\r\n[afreflector]: ", status, 16);
        ; Setup parameters for call to function uart_put_string_value
        MOV     R1,#0x10
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "\\r\\n[afreflector]: ">` & 0xff
        MOV     R3,#(`?<Constant "\\r\\n[afreflector]: ">` >> 8) & 0xff
        LCALL   `??uart_put_string_value::?relay`; Banked call to: uart_put_string_value
//  343 
//  344       /* send message through task message */
//  345       osal_msg_send( *(epDesc->task_id), (uint8 *)msgPtr );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V6
        MOV     DPH,?V7
        LCALL   ?Subroutine5 & 0xFFFF
//  346     }
//  347   }
??CrossCallReturnLabel_1:
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  348 }
??afReflectError_0:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function afReflectError
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function afReflectError
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_54:
        RET
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiPicker29) CFA_SP SP+0
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function afReflectError
          CFI Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function afReflectError
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_36
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+-4
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function afReflectError
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_28
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond32) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+-4
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function AF_DataRequest
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_29
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+-4
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_58:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond30) CFA_SP SP+-2
          CFI (cfiCond31) CFA_SP SP+-2
          CFI (cfiCond32) CFA_SP SP+-2
          CFI (cfiCond33) CFA_SP SP+-2
          CFI (cfiPicker34) CFA_SP SP+0
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function afReflectError
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+-2
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function afReflectError
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_35
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-6
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function afReflectError
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_36
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-6
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function afReflectError
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_28
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+-6
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function AF_DataRequest
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_55, ??CrossCallReturnLabel_29
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+-6
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function afIncomingData
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond41) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond41) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond41) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond41) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+-2
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker42 Using cfiCommon1
          CFI (cfiPicker42) NoFunction
          CFI (cfiPicker42) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_msg_send
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiCond37) CFA_SP SP+-4
          CFI (cfiCond38) CFA_SP SP+-4
          CFI (cfiCond39) CFA_SP SP+-4
          CFI (cfiCond40) CFA_SP SP+-4
          CFI (cfiCond41) CFA_SP SP+0
          CFI (cfiPicker42) CFA_SP SP+0
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function afDataConfirm
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function afReflectError
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+-2
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function afBuildMSGIncoming
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond45) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond45) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond45) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond45) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+-2
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker46 Using cfiCommon1
          CFI (cfiPicker46) NoFunction
          CFI (cfiPicker46) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI (cfiCond43) CFA_SP SP+0
          CFI (cfiCond44) CFA_SP SP+0
          CFI (cfiCond45) CFA_SP SP+0
          CFI (cfiPicker46) CFA_SP SP+0
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiPicker46
//  349 
//  350 /*********************************************************************
//  351  * @fn          afIncomingData
//  352  *
//  353  * @brief       Transfer a data PDU (ASDU) from the APS sub-layer to the AF.
//  354  *
//  355  * @param       aff  - pointer to APS frame format
//  356  * @param       SrcAddress  - Source address
//  357  * @param       SrcPanId  - Source PAN ID
//  358  * @param       sig - incoming message's link quality
//  359  * @param       nwkSeqNum - incoming network sequence number (from nwk header frame)
//  360  * @param       SecurityUse - Security enable/disable
//  361  * @param       timestamp - the MAC Timer2 timestamp at Rx.
//  362  * @param       radius - incoming messages received radius
//  363  *
//  364  * @return      none
//  365  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  366 void afIncomingData( aps_FrameFormat_t *aff, zAddrType_t *SrcAddress, uint16 SrcPanId,
afIncomingData:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function afIncomingData
        CODE
//  367                      NLDE_Signal_t *sig, uint8 nwkSeqNum, uint8 SecurityUse,
//  368                      uint32 timestamp, uint8 radius )
//  369 {
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afBuildMSGIncoming
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, aps_FindGroupForEndpoint
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afIncomingData, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        REQUIRE ?V12
        REQUIRE ?V13
        REQUIRE ?V14
        REQUIRE ?V15
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     ?V2,R2
        MOV     ?V3,R3
//  370   endPointDesc_t *epDesc = NULL;
//  371   epList_t *pList = epList;
        MOV     DPTR,#epList
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
//  372 #if !defined ( APS_NO_GROUPS )
//  373   uint8 grpEp = APS_GROUPS_EP_NOT_FOUND;
        MOV     ?V8,#-0x2
//  374 #endif
//  375 
//  376   if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     ??afIncomingData_0
//  377   {
//  378 #if !defined ( APS_NO_GROUPS )
//  379     // Find the first endpoint for this group
//  380     grpEp = aps_FindGroupForEndpoint( aff->GroupID, APS_GROUPS_FIND_FIRST );
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,#-0x2
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_96:
        LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV     A,R1
        MOV     ?V8,A
//  381     if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
        MOV     A,#-0x2
        XRL     A,?V8
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  382       return;   // No endpoint found
//  383 
//  384     epDesc = afFindEndPointDesc( grpEp );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
//  385     if ( epDesc == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     ??afIncomingData_2
//  386       return;   // Endpoint descriptor not found
        LJMP    ??afIncomingData_1 & 0xFFFF
//  387 
//  388     pList = afFindEndPointDescList( epDesc->endPoint );
//  389 #else
//  390     return; // Not supported
//  391 #endif
//  392   }
//  393   else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
??afIncomingData_0:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??afIncomingData_3
//  394   {
//  395     // Set the list
//  396     if ( pList != NULL )
        MOV     A,?V0
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
//  397     {
//  398       epDesc = pList->epDesc;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??afIncomingData_4:
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V14,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V15,A
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        SJMP    ??afIncomingData_5
//  399     }
//  400   }
//  401   else if ( (epDesc = afFindEndPointDesc( aff->DstEndPoint )) )
??afIncomingData_3:
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??afIncomingData_4
//  402   {
//  403     pList = afFindEndPointDescList( epDesc->endPoint );
??afIncomingData_2:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V0,R2
        MOV     ?V1,R3
        SJMP    ??afIncomingData_4
//  404   }
//  405 
//  406   while ( epDesc )
//  407   {
//  408     uint16 epProfileID = 0xFFFE;  // Invalid Profile ID
//  409 
//  410     if ( pList->pfnDescCB )
//  411     {
//  412       uint16 *pID = (uint16 *)(pList->pfnDescCB(
//  413                                  AF_DESCRIPTOR_PROFILE_ID, epDesc->endPoint ));
//  414       if ( pID )
//  415       {
//  416         epProfileID = *pID;
//  417         osal_mem_free( pID );
//  418       }
//  419     }
//  420     else if ( epDesc->simpleDesc )
//  421     {
//  422       epProfileID = epDesc->simpleDesc->AppProfId;
//  423     }
//  424 
//  425     // First part of verification is to make sure that:
//  426     // the local Endpoint ProfileID matches the received ProfileID OR
//  427     // the message is specifically send to ZDO (this excludes the broadcast endpoint) OR
//  428     // if the Wildcard ProfileID is received the message should not be sent to ZDO endpoint
//  429     if ( (aff->ProfileID == epProfileID) ||
//  430          ((epDesc->endPoint == ZDO_EP) && (aff->ProfileID == ZDO_PROFILE_ID)) ||
//  431          ((epDesc->endPoint != ZDO_EP) && ( aff->ProfileID == ZDO_WILDCARD_PROFILE_ID )) )
//  432     {
//  433       // Save original endpoint
//  434       uint8 endpoint = aff->DstEndPoint;
//  435 
//  436       // overwrite with descriptor's endpoint
//  437       aff->DstEndPoint = epDesc->endPoint;
//  438 
//  439       afBuildMSGIncoming( aff, epDesc, SrcAddress, SrcPanId, sig,
//  440                          nwkSeqNum, SecurityUse, timestamp, radius );
//  441 
//  442       // Restore with original endpoint
//  443       aff->DstEndPoint = endpoint;
//  444     }
//  445 
//  446     if ( ((aff->FrmCtrl & APS_DELIVERYMODE_MASK) == APS_FC_DM_GROUP) )
//  447     {
//  448 #if !defined ( APS_NO_GROUPS )
//  449       // Find the next endpoint for this group
//  450       grpEp = aps_FindGroupForEndpoint( aff->GroupID, grpEp );
//  451       if ( grpEp == APS_GROUPS_EP_NOT_FOUND )
//  452         return;   // No endpoint found
//  453 
//  454       epDesc = afFindEndPointDesc( grpEp );
//  455       if ( epDesc == NULL )
//  456         return;   // Endpoint descriptor not found
//  457 
//  458       pList = afFindEndPointDescList( epDesc->endPoint );
//  459 #else
//  460       return;
//  461 #endif
//  462     }
//  463     else if ( aff->DstEndPoint == AF_BROADCAST_ENDPOINT )
//  464     {
//  465       pList = pList->nextDesc;
//  466       if ( pList )
//  467         epDesc = pList->epDesc;
??afIncomingData_6:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
??afIncomingData_5:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afIncomingData_1 & 0xFFFF
        SJMP    ??afIncomingData_7
??afIncomingData_8:
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V0,R2
        MOV     ?V1,R3
??afIncomingData_7:
        MOV     ?V10,#-0x2
        MOV     ?V11,#-0x1
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     DPL,R6
        MOV     DPH,R7
        JZ      ??afIncomingData_9
        ; Setup parameters for indirect call
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x2
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL   ?CALL_IND
        MOV     A,R2
        ORL     A,R3
        JZ      ??afIncomingData_10
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??afIncomingData_10
??afIncomingData_9:
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_65:
        JZ      ??afIncomingData_10
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_81:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V11,A
??afIncomingData_10:
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V10
        JNZ     ??afIncomingData_11
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V11
??afIncomingData_11:
        JZ      ??afIncomingData_12
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,?V2
        MOV     DPH,?V3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JNZ     ??afIncomingData_13
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_62:
        JNZ     ??CrossCallReturnLabel_23
        SJMP    ??afIncomingData_12
??afIncomingData_13:
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??afIncomingData_14
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??afIncomingData_14:
        JNZ     ??CrossCallReturnLabel_23
??afIncomingData_12:
        MOV     A,?V2
        ADD     A,#0x2
        MOV     ?V10,A
        CLR     A
        ADDC    A,?V3
        MOV     ?V11,A
        MOV     DPL,?V10
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_59:
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function afBuildMSGIncoming
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     R0,#?V9
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V9,A
        MOV     R0,#?V9
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     R0,#?V14
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V2
        MOV     R3,?V3
        LCALL   `??afBuildMSGIncoming::?relay`; Banked call to: afBuildMSGIncoming
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        ANL     A,#0xc
        XRL     A,#0xc
        JNZ     ??afIncomingData_15
        ; Setup parameters for call to function aps_FindGroupForEndpoint
        MOV     R1,?V8
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_97:
        LCALL   `??aps_FindGroupForEndpoint::?relay`; Banked call to: aps_FindGroupForEndpoint
        MOV     A,R1
        MOV     ?V8,A
        MOV     A,#-0x2
        XRL     A,?V8
        JZ      ??afIncomingData_1
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   `??afFindEndPointDesc::?relay`; Banked call to: afFindEndPointDesc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??afIncomingData_8 & 0xFFFF
        SJMP    ??afIncomingData_1
??afIncomingData_15:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??afIncomingData_1
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     ?V0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V1,A
        MOV     A,?V0
        ORL     A,?V1
        JZ      $+5
        LJMP    ??afIncomingData_6 & 0xFFFF
//  468       else
//  469         epDesc = NULL;
//  470     }
//  471     else
//  472       epDesc = NULL;
//  473   }
//  474 }
??afIncomingData_1:
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function afIncomingData
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOVX    A,@DPTR
        MOV     DPL,?V10
        MOV     DPH,?V11
        MOVX    @DPTR,A
        RET
          CFI (cfiCond48) CFA_SP SP+0
          CFI (cfiCond49) CFA_SP SP+0
          CFI (cfiPicker50) CFA_SP SP+0
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50
//  475 
//  476 /*********************************************************************
//  477  * @fn          afBuildMSGIncoming
//  478  *
//  479  * @brief       Build the message for the app
//  480  *
//  481  * @param
//  482  *
//  483  * @return      pointer to next in data buffer
//  484  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  485 static void afBuildMSGIncoming( aps_FrameFormat_t *aff, endPointDesc_t *epDesc,
afBuildMSGIncoming:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function afBuildMSGIncoming
        CODE
//  486                  zAddrType_t *SrcAddress, uint16 SrcPanId, NLDE_Signal_t *sig,
//  487                  uint8 nwkSeqNum, uint8 SecurityUse, uint32 timestamp, uint8 radius )
//  488 {
        FUNCALL afBuildMSGIncoming, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, afCopyAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afBuildMSGIncoming, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
        MOV     ?V6,R1
//  489   afIncomingMSGPacket_t *MSGpkt;
//  490   const uint8 len = sizeof( afIncomingMSGPacket_t ) + aff->asduLength;
//  491   uint8 *asdu = aff->asdu;
        MOV     A,R2
        ADD     A,#0xe
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
//  492   MSGpkt = (afIncomingMSGPacket_t *)osal_msg_allocate( len );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     A,R2
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_41:
        ADD     A,#0x27
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??osal_msg_allocate::?relay`; Banked call to: osal_msg_allocate
        MOV     ?V8,R2
        MOV     ?V9,R3
        MOV     R6,?V8
        MOV     R7,?V9
//  493 
//  494   if ( MSGpkt == NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??afBuildMSGIncoming_0 & 0xFFFF
//  495   {
//  496     return;
//  497   }
//  498 
//  499   MSGpkt->hdr.event = AF_INCOMING_MSG_CMD;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1a
        LCALL   ?Subroutine28 & 0xFFFF
//  500   MSGpkt->groupId = aff->GroupID;
??CrossCallReturnLabel_45:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?Subroutine17 & 0xFFFF
//  501   MSGpkt->clusterId = aff->ClusterID;
??CrossCallReturnLabel_24:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine36_0 & 0xFFFF
//  502   afCopyAddress( &MSGpkt->srcAddr, SrcAddress );
??CrossCallReturnLabel_71:
        ; Setup parameters for call to function afCopyAddress
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??afCopyAddress::?relay`; Banked call to: afCopyAddress
//  503   MSGpkt->srcAddr.endPoint = aff->SrcEndPoint;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  504   MSGpkt->endPoint = epDesc->endPoint;
        MOV     DPL,?V2
        MOV     DPH,?V3
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x14
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  505   MSGpkt->wasBroadcast = aff->wasBroadcast;
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine13 & 0xFFFF
//  506   MSGpkt->LinkQuality = sig->LinkQuality;
??CrossCallReturnLabel_17:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x16
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine30 & 0xFFFF
//  507   MSGpkt->correlation = sig->correlation;
??CrossCallReturnLabel_50:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x17
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine30 & 0xFFFF
//  508   MSGpkt->rssi = sig->rssi;
??CrossCallReturnLabel_51:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x18
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  509   MSGpkt->SecurityUse = SecurityUse;
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x19
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  510   MSGpkt->timestamp = timestamp;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XLOAD_R0123
        MOV     A,R6
        ADD     A,#0x1a
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?XSTORE_R0123
//  511   MSGpkt->nwkSeqNum = nwkSeqNum;
        MOV     A,R6
        ADD     A,#0x1e
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        MOV     A,?V6
        MOVX    @DPTR,A
//  512   MSGpkt->macSrcAddr = aff->macSrcAddr;
        MOV     A,?V0
        ADD     A,#0x15
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_19:
        ADD     A,#0x24
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine17 & 0xFFFF
//  513   MSGpkt->macDestAddr = aff->macDestAddr;
??CrossCallReturnLabel_25:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        ADD     A,#0x12
        LCALL   ?Subroutine18 & 0xFFFF
//  514   MSGpkt->srcAddr.panId = SrcPanId;
??CrossCallReturnLabel_77:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_21:
        ADD     A,#0x10
        LCALL   ?Subroutine18 & 0xFFFF
//  515   MSGpkt->cmd.TransSeqNumber = 0;
??CrossCallReturnLabel_78:
        MOV     A,R6
        ADD     A,#0x1f
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
//  516   MSGpkt->cmd.DataLength = aff->asduLength;
        MOV     A,R6
        ADD     A,#0x20
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     A,?V0
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  517   MSGpkt->radius = radius;
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R6
        ADD     A,#0x26
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine30 & 0xFFFF
//  518 
//  519   if ( MSGpkt->cmd.DataLength )
??CrossCallReturnLabel_52:
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_63:
        JZ      ??afBuildMSGIncoming_1
//  520   {
//  521     MSGpkt->cmd.Data = (uint8 *)(MSGpkt + 1);
        MOV     A,R6
        ADD     A,#0x27
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_43:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  522     osal_memcpy( MSGpkt->cmd.Data, asdu, MSGpkt->cmd.DataLength );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V8,?V4
        MOV     ?V9,?V5
        MOV     ?V10,#0x0
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        LCALL   ?Subroutine10 & 0xFFFF
//  523   }
??CrossCallReturnLabel_10:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        SJMP    ??afBuildMSGIncoming_2
//  524   else
//  525   {
//  526     MSGpkt->cmd.Data = NULL;
??afBuildMSGIncoming_1:
        LCALL   ?Subroutine27 & 0xFFFF
//  527   }
??CrossCallReturnLabel_44:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  528 
//  529 #if defined ( MT_AF_CB_FUNC )
//  530   // If ZDO or SAPI have registered for this endpoint, dont intercept it here
//  531   if (AFCB_CHECK(CB_ID_AF_DATA_IND, *(epDesc->task_id)))
//  532   {
//  533     MT_AfIncomingMsg( (void *)MSGpkt );
//  534     // Release the memory.
//  535     osal_msg_deallocate( (void *)MSGpkt );
//  536   }
//  537   else
//  538 #endif
//  539   {
//  540     // Send message through task message.
//  541     osal_msg_send( *(epDesc->task_id), (uint8 *)MSGpkt );
??afBuildMSGIncoming_2:
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,?V2
        MOV     DPH,?V3
        LCALL   ?Subroutine5 & 0xFFFF
//  542   }
??CrossCallReturnLabel_2:
        LCALL   `??osal_msg_send::?relay`; Banked call to: osal_msg_send
//  543 }
??afBuildMSGIncoming_0:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function afBuildMSGIncoming
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_44
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOV     A,R6
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
        RET
          CFI (cfiCond52) CFA_SP SP+0
          CFI (cfiCond53) CFA_SP SP+0
          CFI (cfiPicker54) CFA_SP SP+0
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function afBuildMSGIncoming
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond56) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond56) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+-2
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        ADD     A,#0x10
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiCond56) CFA_SP SP+0
          CFI (cfiPicker57) CFA_SP SP+0
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function afBuildMSGIncoming
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+-2
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker60 Using cfiCommon1
          CFI (cfiPicker60) NoFunction
          CFI (cfiPicker60) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_46:
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond58) CFA_SP SP+0
          CFI (cfiCond59) CFA_SP SP+0
          CFI (cfiPicker60) CFA_SP SP+0
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiPicker60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond61 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_45
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function afBuildMSGIncoming
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_24
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+-4
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function afBuildMSGIncoming
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_46, ??CrossCallReturnLabel_25
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+-4
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function AF_DataRequest
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_37
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+-4
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function AF_DataRequest
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_38
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+-4
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function afFindEndPointDescList
        MOV     DPL,?V0
        MOV     DPH,?V1
        RET
          CFI (cfiCond61) CFA_SP SP+0
          CFI (cfiCond62) CFA_SP SP+-2
          CFI (cfiCond63) CFA_SP SP+-2
          CFI (cfiCond64) CFA_SP SP+-2
          CFI (cfiCond65) CFA_SP SP+-2
          CFI (cfiPicker66) CFA_SP SP+0
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond67 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function afBuildMSGIncoming
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+-2
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function afBuildMSGIncoming
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV     A,R6
        RET
          CFI (cfiCond67) CFA_SP SP+0
          CFI (cfiCond68) CFA_SP SP+0
          CFI (cfiCond69) CFA_SP SP+0
          CFI (cfiPicker70) CFA_SP SP+0
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond71 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function afBuildMSGIncoming
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_106:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond71) CFA_SP SP+0
          CFI (cfiCond72) CFA_SP SP+0
          CFI (cfiPicker73) CFA_SP SP+0
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function AF_DataRequest
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        INC     DPTR
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function AF_DataRequest
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function afIncomingData
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond79) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond79) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond79) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond79) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond79) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond79) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond79) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+-2
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function AF_DataRequest
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+-2
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond82 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function afIncomingData
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond83) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond83) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond83) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond83) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond83) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond83) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond83) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function afBuildMSGIncoming
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_63
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function AF_DataRequest
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+-2
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function AF_DataRequest
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+-2
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function afIncomingData
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond87) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+-2
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function AF_DataRequest
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function afIncomingData
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond89) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond89) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond89) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+-2
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function AF_DataRequest
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+-2
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_110:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI (cfiCond82) CFA_SP SP+0
          CFI (cfiCond83) CFA_SP SP+0
          CFI (cfiCond84) CFA_SP SP+0
          CFI (cfiCond85) CFA_SP SP+0
          CFI (cfiCond86) CFA_SP SP+0
          CFI (cfiCond87) CFA_SP SP+0
          CFI (cfiCond88) CFA_SP SP+0
          CFI (cfiCond89) CFA_SP SP+0
          CFI (cfiCond90) CFA_SP SP+0
          CFI (cfiPicker91) CFA_SP SP+0
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
//  544 
//  545 /*********************************************************************
//  546  * @fn      AF_DataRequest
//  547  *
//  548  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  549  *          SendMulti and MSG-Send.
//  550  *
//  551  * input parameters
//  552  *
//  553  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  554  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  555  * @param   cID - A valid cluster ID as specified by the Profile.
//  556  * @param   len - Number of bytes of data pointed to by next param.
//  557  * @param  *buf - A pointer to the data bytes to send.
//  558  * @param  *transID - A pointer to a byte which can be modified and which will
//  559  *                    be used as the transaction sequence number of the msg.
//  560  * @param   options - Valid bit mask of Tx options.
//  561  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  562  *
//  563  * output parameters
//  564  *
//  565  * @param  *transID - Incremented by one if the return value is success.
//  566  *
//  567  * @return  afStatus_t - See previous definition of afStatus_... types.
//  568  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  569 uint8 AF_DataRequestDiscoverRoute = DISC_ROUTE_NETWORK;
AF_DataRequestDiscoverRoute:
        DATA8
        DS 1
        REQUIRE `?<Initializer for AF_DataRequestDiscoverRoute>`
        REQUIRE __INIT_XDATA_I

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  570 afStatus_t AF_DataRequest( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequest:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function AF_DataRequest
        CODE
//  571                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  572                            uint8 options, uint8 radius )
//  573 {
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, RTG_CheckRtStatus
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_IsAddressBroadcast
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, APSDE_DataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequest, afDataConfirm
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V2,R1
//  574   pDescCB pfnDescCB;
//  575   ZStatus_t stat;
//  576   APSDE_DataReq_t req;
//  577   afDataReqMTU_t mtu;
//  578   epList_t *pList;
//  579 
//  580   // Verify source end point
//  581   if ( srcEP == NULL )
        MOV     A,R4
        ORL     A,?V1
        JNZ     $+5
        LJMP    ??AF_DataRequest_0 & 0xFFFF
//  582   {
//  583     return afStatus_INVALID_PARAMETER;
//  584   }
//  585 
//  586 #if !defined( REFLECTOR )
//  587   if ( dstAddr->addrMode == afAddrNotPresent )
//  588   {
//  589     return afStatus_INVALID_PARAMETER;
//  590   }
//  591 #endif
//  592 
//  593   // Check if route is available before sending data
//  594   if ( options & AF_LIMIT_CONCENTRATOR  )
        MOV     A,R1
        MOV     C,0xE0 /* A   */.3
        JNC     ??AF_DataRequest_1
//  595   {
//  596     if ( dstAddr->addrMode != afAddr16Bit )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      $+5
        LJMP    ??AF_DataRequest_0 & 0xFFFF
//  597     {
//  598       return ( afStatus_INVALID_PARAMETER );
//  599     }
//  600 
//  601     // First, make sure the destination is not its self, then check for an existing route.
//  602     if ( (dstAddr->addr.shortAddr != NLME_GetShortAddr())
//  603         && (RTG_CheckRtStatus( dstAddr->addr.shortAddr, RT_ACTIVE, (MTO_ROUTE | NO_ROUTE_CACHE) ) != RTG_SUCCESS) )
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R0,?V4
        MOV     R1,?V5
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??AF_DataRequest_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??AF_DataRequest_2:
        JZ      ??AF_DataRequest_1
        ; Setup parameters for call to function RTG_CheckRtStatus
        MOV     R4,#0x3
        MOV     R1,#0x1
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_89:
        LCALL   `??RTG_CheckRtStatus::?relay`; Banked call to: RTG_CheckRtStatus
        MOV     A,R1
        JZ      ??AF_DataRequest_1
//  604     {
//  605       // A valid route to a concentrator wasn't found
//  606       return ( afStatus_NO_ROUTE );
        MOV     R1,#-0x33
        LJMP    ??AF_DataRequest_3 & 0xFFFF
//  607     }
//  608   }
//  609 
//  610   // Validate broadcasting
//  611   if ( ( dstAddr->addrMode == afAddr16Bit     ) ||
//  612        ( dstAddr->addrMode == afAddrBroadcast )    )
??AF_DataRequest_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JZ      ??AF_DataRequest_4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??AF_DataRequest_5
//  613   {
//  614     // Check for valid broadcast values
//  615     if( ADDR_NOT_BCAST != NLME_IsAddressBroadcast( dstAddr->addr.shortAddr )  )
??AF_DataRequest_4:
        ; Setup parameters for call to function NLME_IsAddressBroadcast
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL   `??NLME_IsAddressBroadcast::?relay`; Banked call to: NLME_IsAddressBroadcast
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JZ      ??AF_DataRequest_6
//  616     {
//  617       // Force mode to broadcast
//  618       dstAddr->addrMode = afAddrBroadcast;
        MOV     A,#0xf
        MOVX    @DPTR,A
//  619     }
//  620     else
//  621     {
//  622       // Address is not a valid broadcast type
//  623       if ( dstAddr->addrMode == afAddrBroadcast )
//  624       {
//  625         return afStatus_INVALID_PARAMETER;
//  626       }
//  627     }
//  628   }
//  629   else if ( dstAddr->addrMode != afAddr64Bit &&
//  630             dstAddr->addrMode != afAddrGroup &&
//  631             dstAddr->addrMode != afAddrNotPresent )
//  632   {
//  633     return afStatus_INVALID_PARAMETER;
//  634   }
//  635 
//  636   // Set destination address
//  637   req.dstAddr.addrMode = dstAddr->addrMode;
??AF_DataRequest_7:
        MOV     A,R6
        ADD     A,#0x8
        MOV     R0,A
        CLR     A
        ADDC    A,R7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine25 & 0xFFFF
//  638   if ( dstAddr->addrMode == afAddr64Bit )
??CrossCallReturnLabel_39:
        JNZ     ??AF_DataRequest_8
//  639   {
//  640     osal_cpyExtAddr( req.dstAddr.addr.extAddr, dstAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??CrossCallReturnLabel_72
//  641   }
??AF_DataRequest_6:
        MOVX    A,@DPTR
        XRL     A,#0xf
        JNZ     ??AF_DataRequest_7
        SJMP    ??AF_DataRequest_0
??AF_DataRequest_5:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x3
        JZ      ??AF_DataRequest_7
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??AF_DataRequest_7
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??AF_DataRequest_7
??AF_DataRequest_0:
        MOV     R1,#0x2
        LJMP    ??AF_DataRequest_3 & 0xFFFF
//  642   else
//  643   {
//  644     req.dstAddr.addr.shortAddr = dstAddr->addr.shortAddr;
??AF_DataRequest_8:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine43_0 & 0xFFFF
//  645   }
??CrossCallReturnLabel_98:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine36_0 & 0xFFFF
//  646 
//  647   // This option is to use Wildcard ProfileID in outgoing packets
//  648   if ( options & AF_WILDCARD_PROFILEID )
??CrossCallReturnLabel_72:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.1
        MOV     A,#0x11
        JNC     ??AF_DataRequest_9
//  649   {
//  650     req.profileID = ZDO_WILDCARD_PROFILE_ID;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??AF_DataRequest_10
//  651   }
//  652   else
//  653   {
//  654     req.profileID = ZDO_PROFILE_ID;
??AF_DataRequest_9:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  655 
//  656     if ( (pfnDescCB = afGetDescCB( srcEP )) )
        MOV     DPTR,#epList
??AF_DataRequest_11:
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_60:
        JZ      ??AF_DataRequest_12
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_93:
        MOV     A,?V0
        XRL     A,R2
        JNZ     ??AF_DataRequest_13
        MOV     A,?V1
        XRL     A,R3
??AF_DataRequest_13:
        MOV     DPL,R0
        MOV     DPH,R1
        JNZ     ??AF_DataRequest_11
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_99:
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,R4
        ORL     A,R5
        JZ      ??AF_DataRequest_12
//  657     {
//  658       uint16 *pID = (uint16 *)(pfnDescCB(
//  659                                    AF_DESCRIPTOR_PROFILE_ID, srcEP->endPoint ));
        ; Setup parameters for indirect call
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x2
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?CALL_IND
//  660       if ( pID )
        MOV     A,R2
        ORL     A,R3
        JZ      ??AF_DataRequest_14
//  661       {
//  662         req.profileID = *pID;
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_105:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine36_0 & 0xFFFF
//  663         osal_mem_free( pID );
??CrossCallReturnLabel_73:
        ; Setup parameters for call to function osal_mem_free
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
        SJMP    ??AF_DataRequest_14
//  664       }
//  665     }
//  666     else if ( srcEP->simpleDesc )
??AF_DataRequest_12:
        MOV     DPL,?V0
        MOV     DPH,?V1
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_66:
        JZ      ??AF_DataRequest_14
//  667     {
//  668       req.profileID = srcEP->simpleDesc->AppProfId;
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine38_0 & 0xFFFF
//  669     }
//  670   }
??CrossCallReturnLabel_82:
        INC     DPTR
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_100:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
??AF_DataRequest_10:
        MOVX    @DPTR,A
//  671 
//  672   req.txOptions = 0;
??AF_DataRequest_14:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  673 
//  674   if ( ( options & AF_ACK_REQUEST              ) &&
//  675        ( req.dstAddr.addrMode != AddrBroadcast ) &&
//  676        ( req.dstAddr.addrMode != AddrGroup     )    )
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.4
        JNC     ??AF_DataRequest_15
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xf
        JZ      ??AF_DataRequest_15
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??AF_DataRequest_15
//  677   {
//  678     req.txOptions |=  APS_TX_OPTIONS_ACK;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  679   }
//  680 
//  681   if ( options & AF_SKIP_ROUTING )
??AF_DataRequest_15:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.7
        JNC     ??AF_DataRequest_16
//  682   {
//  683     req.txOptions |=  APS_TX_OPTIONS_SKIP_ROUTING;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x10
        MOVX    @DPTR,A
//  684   }
//  685 
//  686   if ( options & AF_EN_SECURITY )
??AF_DataRequest_16:
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.6
        JNC     ??AF_DataRequest_17
//  687   {
//  688     req.txOptions |= APS_TX_OPTIONS_SECURITY_ENABLE;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x1
        MOVX    @DPTR,A
//  689     mtu.aps.secure = TRUE;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        SJMP    ??AF_DataRequest_18
//  690   }
//  691   else
//  692   {
//  693     mtu.aps.secure = FALSE;
??AF_DataRequest_17:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
??AF_DataRequest_18:
        MOVX    @DPTR,A
//  694   }
//  695 
//  696   if ( options & AF_PREPROCESS )
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.2
        JNC     ??AF_DataRequest_19
//  697   {
//  698     req.txOptions |=  APS_TX_OPTIONS_PREPROCESS;
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ORL     A,#0x40
        MOVX    @DPTR,A
//  699   }
//  700 
//  701   mtu.kvp = FALSE;
??AF_DataRequest_19:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  702 
//  703   if ( options & AF_SUPRESS_ROUTE_DISC_NETWORK )
        MOV     A,?V2
        MOV     C,0xE0 /* A   */.5
        JNC     ??AF_DataRequest_20
//  704   {
//  705     req.discoverRoute = DISC_ROUTE_INITIATE;
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        SJMP    ??AF_DataRequest_21
//  706   }
//  707   else
//  708   {
//  709     req.discoverRoute = AF_DataRequestDiscoverRoute;
??AF_DataRequest_20:
        MOV     DPTR,#AF_DataRequestDiscoverRoute
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
??AF_DataRequest_21:
        MOVX    @DPTR,A
        MOV     A,#0x34
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V5,A
//  710   }
//  711 
//  712   req.transID       = *transID;
        MOV     DPL,?V4
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine24 & 0xFFFF
//  713   req.srcEP         = srcEP->endPoint;
??CrossCallReturnLabel_37:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine20 & 0xFFFF
//  714   req.dstEP         = dstAddr->endPoint;
??CrossCallReturnLabel_29:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  715   req.clusterID     = cID;
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_101:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     A,#0x30
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  716   req.asduLen       = len;
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  717   req.asdu          = buf;
        MOV     A,#0x32
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine43_0 & 0xFFFF
??CrossCallReturnLabel_102:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine36_0 & 0xFFFF
//  718   req.radiusCounter = radius;
??CrossCallReturnLabel_75:
        MOV     A,#0x36
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine24 & 0xFFFF
//  719 #if defined ( INTER_PAN )
//  720   req.dstPanId      = dstAddr->panId;
//  721 #endif // INTER_PAN
//  722 
//  723   // Look if there is a Callback function registered for this endpoint
//  724   // The callback is used to control the AF Transaction ID used when sending messages
//  725   pList = afFindEndPointDescList( srcEP->endPoint );
??CrossCallReturnLabel_38:
        MOV     R1,A
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R4,?V6
        MOV     R5,?V7
//  726 
//  727   if ( ( pList != NULL ) && ( pList->pfnApplCB != NULL ) )
        MOV     A,R4
        ORL     A,R5
        JZ      ??AF_DataRequest_22
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_68:
        JZ      ??AF_DataRequest_22
//  728   {
//  729     pList->pfnApplCB( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine38_0 & 0xFFFF
//  730   }
??CrossCallReturnLabel_83:
        LCALL   ?CALL_IND
//  731 
//  732 #if defined ( INTER_PAN )
//  733   if ( StubAPS_InterPan( dstAddr->panId, dstAddr->endPoint ) )
//  734   {
//  735     if ( len > INTERP_DataReqMTU() )
//  736     {
//  737       stat = afStatus_INVALID_PARAMETER;
//  738     }
//  739     else
//  740     {
//  741       stat = INTERP_DataReq( &req );
//  742     }
//  743   }
//  744   else
//  745 #endif // INTER_PAN
//  746   {
//  747     if (len > afDataReqMTU( &mtu ) )
??AF_DataRequest_22:
        ; Setup parameters for call to function afDataReqMTU
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   `??afDataReqMTU::?relay`; Banked call to: afDataReqMTU
        MOV     A,R1
        CLR     C
        SUBB    A,R6
        CLR     A
        SUBB    A,R7
        JNC     ??AF_DataRequest_23
//  748     {
//  749       if (apsfSendFragmented)
        MOV     DPTR,#apsfSendFragmented
        LCALL   ??Subroutine35_0 & 0xFFFF
??CrossCallReturnLabel_64:
        JZ      ??AF_DataRequest_24
//  750       {
//  751         stat = (*apsfSendFragmented)( &req );
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   ??Subroutine39_0 & 0xFFFF
//  752       }
??CrossCallReturnLabel_79:
        LCALL   ?CALL_IND
        SJMP    ??AF_DataRequest_25
//  753       else
//  754       {
//  755         stat = afStatus_INVALID_PARAMETER;
??AF_DataRequest_24:
        MOV     R6,#0x2
        SJMP    ??AF_DataRequest_26
//  756       }
//  757     }
//  758     else
//  759     {
//  760       stat = APSDE_DataReq( &req );
??AF_DataRequest_23:
        ; Setup parameters for call to function APSDE_DataReq
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??APSDE_DataReq::?relay`; Banked call to: APSDE_DataReq
??AF_DataRequest_25:
        MOV     A,R1
        MOV     R6,A
//  761     }
//  762   }
//  763 
//  764   /*
//  765    * If this is an EndPoint-to-EndPoint message on the same device, it will not
//  766    * get added to the NWK databufs. So it will not go OTA and it will not get
//  767    * a MACCB_DATA_CONFIRM_CMD callback. Thus it is necessary to generate the
//  768    * AF_DATA_CONFIRM_CMD here. Note that APSDE_DataConfirm() only generates one
//  769    * message with the first in line TransSeqNumber, even on a multi message.
//  770    * Also note that a reflected msg will not have its confirmation generated
//  771    * here.
//  772    */
//  773   if ( (req.dstAddr.addrMode == Addr16Bit) &&
//  774        (req.dstAddr.addr.shortAddr == NLME_GetShortAddr()) )
??AF_DataRequest_26:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??AF_DataRequest_27
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   `??NLME_GetShortAddr::?relay`; Banked call to: NLME_GetShortAddr
        MOV     ?V6,R2
        MOV     ?V7,R3
        MOV     R0,?V6
        MOV     R1,?V7
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??AF_DataRequest_28
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??AF_DataRequest_28:
        JNZ     ??AF_DataRequest_27
//  775   {
//  776 
//  777     afDataConfirm( srcEP->endPoint, *transID, stat );
        ; Setup parameters for call to function afDataConfirm
        MOV     A,R6
        MOV     R3,A
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   `??afDataConfirm::?relay`; Banked call to: afDataConfirm
//  778   }
//  779 
//  780   if ( stat == afStatus_SUCCESS )
??AF_DataRequest_27:
        MOV     A,R6
        JNZ     ??AF_DataRequest_29
//  781   {
//  782     (*transID)++;
        MOV     DPL,?V4
        MOV     DPH,?V5
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  783   }
//  784 
//  785   return (afStatus_t)stat;
??AF_DataRequest_29:
        MOV     A,R6
        MOV     R1,A
??AF_DataRequest_3:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
//  786 }
          CFI EndBlock cfiBlock92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function AF_DataRequest
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker95 Using cfiCommon1
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_47:
        MOVX    A,@DPTR
        RET
          CFI (cfiCond93) CFA_SP SP+0
          CFI (cfiCond94) CFA_SP SP+0
          CFI (cfiPicker95) CFA_SP SP+0
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond96 Using cfiCommon0
          CFI Function afReflectError
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function AF_DataRequest
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+-2
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker98 Using cfiCommon1
          CFI (cfiPicker98) NoFunction
          CFI (cfiPicker98) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_55:
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond96) CFA_SP SP+0
          CFI (cfiCond97) CFA_SP SP+0
          CFI (cfiPicker98) CFA_SP SP+0
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiPicker98

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function afBuildMSGIncoming
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+-2
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        MOV     DPL,A
        CLR     A
        ADDC    A,R7
        MOV     DPH,A
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function afRegisterExtended
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+-2
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function afBuildMSGIncoming
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+-2
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function AF_DataRequest
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+-2
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function AF_DataRequest
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+-2
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function AF_DataRequest
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+-2
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function AF_DataRequest
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+-2
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function afCopyAddress
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+-2
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function afBuildMSGIncoming
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+-2
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function afBuildMSGIncoming
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond111) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond111) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond111) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond111) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond111) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond111) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond111) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond111) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond111) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond111) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond111) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond111) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond111) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond111) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond111) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond111) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond111) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond111) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond111) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond111) CFA_SP SP+-2
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI (cfiCond102) CFA_SP SP+0
          CFI (cfiCond103) CFA_SP SP+0
          CFI (cfiCond104) CFA_SP SP+0
          CFI (cfiCond105) CFA_SP SP+0
          CFI (cfiCond106) CFA_SP SP+0
          CFI (cfiCond107) CFA_SP SP+0
          CFI (cfiCond108) CFA_SP SP+0
          CFI (cfiCond109) CFA_SP SP+0
          CFI (cfiCond110) CFA_SP SP+0
          CFI (cfiCond111) CFA_SP SP+0
          CFI (cfiPicker112) CFA_SP SP+0
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112
//  787 
//  788 #if defined ( ZIGBEE_SOURCE_ROUTING )
//  789 /*********************************************************************
//  790  * @fn      AF_DataRequestSrcRtg
//  791  *
//  792  * @brief   Common functionality for invoking APSDE_DataReq() for both
//  793  *          SendMulti and MSG-Send.
//  794  *
//  795  * input parameters
//  796  *
//  797  * @param  *dstAddr - Full ZB destination address: Nwk Addr + End Point.
//  798  * @param  *srcEP - Origination (i.e. respond to or ack to) End Point Descr.
//  799  * @param   cID - A valid cluster ID as specified by the Profile.
//  800  * @param   len - Number of bytes of data pointed to by next param.
//  801  * @param  *buf - A pointer to the data bytes to send.
//  802  * @param  *transID - A pointer to a byte which can be modified and which will
//  803  *                    be used as the transaction sequence number of the msg.
//  804  * @param   options - Valid bit mask of Tx options.
//  805  * @param   radius - Normally set to AF_DEFAULT_RADIUS.
//  806  * @param   relayCnt - Number of devices in the relay list
//  807  * @param   pRelayList - Pointer to the relay list
//  808  *
//  809  * output parameters
//  810  *
//  811  * @param  *transID - Incremented by one if the return value is success.
//  812  *
//  813  * @return  afStatus_t - See previous definition of afStatus_... types.
//  814  */
//  815 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  816 afStatus_t AF_DataRequestSrcRtg( afAddrType_t *dstAddr, endPointDesc_t *srcEP,
AF_DataRequestSrcRtg:
          CFI Block cfiBlock113 Using cfiCommon0
          CFI Function AF_DataRequestSrcRtg
        CODE
//  817                            uint16 cID, uint16 len, uint8 *buf, uint8 *transID,
//  818                            uint8 options, uint8 radius, uint8 relayCnt, uint16* pRelayList )
//  819 {
        FUNCALL AF_DataRequestSrcRtg, RTG_AddSrcRtgEntry_Guaranteed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AF_DataRequestSrcRtg, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R4
        MOV     ?V1,R5
        MOV     ?V2,R1
//  820   uint8 status;
//  821 
//  822   /* Add the source route to the source routing table */
//  823   status = RTG_AddSrcRtgEntry_Guaranteed( dstAddr->addr.shortAddr, relayCnt,
//  824                                          pRelayList );
        ; Setup parameters for call to function RTG_AddSrcRtgEntry_Guaranteed
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL   `??RTG_AddSrcRtgEntry_Guaranteed::?relay`; Banked call to: RTG_AddSrcRtgEntry_Guaranteed
        MOV     A,R1
        MOV     R1,A
//  825 
//  826   if( status == RTG_SUCCESS)
        JNZ     ??AF_DataRequestSrcRtg_0
//  827   {
//  828     /* Call AF_DataRequest to send the data */
//  829     status = AF_DataRequest( dstAddr, srcEP, cID, len, buf, transID, options, radius );
        ; Setup parameters for call to function AF_DataRequest
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V3,A
        MOV     R0,#?V3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,?V2
        MOV     R4,?V0
        MOV     R5,?V1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??AF_DataRequest::?relay`; Banked call to: AF_DataRequest
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        MOV     R1,A
        SJMP    ??AF_DataRequestSrcRtg_1
//  830   }
//  831   else if( status == RTG_INVALID_PATH )
??AF_DataRequestSrcRtg_0:
        MOV     A,#0x5
        XRL     A,R1
        JNZ     ??AF_DataRequestSrcRtg_2
//  832   {
//  833     /* The source route relay count is exceeding the network limit */
//  834     status = afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??AF_DataRequestSrcRtg_1
//  835   }
//  836   else
//  837   {
//  838     /* The guaranteed adding entry fails due to memory failure */
//  839     status = afStatus_MEM_FAIL;
??AF_DataRequestSrcRtg_2:
        MOV     R1,#0x10
//  840   }
//  841   return status;
??AF_DataRequestSrcRtg_1:
        LJMP    ?Subroutine0 & 0xFFFF
//  842 }
          CFI EndBlock cfiBlock113

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function afBuildMSGIncoming
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond115) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond115) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+-2
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function afBuildMSGIncoming
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond116) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond116) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+-2
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function AF_DataRequestSrcRtg
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+-2
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond118 Using cfiCommon0
          CFI (cfiCond118) Function afEndPoints
          CFI (cfiCond118) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond118) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond118) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond118) CFA_SP SP+-7
          CFI Block cfiPicker119 Using cfiCommon1
          CFI (cfiPicker119) NoFunction
          CFI (cfiPicker119) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI (cfiCond114) CFA_SP SP+0
          CFI (cfiCond115) CFA_SP SP+0
          CFI (cfiCond116) CFA_SP SP+0
          CFI (cfiCond117) CFA_SP SP+0
          CFI (cfiCond118) CFA_SP SP+-5
          CFI (cfiPicker119) CFA_SP SP+0
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiCond118
          CFI EndBlock cfiPicker119
//  843 
//  844 #endif
//  845 
//  846 /*********************************************************************
//  847  * @fn      afFindEndPointDescList
//  848  *
//  849  * @brief   Find the endpoint description entry from the endpoint
//  850  *          number.
//  851  *
//  852  * @param   EndPoint - Application Endpoint to look for
//  853  *
//  854  * @return  the address to the endpoint/interface description entry
//  855  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  856 static epList_t *afFindEndPointDescList( uint8 EndPoint )
afFindEndPointDescList:
          CFI Block cfiBlock120 Using cfiCommon0
          CFI Function afFindEndPointDescList
        CODE
//  857 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  858   epList_t *epSearch;
//  859 
//  860   for (epSearch = epList; epSearch != NULL; epSearch = epSearch->nextDesc)
        MOV     DPTR,#epList
        SJMP    ??afFindEndPointDescList_0
??afFindEndPointDescList_1:
        MOV     DPL,R2
        MOV     DPH,R3
??afFindEndPointDescList_0:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ      ??afFindEndPointDescList_2
//  861   {
//  862     if (epSearch->epDesc->endPoint == EndPoint)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine37_0 & 0xFFFF
//  863     {
//  864       break;
//  865     }
//  866   }
??CrossCallReturnLabel_84:
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??afFindEndPointDescList_1
//  867 
//  868   return epSearch;
??afFindEndPointDescList_2:
          CFI EndBlock cfiBlock120
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  869 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock121 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock121

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond122 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function afEndPoints
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond123) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond123) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond123) CFA_SP SP+-7
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        MOV     DPL,R4
        MOV     DPH,R5
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiCond125 Using cfiCommon0
          CFI Function afFindEndPointDescList
          CFI Conditional ??CrossCallReturnLabel_84
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function afFindSimpleDesc
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+-2
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function afFindSimpleDesc
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+-2
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function afEndPoints
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond128) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond128) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond128) CFA_SP SP+-7
          CFI Block cfiPicker129 Using cfiCommon1
          CFI (cfiPicker129) NoFunction
          CFI (cfiPicker129) Picker
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiPicker129
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiCond130 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_80
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function afIncomingData
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+-2
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function AF_DataRequest
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+-2
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function AF_DataRequest
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+-2
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function afFindEndPointDescList
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond134) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond134) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond134) CFA_SP SP+-7
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function afFindSimpleDesc
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+-2
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function afFindSimpleDesc
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond136) CFA_SP SP+-2
          CFI (cfiCond136) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function afEndPoints
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond137) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond137) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond137) CFA_SP SP+-7
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        INC     DPTR
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function afIncomingData
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond140) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond140) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond140) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond140) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond140) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+-2
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function afIncomingData
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond141) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond141) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond141) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond141) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond141) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond141) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond141) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond141) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond141) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+-2
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function AF_DataRequest
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+-2
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function AF_DataRequest
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+-2
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function afFindEndPointDescList
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond144) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond144) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond144) CFA_SP SP+-7
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function afFindSimpleDesc
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+-2
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function afFindSimpleDesc
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+-2
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function afEndPoints
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond147) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond147) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond147) CFA_SP SP+-7
          CFI Block cfiPicker148 Using cfiCommon1
          CFI (cfiPicker148) NoFunction
          CFI (cfiPicker148) Picker
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI (cfiCond139) CFA_SP SP+0
          CFI (cfiCond140) CFA_SP SP+0
          CFI (cfiCond141) CFA_SP SP+0
          CFI (cfiCond142) CFA_SP SP+0
          CFI (cfiCond143) CFA_SP SP+0
          CFI (cfiCond144) CFA_SP SP+-5
          CFI (cfiCond145) CFA_SP SP+0
          CFI (cfiCond146) CFA_SP SP+0
          CFI (cfiCond147) CFA_SP SP+-5
          CFI (cfiPicker148) CFA_SP SP+0
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function afFindEndPointDescList
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond150) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond150) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond150) CFA_SP SP+-7
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function afFindSimpleDesc
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+-2
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        RET
          CFI (cfiCond149) CFA_SP SP+0
          CFI (cfiCond150) CFA_SP SP+-5
          CFI (cfiCond151) CFA_SP SP+0
          CFI (cfiPicker152) CFA_SP SP+0
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152
//  870 
//  871 /*********************************************************************
//  872  * @fn      afFindEndPointDesc
//  873  *
//  874  * @brief   Find the endpoint description entry from the endpoint
//  875  *          number.
//  876  *
//  877  * @param   EndPoint - Application Endpoint to look for
//  878  *
//  879  * @return  the address to the endpoint/interface description entry
//  880  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  881 endPointDesc_t *afFindEndPointDesc( uint8 EndPoint )
afFindEndPointDesc:
          CFI Block cfiBlock153 Using cfiCommon0
          CFI Function afFindEndPointDesc
        CODE
//  882 {
        FUNCALL afFindEndPointDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  883   epList_t *epSearch;
//  884 
//  885   // Look for the endpoint
//  886   epSearch = afFindEndPointDescList( EndPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     DPL,R2
        MOV     DPH,R3
//  887 
//  888   if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afFindEndPointDesc_0
//  889     return ( epSearch->epDesc );
        LCALL   ??Subroutine41_0 & 0xFFFF
??CrossCallReturnLabel_94:
        SJMP    ??afFindEndPointDesc_1
//  890   else
//  891     return ( (endPointDesc_t *)NULL );
??afFindEndPointDesc_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??afFindEndPointDesc_1:
        LJMP    ?Subroutine1 & 0xFFFF
//  892 }
          CFI EndBlock cfiBlock153
//  893 
//  894 /*********************************************************************
//  895  * @fn      afFindSimpleDesc
//  896  *
//  897  * @brief   Find the Simple Descriptor from the endpoint number.
//  898  *
//  899  * @param   EP - Application Endpoint to look for.
//  900  *
//  901  * @return  Non-zero to indicate that the descriptor memory must be freed.
//  902  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  903 uint8 afFindSimpleDesc( SimpleDescriptionFormat_t **ppDesc, uint8 EP )
afFindSimpleDesc:
          CFI Block cfiBlock154 Using cfiCommon0
          CFI Function afFindSimpleDesc
        CODE
//  904 {
        FUNCALL afFindSimpleDesc, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0,R1
//  905   epList_t *epItem = afFindEndPointDescList( EP );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V2,R2
        MOV     ?V3,R3
        MOV     R4,?V2
        MOV     R5,?V3
//  906   uint8 rtrn = FALSE;
        MOV     R1,#0x0
//  907 
//  908   if ( epItem )
        MOV     A,R4
        ORL     A,R5
        JZ      ??afFindSimpleDesc_0
//  909   {
//  910     if ( epItem->pfnDescCB )
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      ??afFindSimpleDesc_1
//  911     {
//  912       *ppDesc = epItem->pfnDescCB( AF_DESCRIPTOR_SIMPLE, EP );
        ; Setup parameters for indirect call
        MOV     R2,?V0
        INC     R1
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine37_0 & 0xFFFF
??CrossCallReturnLabel_85:
        LCALL   ?CALL_IND
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  913       rtrn = TRUE;
        MOV     R1,#0x1
        SJMP    ??afFindSimpleDesc_2
//  914     }
//  915     else
//  916     {
//  917       *ppDesc = epItem->epDesc->simpleDesc;
??afFindSimpleDesc_1:
        LCALL   ?Subroutine9 & 0xFFFF
//  918     }
//  919   }
??CrossCallReturnLabel_86:
        LCALL   ??Subroutine40_0 & 0xFFFF
??CrossCallReturnLabel_95:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        SJMP    ??afFindSimpleDesc_3
//  920   else
//  921   {
//  922     *ppDesc = NULL;
??afFindSimpleDesc_0:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
??afFindSimpleDesc_3:
        MOVX    @DPTR,A
//  923   }
//  924 
//  925   return rtrn;
??afFindSimpleDesc_2:
        LJMP    ?Subroutine0 & 0xFFFF
//  926 }
          CFI EndBlock cfiBlock154
//  927 
//  928 /*********************************************************************
//  929  * @fn      afGetDescCB
//  930  *
//  931  * @brief   Get the Descriptor callback function.
//  932  *
//  933  * @param   epDesc - pointer to the endpoint descriptor
//  934  *
//  935  * @return  function pointer or NULL
//  936  */
//  937 static pDescCB afGetDescCB( endPointDesc_t *epDesc )
//  938 {
//  939   epList_t *epSearch;
//  940 
//  941   // Start at the beginning
//  942   epSearch = epList;
//  943 
//  944   // Look through the list until the end
//  945   while ( epSearch )
//  946   {
//  947     // Is there a match?
//  948     if ( epSearch->epDesc == epDesc )
//  949     {
//  950       return ( epSearch->pfnDescCB );
//  951     }
//  952     else
//  953       epSearch = epSearch->nextDesc;  // Next entry
//  954   }
//  955 
//  956   return ( (pDescCB)NULL );
//  957 }
//  958 
//  959 /*********************************************************************
//  960  * @fn      afDataReqMTU
//  961  *
//  962  * @brief   Get the Data Request MTU(Max Transport Unit).
//  963  *
//  964  * @param   fields - afDataReqMTU_t
//  965  *
//  966  * @return  uint8(MTU)
//  967  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  968 uint8 afDataReqMTU( afDataReqMTU_t* fields )
afDataReqMTU:
          CFI Block cfiBlock155 Using cfiCommon0
          CFI Function afDataReqMTU
        CODE
//  969 {
        FUNCALL afDataReqMTU, APSDE_DataReqMTU
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  970   uint8 len;
//  971   uint8 hdr;
//  972 
//  973   if ( fields->kvp == TRUE )
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??afDataReqMTU_0
//  974   {
//  975     hdr = AF_HDR_KVP_MAX_LEN;
        MOV     R6,#0x8
        SJMP    ??afDataReqMTU_1
//  976   }
//  977   else
//  978   {
//  979     hdr = AF_HDR_V1_1_MAX_LEN;
??afDataReqMTU_0:
        MOV     R6,#0x0
//  980   }
//  981 
//  982   len = (uint8)(APSDE_DataReqMTU(&fields->aps) - hdr);
//  983 
//  984   return len;
??afDataReqMTU_1:
        ; Setup parameters for call to function APSDE_DataReqMTU
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??APSDE_DataReqMTU::?relay`; Banked call to: APSDE_DataReqMTU
        MOV     A,R1
        CLR     C
        SUBB    A,R6
        MOV     R1,A
        LJMP    ?Subroutine2 & 0xFFFF
//  985 }
          CFI EndBlock cfiBlock155
//  986 
//  987 /*********************************************************************
//  988  * @fn      afGetMatch
//  989  *
//  990  * @brief   Set the allow response flag.
//  991  *
//  992  * @param   ep - Application Endpoint to look for
//  993  * @param   action - true - allow response, false - no response
//  994  *
//  995  * @return  TRUE allow responses, FALSE no response
//  996  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  997 uint8 afGetMatch( uint8 ep )
afGetMatch:
          CFI Block cfiBlock156 Using cfiCommon0
          CFI Function afGetMatch
        CODE
//  998 {
        FUNCALL afGetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  999   epList_t *epSearch;
// 1000 
// 1001   // Look for the endpoint
// 1002   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     DPL,R2
        MOV     DPH,R3
// 1003 
// 1004   if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afGetMatch_0
// 1005   {
// 1006     if ( epSearch->flags & eEP_AllowMatch )
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??afGetMatch_0
// 1007       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afGetMatch_1
// 1008     else
// 1009       return ( FALSE );
// 1010   }
// 1011   else
// 1012     return ( FALSE );
??afGetMatch_0:
        MOV     R1,#0x0
??afGetMatch_1:
          CFI EndBlock cfiBlock156
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
// 1013 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock157 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock157
// 1014 
// 1015 /*********************************************************************
// 1016  * @fn      afSetMatch
// 1017  *
// 1018  * @brief   Set the allow response flag.
// 1019  *
// 1020  * @param   ep - Application Endpoint to look for
// 1021  * @param   action - true - allow response, false - no response
// 1022  *
// 1023  * @return  TRUE if success, FALSE if endpoint not found
// 1024  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1025 uint8 afSetMatch( uint8 ep, uint8 action )
afSetMatch:
          CFI Block cfiBlock158 Using cfiCommon0
          CFI Function afSetMatch
        CODE
// 1026 {
        FUNCALL afSetMatch, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R7,A
// 1027   epList_t *epSearch;
// 1028 
// 1029   // Look for the endpoint
// 1030   epSearch = afFindEndPointDescList( ep );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     DPL,R2
        MOV     DPH,R3
// 1031 
// 1032   if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afSetMatch_0
// 1033   {
// 1034     if ( action )
        MOV     A,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        JZ      ??afSetMatch_1
// 1035     {
// 1036       epSearch->flags |= eEP_AllowMatch;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.0
        SJMP    ??afSetMatch_2
// 1037     }
// 1038     else
// 1039     {
// 1040       epSearch->flags &= (eEP_AllowMatch ^ 0xFFFF);
??afSetMatch_1:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.0
??afSetMatch_2:
        MOVX    @DPTR,A
// 1041     }
// 1042     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afSetMatch_3
// 1043   }
// 1044   else
// 1045     return ( FALSE );
??afSetMatch_0:
        MOV     R1,#0x0
??afSetMatch_3:
        SJMP    ?Subroutine1
// 1046 }
          CFI EndBlock cfiBlock158
// 1047 
// 1048 /*********************************************************************
// 1049  * @fn      afNumEndPoints
// 1050  *
// 1051  * @brief   Returns the number of endpoints defined (including 0)
// 1052  *
// 1053  * @param   none
// 1054  *
// 1055  * @return  number of endpoints
// 1056  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1057 uint8 afNumEndPoints( void )
afNumEndPoints:
          CFI Block cfiBlock159 Using cfiCommon0
          CFI Function afNumEndPoints
        CODE
// 1058 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1059   epList_t *epSearch;
// 1060   uint8 endpoints;
// 1061 
// 1062   // Start at the beginning
// 1063   epSearch = epList;
        MOV     DPTR,#epList
        LCALL   ?Subroutine13 & 0xFFFF
// 1064   endpoints = 0;
??CrossCallReturnLabel_18:
        MOV     R1,#0x0
        SJMP    ??afNumEndPoints_0
// 1065 
// 1066   while ( epSearch )
// 1067   {
// 1068     endpoints++;
??afNumEndPoints_1:
        INC     R1
// 1069     epSearch = epSearch->nextDesc;
        LCALL   ??Subroutine42_0 & 0xFFFF
// 1070   }
??CrossCallReturnLabel_92:
        MOV     DPL,R2
        MOV     DPH,R3
??afNumEndPoints_0:
        MOV     A,DPL
        ORL     A,DPH
        JNZ     ??afNumEndPoints_1
// 1071 
// 1072   return ( endpoints );
        LJMP    ?Subroutine3 & 0xFFFF
// 1073 }
          CFI EndBlock cfiBlock159

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond160 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function afNumEndPoints
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond161) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond161) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond161) CFA_SP SP+-7
          CFI Block cfiPicker162 Using cfiCommon1
          CFI (cfiPicker162) NoFunction
          CFI (cfiPicker162) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_108:
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI (cfiCond160) CFA_SP SP+0
          CFI (cfiCond161) CFA_SP SP+-5
          CFI (cfiPicker162) CFA_SP SP+0
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiPicker162

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond163 Using cfiCommon0
          CFI Function afIncomingData
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function afIncomingData
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+-2
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker165 Using cfiCommon1
          CFI (cfiPicker165) NoFunction
          CFI (cfiPicker165) Picker
        INC     DPTR
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiPicker165
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond166 Using cfiCommon0
          CFI Function afFindSimpleDesc
          CFI Conditional ??CrossCallReturnLabel_95
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function afIncomingData
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+-2
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function afIncomingData
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond168) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond168) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond168) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond168) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond168) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+-2
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker169 Using cfiCommon1
          CFI (cfiPicker169) NoFunction
          CFI (cfiPicker169) Picker
        INC     DPTR
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiPicker169
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond170 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_93
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function afFindEndPointDesc
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+-2
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function afFindSimpleDesc
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+-2
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function afIncomingData
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+-2
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function afIncomingData
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+-2
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond176 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_88
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function AF_DataRequest
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+-2
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function AF_DataRequest
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+-2
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function AF_DataRequestSrcRtg
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+-2
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function afNumEndPoints
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond180) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond180) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond180) CFA_SP SP+-7
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function AF_DataRequest
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+-2
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function afFindEndPointDesc
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+-2
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond183 Using cfiCommon0
          CFI (cfiCond183) Function afFindSimpleDesc
          CFI (cfiCond183) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond183) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond183) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond183) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond183) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond183) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond183) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond183) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond183) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond183) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond183) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond183) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond183) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond183) CFA_SP SP+-2
          CFI (cfiCond183) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function afIncomingData
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond184) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond184) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond184) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond184) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond184) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond184) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond184) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond184) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond184) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond184) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond184) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+-2
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function afIncomingData
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond185) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond185) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond185) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond185) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond185) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond185) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond185) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+-2
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker186 Using cfiCommon1
          CFI (cfiPicker186) NoFunction
          CFI (cfiPicker186) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI (cfiCond176) CFA_SP SP+0
          CFI (cfiCond177) CFA_SP SP+0
          CFI (cfiCond178) CFA_SP SP+0
          CFI (cfiCond179) CFA_SP SP+0
          CFI (cfiCond180) CFA_SP SP+-5
          CFI (cfiCond181) CFA_SP SP+0
          CFI (cfiCond182) CFA_SP SP+0
          CFI (cfiCond183) CFA_SP SP+0
          CFI (cfiCond184) CFA_SP SP+0
          CFI (cfiCond185) CFA_SP SP+0
          CFI (cfiPicker186) CFA_SP SP+0
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiPicker186
// 1074 
// 1075 /*********************************************************************
// 1076  * @fn      afEndPoints
// 1077  *
// 1078  * @brief   Fills in the passed in buffer with the endpoint (numbers).
// 1079  *          Use afNumEndPoints to find out how big a buffer to supply.
// 1080  *
// 1081  * @param   epBuf - pointer to mem used
// 1082  *
// 1083  * @return  void
// 1084  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1085 void afEndPoints( uint8 *epBuf, uint8 skipZDO )
afEndPoints:
          CFI Block cfiBlock187 Using cfiCommon0
          CFI Function afEndPoints
        CODE
// 1086 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 1087   epList_t *epSearch;
// 1088   uint8 endPoint;
// 1089 
// 1090   // Start at the beginning
// 1091   epSearch = epList;
        MOV     DPTR,#epList
        SJMP    ??afEndPoints_0
// 1092 
// 1093   while ( epSearch )
// 1094   {
// 1095     endPoint = epSearch->epDesc->endPoint;
??afEndPoints_1:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_87:
        MOVX    A,@DPTR
        MOV     R0,A
// 1096 
// 1097     if ( !skipZDO || endPoint != 0 )
        MOV     A,R1
        JZ      ??afEndPoints_2
        MOV     A,R0
        JZ      ??afEndPoints_3
// 1098       *epBuf++ = endPoint;
??afEndPoints_2:
        MOV     A,R0
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
// 1099 
// 1100     epSearch = epSearch->nextDesc;
??afEndPoints_3:
        MOV     DPL,R4
        MOV     DPH,R5
// 1101   }
??afEndPoints_0:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     A,R4
        ORL     A,R5
        JNZ     ??afEndPoints_1
// 1102 }
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock187
// 1103 
// 1104 /*********************************************************************
// 1105  * @fn      afCopyAddress
// 1106  *
// 1107  * @brief   Fills in the passed in afAddrType_t parameter with the corresponding information
// 1108  *          from the zAddrType_t parameter.
// 1109  *
// 1110  * @param   epBuf - pointer to mem used
// 1111  *
// 1112  * @return  void
// 1113  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1114 void afCopyAddress( afAddrType_t *afAddr, zAddrType_t *zAddr )
afCopyAddress:
          CFI Block cfiBlock188 Using cfiCommon0
          CFI Function afCopyAddress
        CODE
// 1115 {
        FUNCALL afCopyAddress, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1116   afAddr->addrMode = (afAddrMode_t)zAddr->addrMode;
        MOV     A,R4
        ADD     A,#0x8
        MOV     R0,A
        CLR     A
        ADDC    A,R5
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine25 & 0xFFFF
// 1117   if ( zAddr->addrMode == Addr64Bit )
??CrossCallReturnLabel_40:
        JNZ     ??afCopyAddress_0
// 1118   {
// 1119     (void)osal_cpyExtAddr( afAddr->addr.extAddr, zAddr->addr.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   `??sAddrExtCpy::?relay`; Banked call to: sAddrExtCpy
        SJMP    ??CrossCallReturnLabel_76
// 1120   }
// 1121   else
// 1122   {
// 1123     afAddr->addr.shortAddr = zAddr->addr.shortAddr;
??afCopyAddress_0:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine43_0 & 0xFFFF
// 1124   }
??CrossCallReturnLabel_103:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine36_0 & 0xFFFF
// 1125 
// 1126   // Since zAddrType_t has no INTER-PAN information, set the panId member to zero.
// 1127   afAddr->panId = 0;
??CrossCallReturnLabel_76:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1128 }
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock188

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond189 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function afCopyAddress
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+-2
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker191 Using cfiCommon1
          CFI (cfiPicker191) NoFunction
          CFI (cfiPicker191) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_53:
        MOVX    A,@DPTR
        XRL     A,#0x3
        RET
          CFI (cfiCond189) CFA_SP SP+0
          CFI (cfiCond190) CFA_SP SP+0
          CFI (cfiPicker191) CFA_SP SP+0
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiPicker191

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond192 Using cfiCommon0
          CFI Function afBuildMSGIncoming
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function afBuildMSGIncoming
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond193) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond193) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond193) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond193) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond193) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond193) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+-2
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function afBuildMSGIncoming
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond194) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond194) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond194) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond194) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond194) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond194) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+-2
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function AF_DataRequest
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_39
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+-4
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function afCopyAddress
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_40
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+-4
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker197 Using cfiCommon1
          CFI (cfiPicker197) NoFunction
          CFI (cfiPicker197) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI (cfiCond192) CFA_SP SP+0
          CFI (cfiCond193) CFA_SP SP+0
          CFI (cfiCond194) CFA_SP SP+0
          CFI (cfiCond195) CFA_SP SP+-2
          CFI (cfiCond196) CFA_SP SP+-2
          CFI (cfiPicker197) CFA_SP SP+0
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiPicker197

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond198 Using cfiCommon0
          CFI Function afDelete
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function AF_DataRequest
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+-2
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200
        REQUIRE ??Subroutine43_0
        ; // Fall through to label ??Subroutine43_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine43_0:
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function AF_DataRequest
          CFI Conditional ??CrossCallReturnLabel_98
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function AF_DataRequest
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_99
          CFI (cfiCond202) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond202) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond202) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond202) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond202) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond202) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond202) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond202) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond202) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond202) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond202) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond202) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond202) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond202) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond202) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond202) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond202) CFA_SP SP+-2
          CFI (cfiCond202) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond203 Using cfiCommon0
          CFI (cfiCond203) Function AF_DataRequest
          CFI (cfiCond203) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond203) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond203) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond203) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond203) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond203) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond203) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond203) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond203) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond203) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond203) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond203) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond203) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond203) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond203) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond203) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond203) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond203) CFA_SP SP+-2
          CFI (cfiCond203) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function AF_DataRequest
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond204) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond204) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond204) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond204) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond204) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+-2
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function AF_DataRequest
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond205) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond205) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond205) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond205) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond205) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond205) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond205) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond205) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond205) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond205) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond205) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond205) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond205) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond205) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond205) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond205) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond205) CFA_SP SP+-2
          CFI (cfiCond205) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond206 Using cfiCommon0
          CFI (cfiCond206) Function afCopyAddress
          CFI (cfiCond206) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond206) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond206) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond206) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond206) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond206) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond206) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond206) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond206) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond206) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond206) CFA_SP SP+-2
          CFI (cfiCond206) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function afDelete
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+-2
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function AF_DataRequest
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond208) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond208) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond208) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond208) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond208) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+-2
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_111:
        RET
          CFI (cfiCond201) CFA_SP SP+0
          CFI (cfiCond202) CFA_SP SP+0
          CFI (cfiCond203) CFA_SP SP+0
          CFI (cfiCond204) CFA_SP SP+0
          CFI (cfiCond205) CFA_SP SP+0
          CFI (cfiCond206) CFA_SP SP+0
          CFI (cfiCond207) CFA_SP SP+0
          CFI (cfiCond208) CFA_SP SP+0
          CFI (cfiPicker209) CFA_SP SP+0
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function afRegisterExtended
          CFI Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function afRegisterExtended
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_107, ??CrossCallReturnLabel_16
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond211) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+-4
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond212 Using cfiCommon0
          CFI (cfiCond212) Function afBuildMSGIncoming
          CFI (cfiCond212) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_19
          CFI (cfiCond212) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond212) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond212) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond212) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond212) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond212) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond212) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond212) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond212) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond212) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond212) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond212) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond212) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond212) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond212) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond212) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond212) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond212) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond212) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond212) CFA_SP SP+-4
          CFI (cfiCond212) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond213 Using cfiCommon0
          CFI (cfiCond213) Function afBuildMSGIncoming
          CFI (cfiCond213) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_20
          CFI (cfiCond213) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond213) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond213) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond213) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond213) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond213) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond213) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond213) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond213) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond213) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond213) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond213) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond213) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond213) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond213) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond213) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond213) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond213) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond213) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond213) CFA_SP SP+-4
          CFI (cfiCond213) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function afBuildMSGIncoming
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_109, ??CrossCallReturnLabel_21
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond214) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond214) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond214) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond214) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond214) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond214) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond214) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond214) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+-4
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function afBuildMSGIncoming
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_3
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+-4
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function afBuildMSGIncoming
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_106, ??CrossCallReturnLabel_4
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond216) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond216) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond216) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond216) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond216) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond216) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond216) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond216) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+-4
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond217 Using cfiCommon0
          CFI (cfiCond217) Function afIncomingData
          CFI (cfiCond217) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_67
          CFI (cfiCond217) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond217) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond217) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond217) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond217) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond217) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond217) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond217) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond217) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond217) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond217) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond217) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond217) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond217) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond217) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond217) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond217) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond217) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond217) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond217) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond217) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond217) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond217) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond217) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond217) CFA_SP SP+-4
          CFI (cfiCond217) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond218 Using cfiCommon0
          CFI (cfiCond218) Function AF_DataRequest
          CFI (cfiCond218) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_68
          CFI (cfiCond218) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond218) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond218) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond218) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond218) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond218) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond218) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond218) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond218) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond218) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond218) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond218) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond218) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond218) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond218) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond218) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond218) CFA_SP SP+-4
          CFI (cfiCond218) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function afIncomingData
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_65
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond219) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond219) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond219) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond219) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond219) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond219) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond219) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond219) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond219) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond219) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond219) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond219) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond219) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+-4
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond220 Using cfiCommon0
          CFI (cfiCond220) Function AF_DataRequest
          CFI (cfiCond220) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_66
          CFI (cfiCond220) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond220) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond220) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond220) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond220) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond220) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond220) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond220) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond220) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond220) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond220) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond220) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond220) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond220) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond220) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond220) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond220) CFA_SP SP+-4
          CFI (cfiCond220) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond221 Using cfiCommon0
          CFI (cfiCond221) Function afDelete
          CFI (cfiCond221) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_61
          CFI (cfiCond221) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond221) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond221) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond221) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond221) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond221) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond221) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond221) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond221) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond221) CFA_SP SP+-4
          CFI (cfiCond221) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function afIncomingData
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_62
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+-4
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function afBuildMSGIncoming
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_63
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond223) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond223) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond223) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond223) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond223) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond223) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond223) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond223) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+-4
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond224 Using cfiCommon0
          CFI (cfiCond224) Function AF_DataRequest
          CFI (cfiCond224) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_60
          CFI (cfiCond224) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond224) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond224) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond224) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond224) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond224) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond224) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond224) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond224) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond224) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond224) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond224) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond224) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond224) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond224) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond224) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond224) CFA_SP SP+-4
          CFI (cfiCond224) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond225 Using cfiCommon0
          CFI (cfiCond225) Function AF_DataRequest
          CFI (cfiCond225) Conditional ??CrossCallReturnLabel_110, ??CrossCallReturnLabel_64
          CFI (cfiCond225) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond225) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond225) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond225) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond225) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond225) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond225) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond225) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond225) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond225) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond225) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond225) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond225) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond225) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond225) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond225) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond225) CFA_SP SP+-4
          CFI (cfiCond225) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function afBuildMSGIncoming
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_17
          CFI (cfiCond226) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond226) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond226) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond226) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond226) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond226) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond226) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond226) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond226) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond226) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond226) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond226) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond226) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond226) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond226) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond226) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond226) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond226) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond226) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond226) CFA_SP SP+-4
          CFI (cfiCond226) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond227 Using cfiCommon0
          CFI (cfiCond227) Function afNumEndPoints
          CFI (cfiCond227) Conditional ??CrossCallReturnLabel_108, ??CrossCallReturnLabel_18
          CFI (cfiCond227) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond227) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond227) CFA_SP SP+-9
          CFI Block cfiCond228 Using cfiCommon0
          CFI (cfiCond228) Function afDelete
          CFI (cfiCond228) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_104
          CFI (cfiCond228) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond228) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond228) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond228) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond228) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond228) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond228) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond228) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond228) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond228) CFA_SP SP+-4
          CFI (cfiCond228) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond229 Using cfiCommon0
          CFI (cfiCond229) Function AF_DataRequest
          CFI (cfiCond229) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_105
          CFI (cfiCond229) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond229) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond229) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond229) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond229) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond229) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond229) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond229) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond229) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond229) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond229) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond229) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond229) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond229) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond229) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond229) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond229) CFA_SP SP+-4
          CFI (cfiCond229) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function AF_DataRequest
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_98
          CFI (cfiCond230) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond230) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond230) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond230) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond230) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond230) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond230) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond230) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond230) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond230) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond230) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond230) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond230) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond230) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond230) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond230) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond230) CFA_SP SP+-4
          CFI (cfiCond230) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond231 Using cfiCommon0
          CFI (cfiCond231) Function AF_DataRequest
          CFI (cfiCond231) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_99
          CFI (cfiCond231) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond231) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond231) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond231) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond231) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond231) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond231) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond231) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond231) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond231) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond231) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond231) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond231) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond231) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond231) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond231) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond231) CFA_SP SP+-4
          CFI (cfiCond231) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond232 Using cfiCommon0
          CFI (cfiCond232) Function AF_DataRequest
          CFI (cfiCond232) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_100
          CFI (cfiCond232) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond232) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond232) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond232) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond232) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond232) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond232) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond232) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond232) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond232) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond232) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond232) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond232) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond232) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond232) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond232) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond232) CFA_SP SP+-4
          CFI (cfiCond232) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function AF_DataRequest
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_101
          CFI (cfiCond233) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond233) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond233) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond233) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond233) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond233) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond233) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond233) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond233) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond233) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond233) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond233) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond233) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond233) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond233) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond233) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond233) CFA_SP SP+-4
          CFI (cfiCond233) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function AF_DataRequest
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_102
          CFI (cfiCond234) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond234) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond234) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond234) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond234) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond234) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond234) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond234) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond234) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond234) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond234) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond234) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond234) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond234) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond234) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond234) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond234) CFA_SP SP+-4
          CFI (cfiCond234) CFA_XSP16 add(XSP16, 46)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function afCopyAddress
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_111, ??CrossCallReturnLabel_103
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+-4
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker236 Using cfiCommon1
          CFI (cfiPicker236) NoFunction
          CFI (cfiPicker236) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI (cfiCond210) CFA_SP SP+-2
          CFI (cfiCond211) CFA_SP SP+-2
          CFI (cfiCond212) CFA_SP SP+-2
          CFI (cfiCond213) CFA_SP SP+-2
          CFI (cfiCond214) CFA_SP SP+-2
          CFI (cfiCond215) CFA_SP SP+-2
          CFI (cfiCond216) CFA_SP SP+-2
          CFI (cfiCond217) CFA_SP SP+-2
          CFI (cfiCond218) CFA_SP SP+-2
          CFI (cfiCond219) CFA_SP SP+-2
          CFI (cfiCond220) CFA_SP SP+-2
          CFI (cfiCond221) CFA_SP SP+-2
          CFI (cfiCond222) CFA_SP SP+-2
          CFI (cfiCond223) CFA_SP SP+-2
          CFI (cfiCond224) CFA_SP SP+-2
          CFI (cfiCond225) CFA_SP SP+-2
          CFI (cfiCond226) CFA_SP SP+-2
          CFI (cfiCond227) CFA_SP SP+-7
          CFI (cfiCond228) CFA_SP SP+-2
          CFI (cfiCond229) CFA_SP SP+-2
          CFI (cfiCond230) CFA_SP SP+-2
          CFI (cfiCond231) CFA_SP SP+-2
          CFI (cfiCond232) CFA_SP SP+-2
          CFI (cfiCond233) CFA_SP SP+-2
          CFI (cfiCond234) CFA_SP SP+-2
          CFI (cfiCond235) CFA_SP SP+-2
          CFI (cfiPicker236) CFA_SP SP+0
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiCond212
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiCond217
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiCond220
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiCond224
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiCond227
          CFI EndBlock cfiCond228
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiCond231
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiPicker236
// 1129 
// 1130 /**************************************************************************************************
// 1131  * @fn          afAPSF_ConfigGet
// 1132  *
// 1133  * @brief       This function ascertains the fragmentation configuration that corresponds to
// 1134  *              the specified EndPoint.
// 1135  *
// 1136  * input parameters
// 1137  *
// 1138  * @param       endPoint - The source EP of a Tx or destination EP of a Rx fragmented message.
// 1139  *
// 1140  * output parameters
// 1141  *
// 1142  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1143  *
// 1144  * @return      None.
// 1145  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1146 void afAPSF_ConfigGet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigGet:
          CFI Block cfiBlock237 Using cfiCommon0
          CFI Function afAPSF_ConfigGet
        CODE
// 1147 {
        FUNCALL afAPSF_ConfigGet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigGet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1148   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
// 1149 
// 1150   if (pList == NULL)
        MOV     A,R0
        ORL     A,R1
        JNZ     ??afAPSF_ConfigGet_0
// 1151   {
// 1152     pCfg->frameDelay = APSF_DEFAULT_INTERFRAME_DELAY;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x32
        MOVX    @DPTR,A
// 1153     pCfg->windowSize = APSF_DEFAULT_WINDOW_SIZE;
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
        SJMP    ??afAPSF_ConfigGet_1
// 1154   }
// 1155   else
// 1156   {
// 1157     (void)osal_memcpy(pCfg, &pList->apsfCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigGet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R0
        ADD     A,#0x6
        MOV     ?V0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1158   }
// 1159 }
??afAPSF_ConfigGet_1:
          CFI EndBlock cfiBlock237
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock238 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock238
// 1160 
// 1161 /**************************************************************************************************
// 1162  * @fn          afAPSF_ConfigSet
// 1163  *
// 1164  * @brief       This function attempts to set the fragmentation configuration that corresponds to
// 1165  *              the specified EndPoint.
// 1166  *
// 1167  * input parameters
// 1168  *
// 1169  * @param       endPoint - The specific EndPoint for which to set the fragmentation configuration.
// 1170  * @param       pCfg - A pointer to an APSF configuration structure to fill with values.
// 1171  *
// 1172  * output parameters
// 1173  *
// 1174  * None.
// 1175  *
// 1176  * @return      afStatus_SUCCESS for success.
// 1177  *              afStatus_INVALID_PARAMETER if the specified EndPoint is not registered.
// 1178  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1179 afStatus_t afAPSF_ConfigSet(uint8 endPoint, afAPSF_Config_t *pCfg)
afAPSF_ConfigSet:
          CFI Block cfiBlock239 Using cfiCommon0
          CFI Function afAPSF_ConfigSet
        CODE
// 1180 {
        FUNCALL afAPSF_ConfigSet, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL afAPSF_ConfigSet, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1181   epList_t *pList = afFindEndPointDescList(endPoint);
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
// 1182 
// 1183   if (pList == NULL)
        MOV     A,R2
        ORL     A,R3
        JNZ     ??afAPSF_ConfigSet_0
// 1184   {
// 1185     return afStatus_INVALID_PARAMETER;
        MOV     R1,#0x2
        SJMP    ??afAPSF_ConfigSet_1
// 1186   }
// 1187 
// 1188   (void)osal_memcpy(&pList->apsfCfg, pCfg, sizeof(afAPSF_Config_t));
??afAPSF_ConfigSet_0:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,R6
        MOV     ?V1,R7
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     A,R2
        ADD     A,#0x6
        MOV     R2,A
        JNC     ??afAPSF_ConfigSet_2
        INC     R3
??afAPSF_ConfigSet_2:
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1189   return afStatus_SUCCESS;
        MOV     R1,#0x0
??afAPSF_ConfigSet_1:
        SJMP    ?Subroutine0
// 1190 }
          CFI EndBlock cfiBlock239
// 1191 
// 1192 /**************************************************************************************************
// 1193  * @fn          afSetApplCB
// 1194  *
// 1195  * @brief       Sets the pointer to the Application Callback function for a
// 1196  *              specific EndPoint.
// 1197  *
// 1198  * input parameters
// 1199  *
// 1200  * @param       endPoint - The specific EndPoint for which to set Application Callback.
// 1201  * @param       pApplFn - A pointer to the Application Callback function.
// 1202  *
// 1203  * output parameters
// 1204  *
// 1205  * None.
// 1206  *
// 1207  * @return      TRUE if success, FALSE if endpoint not found
// 1208  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1209 uint8 afSetApplCB( uint8 endPoint, pApplCB pApplFn )
afSetApplCB:
          CFI Block cfiBlock240 Using cfiCommon0
          CFI Function afSetApplCB
        CODE
// 1210 {
        FUNCALL afSetApplCB, afFindEndPointDescList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1211   if ( pApplFn != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??afSetApplCB_0
// 1212   {
// 1213     epList_t *epSearch;
// 1214 
// 1215     // Look for the endpoint
// 1216     epSearch = afFindEndPointDescList( endPoint );
        ; Setup parameters for call to function afFindEndPointDescList
        LCALL   `??afFindEndPointDescList::?relay`; Banked call to: afFindEndPointDescList
        MOV     DPL,R2
        MOV     DPH,R3
// 1217 
// 1218     if ( epSearch )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??afSetApplCB_0
// 1219     {
// 1220       epSearch->pfnApplCB = pApplFn;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1221 
// 1222       return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??afSetApplCB_1
// 1223     }
// 1224   }
// 1225 
// 1226   return ( FALSE );
??afSetApplCB_0:
        MOV     R1,#0x0
??afSetApplCB_1:
        SJMP    ?Subroutine0
// 1227 }
          CFI EndBlock cfiBlock240

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AF_DataRequestDiscoverRoute>`:
        DATA8
        DB 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegisterExtended::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegisterExtended

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afRegister::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afRegister

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDelete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataConfirm::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataConfirm

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afReflectError::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afReflectError

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afIncomingData::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afIncomingData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afBuildMSGIncoming::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afBuildMSGIncoming

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequest::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??AF_DataRequestSrcRtg::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    AF_DataRequestSrcRtg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindEndPointDescList::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDescList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindEndPointDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindEndPointDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afFindSimpleDesc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afFindSimpleDesc

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afDataReqMTU::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afDataReqMTU

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afGetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afGetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afSetMatch::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetMatch

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afNumEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afNumEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afEndPoints::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afEndPoints

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afCopyAddress::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afCopyAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigGet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afAPSF_ConfigSet::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afAPSF_ConfigSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??afSetApplCB::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    afSetApplCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\r\\n[afreflector]: ">`:
        DB "\015\012[afreflector]: "

        END
// 1228 
// 1229 /**************************************************************************************************
// 1230 */
// 
// 3 375 bytes in segment BANKED_CODE
//   126 bytes in segment BANK_RELAYS
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    18 bytes in segment XDATA_ROM_C
//     2 bytes in segment XDATA_Z
// 
// 3 502 bytes of CODE  memory
//    18 bytes of CONST memory
//     3 bytes of XDATA memory
//
//Errors: none
//Warnings: none
