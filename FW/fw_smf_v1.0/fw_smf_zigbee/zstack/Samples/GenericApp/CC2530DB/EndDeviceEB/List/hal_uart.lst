###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                31/Jul/2016  22:36:37
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEndev.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3
#        -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3 -DPOLL_RATE=0) -f
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x9669
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=2000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Components\hal\target\CC2530EB\hal_uart.c" -D xNWK_AUTO_POLL -D
#        xZIGBEEPRO -D HAL_UART=TRUE -D HAL_UART_DMA=1 -D xHAL_LED=TRUE -D
#        xPOWER_SAVING -D SHT10 -lC "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\" -lA
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\8470p\Desktop\Z-Stack Mesh
#        1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\" -e
#        --no_code_motion --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\List\hal_uart.lst
#    Object file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\EndDeviceEB\Obj\hal_uart.r51
#
###############################################################################

C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 1038
   \   00040E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL     0xff,#0x3f
   \   000007   85FFFF       MOV     0xff,0xff
   \   00000A   53F1FE       ANL     0xf1,#0xfe
   \   00000D   53F4C3       ANL     0xf4,#0xc3
   \   000010   43F30C       ORL     0xf3,#0xc
   \   000013   53F2F3       ANL     0xf2,#0xf3
   \   000016   758680       MOV     0x86,#-0x80
   \   000019   75C480       MOV     0xc4,#-0x80
   \   00001C   90....       MOV     DPTR,#dmaCh1234 + 26
   \   00001F   7470         MOV     A,#0x70
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   74C1         MOV     A,#-0x3f
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   541F         ANL     A,#0x1f
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   90....       MOV     DPTR,#dmaCh1234 + 30
   \   00002E   740F         MOV     A,#0xf
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   744A         MOV     A,#0x4a
   \   000034   F0           MOVX    @DPTR,A
   \   000035   90....       MOV     DPTR,#dmaCh1234 + 16
   \   000038   7470         MOV     A,#0x70
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   74C1         MOV     A,#-0x3f
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   90....       MOV     DPTR,#dmaCh1234 + 20
   \   000042   E0           MOVX    A,@DPTR
   \   000043   541F         ANL     A,#0x1f
   \   000045   F0           MOVX    @DPTR,A
   \   000046   90....       MOV     DPTR,#dmaCh1234 + 22
   \   000049   74CE         MOV     A,#-0x32
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   540F         ANL     A,#0xf
   \   000050   F0           MOVX    @DPTR,A
   \   000051   4410         ORL     A,#0x10
   \   000053   F0           MOVX    @DPTR,A
   \   000054   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000056   90....       MOV     DPTR,#dmaCh1234 + 18
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#dmaCfg & 0xff
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   90....       MOV     DPTR,#dmaCh1234 + 21
   \   000061   E4           CLR     A
   \   000062   F0           MOVX    @DPTR,A
   \   000063   90....       MOV     DPTR,#dmaCh1234 + 20
   \   000066   04           INC     A
   \   000067   F0           MOVX    @DPTR,A
   \   000068   90....       MOV     DPTR,#dmaCh1234 + 23
   \   00006B   7412         MOV     A,#0x12
   \   00006D   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000070                REQUIRE P2DIR
   \   000070                REQUIRE PERCFG
   \   000070                REQUIRE P1SEL
   \   000070                REQUIRE P0SEL
   \   000070                REQUIRE ADCCFG
   \   000070                REQUIRE U0CSR
   \   000070                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine16_0
   \   000001                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   241B         ADD     A,#0x1b
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   90....       MOV     DPTR,#dmaCfg + 1036
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   E9           MOV     A,R1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6403         XRL     A,#0x3
   \   000022   600A         JZ      ??HalUARTOpenDMA_0
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6404         XRL     A,#0x4
   \   00002C   7005         JNZ     ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002E   75C2D8       MOV     0xc2,#-0x28
   \   000031   8003         SJMP    ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000033   75C23B       MOV     0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   600B         JZ      ??HalUARTOpenDMA_3
   \   00003E   14           DEC     A
   \   00003F   6012         JZ      ??HalUARTOpenDMA_4
   \   000041   14           DEC     A
   \   000042   6019         JZ      ??HalUARTOpenDMA_5
   \   000044   14           DEC     A
   \   000045   6020         JZ      ??HalUARTOpenDMA_6
   \   000047   8028         SJMP    ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000049   75C508       MOV     0xc5,#0x8
   \   00004C   90....       MOV     DPTR,#dmaCfg + 1032
   \   00004F   7423         MOV     A,#0x23
   \   000051   8026         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   000053   75C509       MOV     0xc5,#0x9
   \   000056   90....       MOV     DPTR,#dmaCfg + 1032
   \   000059   7412         MOV     A,#0x12
   \   00005B   801C         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   00005D   75C50A       MOV     0xc5,#0xa
   \   000060   90....       MOV     DPTR,#dmaCfg + 1032
   \   000063   7409         MOV     A,#0x9
   \   000065   8012         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   000067   75C50A       MOV     0xc5,#0xa
   \   00006A   90....       MOV     DPTR,#dmaCfg + 1032
   \   00006D   7406         MOV     A,#0x6
   \   00006F   8008         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000071   75C50B       MOV     0xc5,#0xb
   \   000074   90....       MOV     DPTR,#dmaCfg + 1032
   \   000077   7403         MOV     A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   600D         JZ      ??HalUARTOpenDMA_9
   \   000083   75C442       MOV     0xc4,#0x42
   \   000086   43F310       ORL     0xf3,#0x10
   \   000089   C285         CLR     0x80.5
   \   00008B   43FD20       ORL     0xfd,#0x20
   \   00008E   8003         SJMP    ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000090   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   000093   9070C1       MOV     DPTR,#0x70c1
   \   000096   E0           MOVX    A,@DPTR
   \   000097   90....       MOV     DPTR,#dmaCfg
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   A3           INC     DPTR
   \   00009C   E4           CLR     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   75D1F7       MOV     0xd1,#-0x9
   \   0000A1   75D608       MOV     0xd6,#0x8
   \   0000A4                ; Setup parameters for call to function osal_memset
   \   0000A4   FC           MOV     R4,A
   \   0000A5   7D02         MOV     R5,#0x2
   \   0000A7   E5C2         MOV     A,0xc2
   \   0000A9   F4           CPL     A
   \   0000AA   F9           MOV     R1,A
   \   0000AB   7A..         MOV     R2,#dmaCfg & 0xff
   \   0000AD   7B..         MOV     R3,#(dmaCfg >> 8) & 0xff
   \   0000AF   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000B2   438640       ORL     0x86,#0x40
   \   0000B5   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000B8   E4           CLR     A
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000BD   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000C0                REQUIRE U0BAUD
   \   0000C0                REQUIRE U0GCR
   \   0000C0                REQUIRE U0UCR
   \   0000C0                REQUIRE P0SEL
   \   0000C0                REQUIRE _A_P0
   \   0000C0                REQUIRE P0DIR
   \   0000C0                REQUIRE DMAIRQ
   \   0000C0                REQUIRE DMAARM
   \   0000C0                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(unsigned char *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   F8           MOV     R0,A
   \   000007   EB           MOV     A,R3
   \   000008   F9           MOV     R1,A
   \   000009   90....       MOV     DPTR,#dmaCfg + 1030
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000010   FA           MOV     R2,A
   \   000011   EC           MOV     A,R4
   \   000012   2A           ADD     A,R2
   \   000013   FA           MOV     R2,A
   \   000014   E4           CLR     A
   \   000015   3D           ADDC    A,R5
   \   000016   FB           MOV     R3,A
   \   000017   C3           CLR     C
   \   000018   EA           MOV     A,R2
   \   000019   9401         SUBB    A,#0x1
   \   00001B   EB           MOV     A,R3
   \   00001C   9401         SUBB    A,#0x1
   \   00001E   4007         JC      ??HalUARTWriteDMA_0
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B00         MOV     R3,#0x0
   \   000024   02....       LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000027   AFA8         MOV     R7,0xa8+0x0
   \   000029   C2AF         CLR     0xa8.7
   \   00002B   90....       MOV     DPTR,#dmaCfg + 1030
   \   00002E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000031   EF           MOV     A,R7
   \   000032   A2E7         MOV     C,0xE0 /* A   */.7
   \   000034   E4           CLR     A
   \   000035   33           RLC     A
   \   000036   FE           MOV     R6,A
   \   000037   EF           MOV     A,R7
   \   000038   A2E7         MOV     C,0xE0 /* A   */.7
   \   00003A   92AF         MOV     0xa8.7,C
   \   00003C   7A00         MOV     R2,#0x0
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   8012         SJMP    ??HalUARTWriteDMA_2
   \                     ??HalUARTWriteDMA_3:
   \   000042   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000045   C0E0         PUSH    A
   \   000047   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00004A   D0E0         POP     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   05..         INC     ?V2
   \   00004F   0A           INC     R2
   \   000050   EA           MOV     A,R2
   \   000051   7001         JNZ     ??HalUARTWriteDMA_2
   \   000053   0B           INC     R3
   \                     ??HalUARTWriteDMA_2:
   \   000054   C3           CLR     C
   \   000055   EA           MOV     A,R2
   \   000056   9C           SUBB    A,R4
   \   000057   EB           MOV     A,R3
   \   000058   9D           SUBB    A,R5
   \   000059   40E7         JC      ??HalUARTWriteDMA_3
   \   00005B   A2AF         MOV     C,0xa8.7
   \   00005D   E4           CLR     A
   \   00005E   33           RLC     A
   \   00005F   FE           MOV     R6,A
   \   000060   C2AF         CLR     0xa8.7
   \   000062   90....       MOV     DPTR,#dmaCfg + 1030
   \   000065   E0           MOVX    A,@DPTR
   \   000066   65..         XRL     A,?V3
   \   000068   602E         JZ      ??HalUARTWriteDMA_4
   \   00006A   EE           MOV     A,R6
   \   00006B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006D   92AF         MOV     0xa8.7,C
   \   00006F   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000072   7A00         MOV     R2,#0x0
   \   000074   7B00         MOV     R3,#0x0
   \   000076   8012         SJMP    ??HalUARTWriteDMA_5
   \                     ??HalUARTWriteDMA_6:
   \   000078   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   00007B   C0E0         PUSH    A
   \   00007D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000080   D0E0         POP     A
   \   000082   F0           MOVX    @DPTR,A
   \   000083   05..         INC     ?V2
   \   000085   0A           INC     R2
   \   000086   EA           MOV     A,R2
   \   000087   7001         JNZ     ??HalUARTWriteDMA_5
   \   000089   0B           INC     R3
   \                     ??HalUARTWriteDMA_5:
   \   00008A   C3           CLR     C
   \   00008B   EA           MOV     A,R2
   \   00008C   9C           SUBB    A,R4
   \   00008D   EB           MOV     A,R3
   \   00008E   9D           SUBB    A,R5
   \   00008F   40E7         JC      ??HalUARTWriteDMA_6
   \   000091   A2AF         MOV     C,0xa8.7
   \   000093   E4           CLR     A
   \   000094   33           RLC     A
   \   000095   FE           MOV     R6,A
   \   000096   C2AF         CLR     0xa8.7
   \                     ??HalUARTWriteDMA_4:
   \   000098   A8..         MOV     R0,?V3
   \   00009A   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00009D   E5..         MOV     A,?V2
   \   00009F   F0           MOVX    @DPTR,A
   \   0000A0   7401         MOV     A,#0x1
   \   0000A2   65..         XRL     A,?V3
   \   0000A4   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000A7   7006         JNZ     ??HalUARTWriteDMA_7
   \   0000A9   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000AC   7401         MOV     A,#0x1
   \   0000AE   F0           MOVX    @DPTR,A
   \                     ??HalUARTWriteDMA_7:
   \   0000AF   EE           MOV     A,R6
   \   0000B0   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000B2   92AF         MOV     0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000B4   7F05         MOV     R7,#0x5
   \   0000B6   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000B9                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E8           MOV     A,R0
   \   000001   2A           ADD     A,R2
   \   000002   F582         MOV     DPL,A
   \   000004   E9           MOV     A,R1
   \   000005   3B           ADDC    A,R3
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V3,A
   \   000003   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000006   F5..         MOV     ?V2,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   FA           MOV     R2,A
   \   000001   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000003   2A           ADD     A,R2
   \   000004   F582         MOV     DPL,A
   \   000006   E4           CLR     A
   \   000007   34..         ADDC    A,#((dmaCfg + 1028) >> 8) & 0xff
   \   000009   F583         MOV     DPH,A
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   AE..         MOV     R6,?V3
   \   000002   E4           CLR     A
   \   000003   CE           XCH     A,R6
   \   000004   FF           MOV     R7,A
   \   000005   85....       MOV     ?V0,?V2
   \   000008   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   00000A   25..         ADD     A,?V0
   \   00000C   F5..         MOV     ?V0,A
   \   00000E   E4           CLR     A
   \   00000F   34..         ADDC    A,#((dmaCfg + 516) >> 8) & 0xff
   \   000011   F5..         MOV     ?V1,A
   \   000013   E5..         MOV     A,?V0
   \   000015   2E           ADD     A,R6
   \   000016   F582         MOV     DPL,A
   \   000018   E5..         MOV     A,?V1
   \   00001A   3F           ADDC    A,R7
   \   00001B   F583         MOV     DPH,A
   \   00001D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#((dmaCfg + 1028) >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   F8           MOV     R0,A
   \   000001   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV     R6,#0x0
   \   000007   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00000A   7064         JNZ     ??HalUARTPollDMA_0
   \   00000C   90....       MOV     DPTR,#dmaCfg + 512
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \                     ??HalUARTPollDMA_1:
   \   000011   EA           MOV     A,R2
   \   000012   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000015   7008         JNZ     ??HalUARTPollDMA_2
   \   000017   0A           INC     R2
   \   000018   90....       MOV     DPTR,#dmaCfg + 512
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   6A           XRL     A,R2
   \   00001D   70F2         JNZ     ??HalUARTPollDMA_1
   \                     ??HalUARTPollDMA_2:
   \   00001F   90....       MOV     DPTR,#dmaCfg + 513
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6A           XRL     A,R2
   \   000024   6011         JZ      ??HalUARTPollDMA_3
   \   000026   EA           MOV     A,R2
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   7004         JNZ     ??HalUARTPollDMA_4
   \   00002C   E595         MOV     A,0x95
   \   00002E   A3           INC     DPTR
   \   00002F   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_4:
   \   000030   90....       MOV     DPTR,#dmaCfg + 514
   \   000033   7421         MOV     A,#0x21
   \   000035   8020         SJMP    ??HalUARTPollDMA_5
   \                     ??HalUARTPollDMA_3:
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   601D         JZ      ??HalUARTPollDMA_6
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   E595         MOV     A,0x95
   \   000040   C3           CLR     C
   \   000041   98           SUBB    A,R0
   \   000042   F8           MOV     R0,A
   \   000043   90....       MOV     DPTR,#dmaCfg + 514
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   E8           MOV     A,R0
   \   000049   C3           CLR     C
   \   00004A   99           SUBB    A,R1
   \   00004B   5009         JNC     ??HalUARTPollDMA_7
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   C3           CLR     C
   \   00004F   98           SUBB    A,R0
   \   000050   F0           MOVX    @DPTR,A
   \   000051   E595         MOV     A,0x95
   \   000053   A3           INC     DPTR
   \   000054   8001         SJMP    ??HalUARTPollDMA_5
   \                     ??HalUARTPollDMA_7:
   \   000056   E4           CLR     A
   \                     ??HalUARTPollDMA_5:
   \   000057   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_6:
   \   000058                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000058   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00005B   8A..         MOV     ?V0,R2
   \   00005D   8B..         MOV     ?V1,R3
   \   00005F   A8..         MOV     R0,?V0
   \   000061   A9..         MOV     R1,?V1
   \   000063   C3           CLR     C
   \   000064   E8           MOV     A,R0
   \   000065   94F0         SUBB    A,#-0x10
   \   000067   E9           MOV     A,R1
   \   000068   9400         SUBB    A,#0x0
   \   00006A   400B         JC      ??HalUARTPollDMA_8
   \   00006C   7E01         MOV     R6,#0x1
   \   00006E   8022         SJMP    ??HalUARTPollDMA_9
   \                     ??HalUARTPollDMA_0:
   \   000070   90....       MOV     DPTR,#dmaCfg + 514
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   801B         SJMP    ??HalUARTPollDMA_9
   \                     ??HalUARTPollDMA_8:
   \   000077   C3           CLR     C
   \   000078   E8           MOV     A,R0
   \   000079   9470         SUBB    A,#0x70
   \   00007B   E9           MOV     A,R1
   \   00007C   9400         SUBB    A,#0x0
   \   00007E   4006         JC      ??HalUARTPollDMA_10
   \   000080   7E02         MOV     R6,#0x2
   \   000082   D285         SETB    0x80.5
   \   000084   800C         SJMP    ??HalUARTPollDMA_9
   \                     ??HalUARTPollDMA_10:
   \   000086   E8           MOV     A,R0
   \   000087   49           ORL     A,R1
   \   000088   6008         JZ      ??HalUARTPollDMA_9
   \   00008A   90....       MOV     DPTR,#dmaCfg + 514
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   7002         JNZ     ??HalUARTPollDMA_9
   \   000090   7E04         MOV     R6,#0x4
   \                     ??HalUARTPollDMA_9:
   \   000092   90....       MOV     DPTR,#dmaCfg + 1031
   \   000095   E0           MOVX    A,@DPTR
   \   000096   6006         JZ      ??HalUARTPollDMA_11
   \   000098   E4           CLR     A
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   EE           MOV     A,R6
   \   00009B   D2E4         SETB    0xE0 /* A   */.4
   \   00009D   FE           MOV     R6,A
   \                     ??HalUARTPollDMA_11:
   \   00009E   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   6018         JZ      ??HalUARTPollDMA_12
   \   0000A4   A895         MOV     R0,0x95+0x0
   \   0000A6   90....       MOV     DPTR,#dmaCfg + 1033
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   F9           MOV     R1,A
   \   0000AB   E8           MOV     A,R0
   \   0000AC   C3           CLR     C
   \   0000AD   99           SUBB    A,R1
   \   0000AE   F8           MOV     R0,A
   \   0000AF   90....       MOV     DPTR,#dmaCfg + 1032
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   C3           CLR     C
   \   0000B4   98           SUBB    A,R0
   \   0000B5   5005         JNC     ??HalUARTPollDMA_12
   \   0000B7   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000BA   E4           CLR     A
   \   0000BB   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_12:
   \   0000BC   90....       MOV     DPTR,#dmaCfg + 1035
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   604E         JZ      ??HalUARTPollDMA_13
   \   0000C2   90....       MOV     DPTR,#dmaCfg + 1034
   \   0000C5   E0           MOVX    A,@DPTR
   \   0000C6   7048         JNZ     ??HalUARTPollDMA_13
   \   0000C8   A3           INC     DPTR
   \   0000C9   E4           CLR     A
   \   0000CA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000CD   F8           MOV     R0,A
   \   0000CE   E4           CLR     A
   \   0000CF   C8           XCH     A,R0
   \   0000D0   F9           MOV     R1,A
   \   0000D1   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000D3   28           ADD     A,R0
   \   0000D4   74..         MOV     A,#((dmaCfg + 516) >> 8) & 0xff
   \   0000D6   39           ADDC    A,R1
   \   0000D7   90....       MOV     DPTR,#dmaCh1234 + 24
   \   0000DA   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000DD   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000DF   90....       MOV     DPTR,#dmaCh1234 + 25
   \   0000E2   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000E5   90....       MOV     DPTR,#dmaCh1234 + 29
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9   90....       MOV     DPTR,#dmaCh1234 + 28
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   54E0         ANL     A,#0xe0
   \   0000EF   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   6401         XRL     A,#0x1
   \   0000F5   F0           MOVX    @DPTR,A
   \   0000F6   A2AF         MOV     C,0xa8.7
   \   0000F8   E4           CLR     A
   \   0000F9   33           RLC     A
   \   0000FA   F8           MOV     R0,A
   \   0000FB   C2AF         CLR     0xa8.7
   \   0000FD   75D610       MOV     0xd6,#0x10
   \                     ??HalUARTPollDMA_14:
   \   000100   00           NOP
   \   000101   E5D6         MOV     A,0xd6
   \   000103   A2E4         MOV     C,0xE0 /* A   */.4
   \   000105   50F9         JNC     ??HalUARTPollDMA_14
   \   000107   75D1EF       MOV     0xd1,#-0x11
   \   00010A   75D710       MOV     0xd7,#0x10
   \   00010D   E8           MOV     A,R0
   \   00010E   8027         SJMP    ??HalUARTPollDMA_15
   \                     ??HalUARTPollDMA_13:
   \   000110   A2AF         MOV     C,0xa8.7
   \   000112   E4           CLR     A
   \   000113   33           RLC     A
   \   000114   FA           MOV     R2,A
   \   000115   C2AF         CLR     0xa8.7
   \   000117   90....       MOV     DPTR,#dmaCfg + 1030
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00011E   6016         JZ      ??HalUARTPollDMA_16
   \   000120   E5D6         MOV     A,0xd6
   \   000122   A2E4         MOV     C,0xE0 /* A   */.4
   \   000124   4010         JC      ??HalUARTPollDMA_16
   \   000126   E5D1         MOV     A,0xd1
   \   000128   A2E4         MOV     C,0xE0 /* A   */.4
   \   00012A   400A         JC      ??HalUARTPollDMA_16
   \   00012C   EA           MOV     A,R2
   \   00012D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00012F   92AF         MOV     0xa8.7,C
   \   000131                ; Setup parameters for call to function HalUARTIsrDMA
   \   000131   12....       LCALL   `??HalUARTIsrDMA::?relay`; Banked call to: HalUARTIsrDMA
   \   000134   8005         SJMP    ??HalUARTPollDMA_17
   \                     ??HalUARTPollDMA_16:
   \   000136   EA           MOV     A,R2
   \                     ??HalUARTPollDMA_15:
   \   000137   A2E0         MOV     C,0xE0 /* A   */.0
   \   000139   92AF         MOV     0xa8.7,C
   \                     ??HalUARTPollDMA_17:
   \   00013B   EE           MOV     A,R6
   \   00013C   6018         JZ      ??HalUARTPollDMA_18
   \   00013E   90....       MOV     DPTR,#dmaCfg + 1036
   \   000141   E0           MOVX    A,@DPTR
   \   000142   F8           MOV     R0,A
   \   000143   A3           INC     DPTR
   \   000144   E0           MOVX    A,@DPTR
   \   000145   F9           MOV     R1,A
   \   000146   E8           MOV     A,R0
   \   000147   49           ORL     A,R1
   \   000148   600C         JZ      ??HalUARTPollDMA_18
   \   00014A                ; Setup parameters for indirect call
   \   00014A   EE           MOV     A,R6
   \   00014B   FA           MOV     R2,A
   \   00014C   7900         MOV     R1,#0x0
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   F583         MOV     DPH,A
   \   000151   8882         MOV     DPL,R0
   \   000153   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollDMA_18:
   \   000156   7F02         MOV     R7,#0x2
   \   000158   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00015B                REQUIRE U0BAUD
   \   00015B                REQUIRE ST0
   \   00015B                REQUIRE _A_P0
   \   00015B                REQUIRE _A_IEN0
   \   00015B                REQUIRE DMAARM
   \   00015B                REQUIRE DMAIRQ
   \   00015B                REQUIRE DMAREQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   90....       MOV     DPTR,#dmaCfg + 512
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#dmaCfg & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   65C2         XRL     A,0xc2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#dmaCfg + 1030
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   00000B   702E         JNZ     ??HalUARTRxAvailDMA_0
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   7900         MOV     R1,#0x0
   \                     ??HalUARTRxAvailDMA_1:
   \   000011   E8           MOV     A,R0
   \   000012   FC           MOV     R4,A
   \   000013   E9           MOV     A,R1
   \   000014   FD           MOV     R5,A
   \   000015   EC           MOV     A,R4
   \   000016   2C           ADD     A,R4
   \   000017   FC           MOV     R4,A
   \   000018   ED           MOV     A,R5
   \   000019   33           RLC     A
   \   00001A   FD           MOV     R5,A
   \   00001B   74..         MOV     A,#dmaCfg & 0xff
   \   00001D   2C           ADD     A,R4
   \   00001E   F582         MOV     DPL,A
   \   000020   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000022   3D           ADDC    A,R5
   \   000023   F583         MOV     DPH,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   65C2         XRL     A,0xc2
   \   000029   7005         JNZ     ??HalUARTRxAvailDMA_2
   \   00002B   0A           INC     R2
   \   00002C   EA           MOV     A,R2
   \   00002D   7001         JNZ     ??HalUARTRxAvailDMA_2
   \   00002F   0B           INC     R3
   \                     ??HalUARTRxAvailDMA_2:
   \   000030   08           INC     R0
   \   000031   E8           MOV     A,R0
   \   000032   7001         JNZ     ??HalUARTRxAvailDMA_3
   \   000034   09           INC     R1
   \                     ??HalUARTRxAvailDMA_3:
   \   000035   C3           CLR     C
   \   000036   E9           MOV     A,R1
   \   000037   9401         SUBB    A,#0x1
   \   000039   40D6         JC      ??HalUARTRxAvailDMA_1
   \                     ??HalUARTRxAvailDMA_0:
   \   00003B   80..         SJMP    ??Subroutine16_0
   \   00003D                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV     0xd1,#-0x11
   \   000007   90....       MOV     DPTR,#dmaCfg + 1030
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6401         XRL     A,#0x1
   \   00000D   F8           MOV     R0,A
   \   00000E   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
   \   000013   90....       MOV     DPTR,#dmaCfg + 1031
   \   000016   04           INC     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   E595         MOV     A,0x95
   \   00001A   90....       MOV     DPTR,#dmaCfg + 1033
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000024   6006         JZ      ??HalUARTIsrDMA_0
   \   000026   90....       MOV     DPTR,#dmaCfg + 1035
   \   000029   7401         MOV     A,#0x1
   \   00002B   F0           MOVX    @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002C   80..         SJMP    ??Subroutine16_0
   \   00002E                REQUIRE DMAIRQ
   \   00002E                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98          #if HAL_UART_DMA
     99            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL   `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
    100          #endif
    101          #if HAL_UART_ISR
    102            HalUARTInitISR();
    103          #endif
    104          #if HAL_UART_USB
    105            HalUARTInitUSB();
    106          #endif
    107          }
   \   000007   80..         SJMP    ??Subroutine16_0
    108          
    109          /******************************************************************************
    110           * @fn      HalUARTOpen
    111           *
    112           * @brief   Open a port according tp the configuration specified by parameter.
    113           *
    114           * @param   port   - UART port
    115           *          config - contains configuration information
    116           *
    117           * @return  Status of the function call
    118           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    120          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    121            (void)port;
    122            (void)config;
    123          
    124          #if (HAL_UART_DMA == 1)
    125            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ     ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL   `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
    126          #endif
    127          #if (HAL_UART_DMA == 2)
    128            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    129          #endif
    130          #if (HAL_UART_ISR == 1)
    131            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    132          #endif
    133          #if (HAL_UART_ISR == 2)
    134            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    135          #endif
    136          #if (HAL_UART_USB)
    137            HalUARTOpenUSB(config);
    138          #endif
    139            
    140            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D                REQUIRE ?Subroutine1
   \   00000D                ; // Fall through to label ?Subroutine1
    141          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    142          
    143          /*****************************************************************************
    144           * @fn      HalUARTRead
    145           *
    146           * @brief   Read a buffer from the UART
    147           *
    148           * @param   port - USART module designation
    149           *          buf  - valid data buffer at least 'len' bytes in size
    150           *          len  - max length number of bytes to copy to 'buf'
    151           *
    152           * @return  length of buffer that was read
    153           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    155          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0,R1
   \   000007   EA           MOV     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   F9           MOV     R1,A
    156            (void)port;
    157            (void)buf;
    158            (void)len;
    159          
    160          #if (HAL_UART_DMA == 1)
    161            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   00000B   E5..         MOV     A,?V0
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   703B         JNZ     ??HalUARTRead_0
   \   000013   8027         SJMP    ??HalUARTRead_1
   \                     ??HalUARTRead_2:
   \   000015   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000018   E0           MOVX    A,@DPTR
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   A882         MOV     R0,DPL
   \   000021   A983         MOV     R1,DPH
   \   000023   E5C2         MOV     A,0xc2
   \   000025   F4           CPL     A
   \   000026   F5..         MOV     ?V3,A
   \   000028   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   E5..         MOV     A,?V3
   \   000030   F0           MOVX    @DPTR,A
   \   000031   90....       MOV     DPTR,#dmaCfg + 512
   \   000034   E0           MOVX    A,@DPTR
   \   000035   04           INC     A
   \   000036   F0           MOVX    @DPTR,A
   \   000037   0A           INC     R2
   \   000038   EA           MOV     A,R2
   \   000039   7001         JNZ     ??HalUARTRead_1
   \   00003B   0B           INC     R3
   \                     ??HalUARTRead_1:
   \   00003C   C3           CLR     C
   \   00003D   EA           MOV     A,R2
   \   00003E   9C           SUBB    A,R4
   \   00003F   EB           MOV     A,R3
   \   000040   9D           SUBB    A,R5
   \   000041   5009         JNC     ??HalUARTRead_3
   \   000043   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   65C2         XRL     A,0xc2
   \   00004A   60C9         JZ      ??HalUARTRead_2
   \                     ??HalUARTRead_3:
   \   00004C   C285         CLR     0x80.5
    162          #endif
    163          #if (HAL_UART_DMA == 2)
    164            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    165          #endif
    166          #if (HAL_UART_ISR == 1)
    167            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    168          #endif
    169          #if (HAL_UART_ISR == 2)
    170            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    171          #endif
    172          
    173          #if HAL_UART_USB
    174            return HalUARTRx(buf, len);
    175          #else
    176            return 0;
   \                     ??HalUARTRead_0:
   \   00004E   7F04         MOV     R7,#0x4
   \   000050   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000053                REQUIRE U0BAUD
   \   000053                REQUIRE _A_P0
    177          #endif
    178          }
    179          
    180          /******************************************************************************
    181           * @fn      HalUARTWrite
    182           *
    183           * @brief   Write a buffer to the UART.
    184           *
    185           * @param   port - UART port
    186           *          buf  - pointer to the buffer that will be written, not freed
    187           *          len  - length of
    188           *
    189           * @return  length of the buffer that was sent
    190           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    193            (void)port;
    194            (void)buf;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL   `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000B   8004         SJMP    ??HalUARTWrite_1
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    202          #endif
    203          #if (HAL_UART_ISR == 1)
    204            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    205          #endif
    206          #if (HAL_UART_ISR == 2)
    207            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    208          #endif
    209          
    210          #if HAL_UART_USB
    211            HalUARTTx(buf, len);
    212            return len;
    213          #else
    214            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011   02....       LJMP    ?Subroutine1 & 0xFFFF
    215          #endif
    216          }
    217          
    218          /******************************************************************************
    219           * @fn      HalUARTSuspend
    220           *
    221           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    222           *
    223           * @param   None
    224           *
    225           * @return  None
    226           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    228          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    229          #if HAL_UART_DMA
    230            HalUARTSuspendDMA();
   \   000000   D285         SETB    0x80.5
   \   000002   5386BF       ANL     0x86,#0xbf
   \   000005   43AB10       ORL     0xab,#0x10
    231          #endif
    232          #if HAL_UART_ISR
    233            HalUARTSuspendISR();
    234          #endif
    235          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN
    236          
    237          /******************************************************************************
    238           * @fn      HalUARTResume
    239           *
    240           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    241           *
    242           * @param   None
    243           *
    244           * @return  None
    245           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void HalUARTResume( void )
   \                     HalUARTResume:
    247          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    248          #if HAL_UART_DMA
    249            HalUARTResumeDMA();
   \   000000   53ABEF       ANL     0xab,#0xef
   \   000003   43C480       ORL     0xc4,#0x80
   \   000006   438640       ORL     0x86,#0x40
   \   000009   C285         CLR     0x80.5
    250          #endif
    251          #if HAL_UART_ISR
    252            HalUARTResumeISR();
    253          #endif
    254          }
   \   00000B   02....       LJMP    ?BRET
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE _A_P0
    255          
    256          /***************************************************************************************************
    257           * @fn      HalUARTPoll
    258           *
    259           * @brief   Poll the UART.
    260           *
    261           * @param   none
    262           *
    263           * @return  none
    264           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void HalUARTPoll(void)
   \                     HalUARTPoll:
    266          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267          #if HAL_UART_DMA
    268            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL   `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    269          #endif
    270          #if HAL_UART_ISR
    271            HalUARTPollISR();
    272          #endif
    273          #if HAL_UART_USB
    274            HalUARTPollUSB();
    275          #endif
    276          }
   \   000007   02....       LJMP    ??Subroutine16_0 & 0xFFFF
    277          
    278          /**************************************************************************************************
    279           * @fn      Hal_UART_RxBufLen()
    280           *
    281           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    282           *
    283           * @param   port - UART port
    284           *
    285           * @return  length of current Rx Buffer
    286           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    288          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    289            (void)port;
    290          
    291          #if (HAL_UART_DMA == 1)
    292            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ     ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00000B   8004         SJMP    ??Hal_UART_RxBufLen_1
    293          #endif
    294          #if (HAL_UART_DMA == 2)
    295            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    296          #endif
    297          #if (HAL_UART_ISR == 1)
    298            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    299          #endif
    300          #if (HAL_UART_ISR == 2)
    301            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    302          #endif
    303          #if HAL_UART_USB
    304            return HalUARTRxAvailUSB();
    305          #else
    306            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   02....       LJMP    ?Subroutine1 & 0xFFFF
    307          #endif
    308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#dmaCfg + 512
   \   000003   E0           MOVX    A,@DPTR
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   FE           MOV     R6,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FF           MOV     R7,A
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   74..         MOV     A,#dmaCfg & 0xff
   \   000002   2E           ADD     A,R6
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInitDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpenDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTIsrDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    309          
    310          /******************************************************************************
    311          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2     10   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
      0     10   HalUARTPollDMA
        0     10   -> HalUARTIsrDMA
        0     10   -> HalUARTRxAvailDMA
      1     12   HalUARTRead
      0      0   HalUARTResume
      2     10   HalUARTRxAvailDMA
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
      1     22   HalUARTWriteDMA
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailDMA


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ??Subroutine16_0
       1  ?Subroutine0
       5  ?Subroutine1
       6  ?Subroutine10
      21  ?Subroutine11
      13  ?Subroutine12
       6  ?Subroutine13
      11  ?Subroutine14
      11  ?Subroutine15
       7  ?Subroutine2
       8  ?Subroutine3
      30  ?Subroutine4
       9  ?Subroutine5
      14  ?Subroutine6
      10  ?Subroutine7
       4  ?Subroutine8
       4  ?Subroutine9
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
       9  HalUARTInit
       6  HalUARTInit::?relay
     112  HalUARTInitDMA
       6  HalUARTInitDMA::?relay
      46  HalUARTIsrDMA
       6  HalUARTIsrDMA::?relay
      13  HalUARTOpen
       6  HalUARTOpen::?relay
     192  HalUARTOpenDMA
       6  HalUARTOpenDMA::?relay
      10  HalUARTPoll
       6  HalUARTPoll::?relay
     347  HalUARTPollDMA
       6  HalUARTPollDMA::?relay
      83  HalUARTRead
       6  HalUARTRead::?relay
      14  HalUARTResume
       6  HalUARTResume::?relay
      61  HalUARTRxAvailDMA
       6  HalUARTRxAvailDMA::?relay
      11  HalUARTSuspend
       6  HalUARTSuspend::?relay
      20  HalUARTWrite
       6  HalUARTWrite::?relay
     185  HalUARTWriteDMA
       6  HalUARTWriteDMA::?relay
      20  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  P0DIR
       1  P0IEN
       1  P0SEL
       1  P1SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_P0
    1038  dmaCfg

 
 1 290 bytes in segment BANKED_CODE
    84 bytes in segment BANK_RELAYS
    17 bytes in segment SFR_AN
 1 038 bytes in segment XDATA_Z
 
 1 374 bytes of CODE  memory
     0 bytes of DATA  memory (+ 17 bytes shared)
 1 038 bytes of XDATA memory

Errors: none
Warnings: none
