###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                31/Jul/2016  23:45:33
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Components\hal\target\CC2530EB\hal_uart.c
#    Command line       =  
#        -f "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x9669
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=2000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Components\hal\target\CC2530EB\hal_uart.c" -D ZTOOL_P1 -D MT_TASK
#        -D MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\" -lA
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\"
#        --diag_suppress Pe001,Pa010 -o "C:\Users\8470p\Desktop\Z-Stack Mesh
#        1.0.0 ZED\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj\"
#        -e --no_code_motion --debug --core=plain --dptr=16,1
#        --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
#        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\hal_uart.lst
#    Object file        =  
#        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
#        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj\hal_uart.r51
#
###############################################################################

C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\hal\target\CC2530EB\hal_uart.c
      1          /**************************************************************************************************
      2            Filename:       _hal_uart.c
      3            Revised:        $Date: 2009-06-12 09:16:43 -0700 (Fri, 12 Jun 2009) $
      4            Revision:       $Revision: 20142 $
      5          
      6            Description: This file contains the interface to the H/W UART driver.
      7          
      8          
      9            Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          
     44          #include "hal_board_cfg.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x86
   \   unsigned char volatile __sfr U0CSR
   \                     U0CSR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x95
   \   unsigned char volatile __sfr ST0
   \                     ST0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc2
   \   unsigned char volatile __sfr U0BAUD
   \                     U0BAUD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc4
   \   unsigned char volatile __sfr U0UCR
   \                     U0UCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc5
   \   unsigned char volatile __sfr U0GCR
   \                     U0GCR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd1
   \   unsigned char volatile __sfr DMAIRQ
   \                     DMAIRQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd6
   \   unsigned char volatile __sfr DMAARM
   \                     DMAARM:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xd7
   \   unsigned char volatile __sfr DMAREQ
   \                     DMAREQ:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf1
   \   unsigned char volatile __sfr PERCFG
   \                     PERCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf2
   \   unsigned char volatile __sfr ADCCFG
   \                     ADCCFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1
     45          #include "hal_defs.h"
     46          #include "hal_types.h"
     47          #include "hal_uart.h"
     48          
     49          /*********************************************************************
     50           * MACROS
     51           */
     52          
     53          /*********************************************************************
     54           * TYPEDEFS
     55           */
     56          
     57          /*********************************************************************
     58           * CONSTANTS
     59           */
     60          
     61          /*********************************************************************
     62           * GLOBAL VARIABLES
     63           */
     64          
     65          /*********************************************************************
     66           * GLOBAL FUNCTIONS
     67           */
     68          
     69          /*********************************************************************
     70           * LOCAL VARIABLES
     71           */
     72          
     73          /*********************************************************************
     74           * LOCAL FUNCTIONS
     75           */
     76          
     77          #if HAL_UART_DMA
     78          #include "_hal_uart_dma.c"

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \   static uartDMACfg_t dmaCfg
   \                     dmaCfg:
   \   000000                DS 526
   \   00020E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTInitDMA(void)
   \                     HalUARTInitDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   53FF3F       ANL     0xff,#0x3f
   \   000007   85FFFF       MOV     0xff,0xff
   \   00000A   53F1FE       ANL     0xf1,#0xfe
   \   00000D   53F4C3       ANL     0xf4,#0xc3
   \   000010   43F30C       ORL     0xf3,#0xc
   \   000013   53F2F3       ANL     0xf2,#0xf3
   \   000016   758680       MOV     0x86,#-0x80
   \   000019   75C480       MOV     0xc4,#-0x80
   \   00001C   90....       MOV     DPTR,#dmaCh1234 + 26
   \   00001F   7470         MOV     A,#0x70
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   \   000023   74C1         MOV     A,#-0x3f
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   541F         ANL     A,#0x1f
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   90....       MOV     DPTR,#dmaCh1234 + 30
   \   00002E   740F         MOV     A,#0xf
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   744A         MOV     A,#0x4a
   \   000034   F0           MOVX    @DPTR,A
   \   000035   90....       MOV     DPTR,#dmaCh1234 + 16
   \   000038   7470         MOV     A,#0x70
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   74C1         MOV     A,#-0x3f
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   90....       MOV     DPTR,#dmaCh1234 + 20
   \   000042   E0           MOVX    A,@DPTR
   \   000043   541F         ANL     A,#0x1f
   \   000045   F0           MOVX    @DPTR,A
   \   000046   90....       MOV     DPTR,#dmaCh1234 + 22
   \   000049   74CE         MOV     A,#-0x32
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   540F         ANL     A,#0xf
   \   000050   F0           MOVX    @DPTR,A
   \   000051   4410         ORL     A,#0x10
   \   000053   F0           MOVX    @DPTR,A
   \   000054   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000056   90....       MOV     DPTR,#dmaCh1234 + 18
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#dmaCfg & 0xff
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   90....       MOV     DPTR,#dmaCh1234 + 21
   \   000061   7480         MOV     A,#-0x80
   \   000063   F0           MOVX    @DPTR,A
   \   000064   90....       MOV     DPTR,#dmaCh1234 + 20
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
   \   000069   90....       MOV     DPTR,#dmaCh1234 + 23
   \   00006C   7412         MOV     A,#0x12
   \   00006E   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   000071                REQUIRE P2DIR
   \   000071                REQUIRE PERCFG
   \   000071                REQUIRE P1SEL
   \   000071                REQUIRE P0SEL
   \   000071                REQUIRE ADCCFG
   \   000071                REQUIRE U0CSR
   \   000071                REQUIRE U0UCR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine17_0
   \   000001                ; // Fall through to label ??Subroutine17_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine17_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTOpenDMA(halUARTCfg_t *)
   \                     HalUARTOpenDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   EA           MOV     A,R2
   \   000005   241B         ADD     A,#0x1b
   \   000007   F582         MOV     DPL,A
   \   000009   E4           CLR     A
   \   00000A   3B           ADDC    A,R3
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F8           MOV     R0,A
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   90....       MOV     DPTR,#dmaCfg + 524
   \   000015   E8           MOV     A,R0
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   E9           MOV     A,R1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6403         XRL     A,#0x3
   \   000022   600A         JZ      ??HalUARTOpenDMA_0
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   6404         XRL     A,#0x4
   \   00002C   7005         JNZ     ??HalUARTOpenDMA_1
   \                     ??HalUARTOpenDMA_0:
   \   00002E   75C2D8       MOV     0xc2,#-0x28
   \   000031   8003         SJMP    ??HalUARTOpenDMA_2
   \                     ??HalUARTOpenDMA_1:
   \   000033   75C23B       MOV     0xc2,#0x3b
   \                     ??HalUARTOpenDMA_2:
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   600B         JZ      ??HalUARTOpenDMA_3
   \   00003E   14           DEC     A
   \   00003F   6012         JZ      ??HalUARTOpenDMA_4
   \   000041   14           DEC     A
   \   000042   6019         JZ      ??HalUARTOpenDMA_5
   \   000044   14           DEC     A
   \   000045   6020         JZ      ??HalUARTOpenDMA_6
   \   000047   8028         SJMP    ??HalUARTOpenDMA_7
   \                     ??HalUARTOpenDMA_3:
   \   000049   75C508       MOV     0xc5,#0x8
   \   00004C   90....       MOV     DPTR,#dmaCfg + 520
   \   00004F   7423         MOV     A,#0x23
   \   000051   8026         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_4:
   \   000053   75C509       MOV     0xc5,#0x9
   \   000056   90....       MOV     DPTR,#dmaCfg + 520
   \   000059   7412         MOV     A,#0x12
   \   00005B   801C         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_5:
   \   00005D   75C50A       MOV     0xc5,#0xa
   \   000060   90....       MOV     DPTR,#dmaCfg + 520
   \   000063   7409         MOV     A,#0x9
   \   000065   8012         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_6:
   \   000067   75C50A       MOV     0xc5,#0xa
   \   00006A   90....       MOV     DPTR,#dmaCfg + 520
   \   00006D   7406         MOV     A,#0x6
   \   00006F   8008         SJMP    ??HalUARTOpenDMA_8
   \                     ??HalUARTOpenDMA_7:
   \   000071   75C50B       MOV     0xc5,#0xb
   \   000074   90....       MOV     DPTR,#dmaCfg + 520
   \   000077   7403         MOV     A,#0x3
   \                     ??HalUARTOpenDMA_8:
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   600D         JZ      ??HalUARTOpenDMA_9
   \   000083   75C442       MOV     0xc4,#0x42
   \   000086   43F310       ORL     0xf3,#0x10
   \   000089   C285         CLR     0x80.5
   \   00008B   43FD20       ORL     0xfd,#0x20
   \   00008E   8003         SJMP    ??HalUARTOpenDMA_10
   \                     ??HalUARTOpenDMA_9:
   \   000090   75C402       MOV     0xc4,#0x2
   \                     ??HalUARTOpenDMA_10:
   \   000093   9070C1       MOV     DPTR,#0x70c1
   \   000096   E0           MOVX    A,@DPTR
   \   000097   90....       MOV     DPTR,#dmaCfg
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   A3           INC     DPTR
   \   00009C   E4           CLR     A
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   75D1F7       MOV     0xd1,#-0x9
   \   0000A1   75D608       MOV     0xd6,#0x8
   \   0000A4                ; Setup parameters for call to function osal_memset
   \   0000A4   FC           MOV     R4,A
   \   0000A5   7D01         MOV     R5,#0x1
   \   0000A7   E5C2         MOV     A,0xc2
   \   0000A9   F4           CPL     A
   \   0000AA   F9           MOV     R1,A
   \   0000AB   7A..         MOV     R2,#dmaCfg & 0xff
   \   0000AD   7B..         MOV     R3,#(dmaCfg >> 8) & 0xff
   \   0000AF   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
   \   0000B2   438640       ORL     0x86,#0x40
   \   0000B5   90....       MOV     DPTR,#dmaCfg + 523
   \   0000B8   E4           CLR     A
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   90....       MOV     DPTR,#dmaCfg + 522
   \   0000BD   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000C0                REQUIRE U0BAUD
   \   0000C0                REQUIRE U0GCR
   \   0000C0                REQUIRE U0UCR
   \   0000C0                REQUIRE P0SEL
   \   0000C0                REQUIRE _A_P0
   \   0000C0                REQUIRE P0DIR
   \   0000C0                REQUIRE DMAIRQ
   \   0000C0                REQUIRE DMAARM
   \   0000C0                REQUIRE U0CSR

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTReadDMA(unsigned char *, uint16)
   \                     HalUARTReadDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
   \   000009   802E         SJMP    ??HalUARTReadDMA_0
   \                     ??HalUARTReadDMA_1:
   \   00000B   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   AA82         MOV     R2,DPL
   \   000017   AB83         MOV     R3,DPH
   \   000019   E5C2         MOV     A,0xc2
   \   00001B   F4           CPL     A
   \   00001C   F5..         MOV     ?V1,A
   \   00001E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000021   E4           CLR     A
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   E5..         MOV     A,?V1
   \   000026   F0           MOVX    @DPTR,A
   \   000027   90....       MOV     DPTR,#dmaCfg + 256
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   04           INC     A
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   C3           CLR     C
   \   00002E   9480         SUBB    A,#-0x80
   \   000030   4002         JC      ??HalUARTReadDMA_2
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \                     ??HalUARTReadDMA_2:
   \   000034   08           INC     R0
   \   000035   E8           MOV     A,R0
   \   000036   7001         JNZ     ??HalUARTReadDMA_0
   \   000038   09           INC     R1
   \                     ??HalUARTReadDMA_0:
   \   000039   C3           CLR     C
   \   00003A   E8           MOV     A,R0
   \   00003B   9C           SUBB    A,R4
   \   00003C   E9           MOV     A,R1
   \   00003D   9D           SUBB    A,R5
   \   00003E   5009         JNC     ??HalUARTReadDMA_3
   \   000040   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   65C2         XRL     A,0xc2
   \   000047   60C2         JZ      ??HalUARTReadDMA_1
   \                     ??HalUARTReadDMA_3:
   \   000049   C285         CLR     0x80.5
   \   00004B   E8           MOV     A,R0
   \   00004C   FA           MOV     R2,A
   \   00004D   E9           MOV     A,R1
   \   00004E   FB           MOV     R3,A
   \   00004F                REQUIRE ?Subroutine1
   \   00004F                REQUIRE U0BAUD
   \   00004F                REQUIRE _A_P0
   \   00004F                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#dmaCfg + 256
   \   000003   E0           MOVX    A,@DPTR
   \   000004   25E0         ADD     A,0xE0 /* A   */
   \   000006   FE           MOV     R6,A
   \   000007   E4           CLR     A
   \   000008   33           RLC     A
   \   000009   FF           MOV     R7,A
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   74..         MOV     A,#dmaCfg & 0xff
   \   000002   2E           ADD     A,R6
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000007   3F           ADDC    A,R7
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTWriteDMA(unsigned char *, uint16)
   \                     HalUARTWriteDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00000C   F8           MOV     R0,A
   \   00000D   EC           MOV     A,R4
   \   00000E   28           ADD     A,R0
   \   00000F   F8           MOV     R0,A
   \   000010   E4           CLR     A
   \   000011   3D           ADDC    A,R5
   \   000012   F9           MOV     R1,A
   \   000013   C3           CLR     C
   \   000014   E8           MOV     A,R0
   \   000015   9481         SUBB    A,#-0x7f
   \   000017   E9           MOV     A,R1
   \   000018   9400         SUBB    A,#0x0
   \   00001A   4007         JC      ??HalUARTWriteDMA_0
   \   00001C   7A00         MOV     R2,#0x0
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   02....       LJMP    ??HalUARTWriteDMA_1 & 0xFFFF
   \                     ??HalUARTWriteDMA_0:
   \   000023   AAA8         MOV     R2,0xa8+0x0
   \   000025   C2AF         CLR     0xa8.7
   \   000027   90....       MOV     DPTR,#dmaCfg + 518
   \   00002A   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00002D   EA           MOV     A,R2
   \   00002E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000030   E4           CLR     A
   \   000031   33           RLC     A
   \   000032   F8           MOV     R0,A
   \   000033   EA           MOV     A,R2
   \   000034   A2E7         MOV     C,0xE0 /* A   */.7
   \   000036   92AF         MOV     0xa8.7,C
   \   000038   7A00         MOV     R2,#0x0
   \   00003A   7B00         MOV     R3,#0x0
   \   00003C   8030         SJMP    ??HalUARTWriteDMA_2
   \                     ??HalUARTWriteDMA_3:
   \   00003E   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000041   C0E0         PUSH    A
   \   000043   85....       MOV     ?V2,?V1
   \   000046   75..00       MOV     ?V3,#0x0
   \   000049   7407         MOV     A,#0x7
   \   00004B   78..         MOV     R0,#?V2
   \   00004D   12....       LCALL   ?S_SHL
   \   000050   A8..         MOV     R0,?V0
   \   000052   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000054   28           ADD     A,R0
   \   000055   F8           MOV     R0,A
   \   000056   E4           CLR     A
   \   000057   34..         ADDC    A,#((dmaCfg + 260) >> 8) & 0xff
   \   000059   F9           MOV     R1,A
   \   00005A   E8           MOV     A,R0
   \   00005B   25..         ADD     A,?V2
   \   00005D   F582         MOV     DPL,A
   \   00005F   E9           MOV     A,R1
   \   000060   35..         ADDC    A,?V3
   \   000062   F583         MOV     DPH,A
   \   000064   D0E0         POP     A
   \   000066   F0           MOVX    @DPTR,A
   \   000067   05..         INC     ?V0
   \   000069   0A           INC     R2
   \   00006A   EA           MOV     A,R2
   \   00006B   7001         JNZ     ??HalUARTWriteDMA_2
   \   00006D   0B           INC     R3
   \                     ??HalUARTWriteDMA_2:
   \   00006E   C3           CLR     C
   \   00006F   EA           MOV     A,R2
   \   000070   9C           SUBB    A,R4
   \   000071   EB           MOV     A,R3
   \   000072   9D           SUBB    A,R5
   \   000073   40C9         JC      ??HalUARTWriteDMA_3
   \   000075   A2AF         MOV     C,0xa8.7
   \   000077   E4           CLR     A
   \   000078   33           RLC     A
   \   000079   F5..         MOV     ?V2,A
   \   00007B   C2AF         CLR     0xa8.7
   \   00007D   90....       MOV     DPTR,#dmaCfg + 518
   \   000080   E0           MOVX    A,@DPTR
   \   000081   65..         XRL     A,?V1
   \   000083   604E         JZ      ??HalUARTWriteDMA_4
   \   000085   E5..         MOV     A,?V2
   \   000087   A2E0         MOV     C,0xE0 /* A   */.0
   \   000089   92AF         MOV     0xa8.7,C
   \   00008B   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00008E   7A00         MOV     R2,#0x0
   \   000090   7B00         MOV     R3,#0x0
   \   000092   8030         SJMP    ??HalUARTWriteDMA_5
   \                     ??HalUARTWriteDMA_6:
   \   000094   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000097   C0E0         PUSH    A
   \   000099   85....       MOV     ?V4,?V1
   \   00009C   75..00       MOV     ?V5,#0x0
   \   00009F   7407         MOV     A,#0x7
   \   0000A1   78..         MOV     R0,#?V4
   \   0000A3   12....       LCALL   ?S_SHL
   \   0000A6   A8..         MOV     R0,?V0
   \   0000A8   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000AA   28           ADD     A,R0
   \   0000AB   F8           MOV     R0,A
   \   0000AC   E4           CLR     A
   \   0000AD   34..         ADDC    A,#((dmaCfg + 260) >> 8) & 0xff
   \   0000AF   F9           MOV     R1,A
   \   0000B0   E8           MOV     A,R0
   \   0000B1   25..         ADD     A,?V4
   \   0000B3   F582         MOV     DPL,A
   \   0000B5   E9           MOV     A,R1
   \   0000B6   35..         ADDC    A,?V5
   \   0000B8   F583         MOV     DPH,A
   \   0000BA   D0E0         POP     A
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   05..         INC     ?V0
   \   0000BF   0A           INC     R2
   \   0000C0   EA           MOV     A,R2
   \   0000C1   7001         JNZ     ??HalUARTWriteDMA_5
   \   0000C3   0B           INC     R3
   \                     ??HalUARTWriteDMA_5:
   \   0000C4   C3           CLR     C
   \   0000C5   EA           MOV     A,R2
   \   0000C6   9C           SUBB    A,R4
   \   0000C7   EB           MOV     A,R3
   \   0000C8   9D           SUBB    A,R5
   \   0000C9   40C9         JC      ??HalUARTWriteDMA_6
   \   0000CB   A2AF         MOV     C,0xa8.7
   \   0000CD   E4           CLR     A
   \   0000CE   33           RLC     A
   \   0000CF   F5..         MOV     ?V2,A
   \   0000D1   C2AF         CLR     0xa8.7
   \                     ??HalUARTWriteDMA_4:
   \   0000D3   A8..         MOV     R0,?V1
   \   0000D5   12....       LCALL   ??Subroutine16_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000D8   E5..         MOV     A,?V0
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   7401         MOV     A,#0x1
   \   0000DD   65..         XRL     A,?V1
   \   0000DF   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   7006         JNZ     ??HalUARTWriteDMA_7
   \   0000E5   90....       MOV     DPTR,#dmaCfg + 523
   \   0000E8   7401         MOV     A,#0x1
   \   0000EA   F0           MOVX    @DPTR,A
   \                     ??HalUARTWriteDMA_7:
   \   0000EB   E5..         MOV     A,?V2
   \   0000ED   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000EF   92AF         MOV     0xa8.7,C
   \                     ??HalUARTWriteDMA_1:
   \   0000F1   7F06         MOV     R7,#0x6
   \   0000F3   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000F6                REQUIRE _A_IEN0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EE           MOV     A,R6
   \   000001   2A           ADD     A,R2
   \   000002   F582         MOV     DPL,A
   \   000004   EF           MOV     A,R7
   \   000005   3B           ADDC    A,R3
   \   000006   F583         MOV     DPH,A
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V1,A
   \   000003   F8           MOV     R0,A
   \   000004   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F5..         MOV     ?V0,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F8           MOV     R0,A
   \   000001                REQUIRE ??Subroutine16_0
   \   000001                ; // Fall through to label ??Subroutine16_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine16_0:
   \   000000   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#((dmaCfg + 516) >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#dmaCfg + 518
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant void HalUARTPollDMA(void)
   \                     HalUARTPollDMA:
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   7E00         MOV     R6,#0x0
   \   000007   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00000A   706C         JNZ     ??HalUARTPollDMA_0
   \   00000C   90....       MOV     DPTR,#dmaCfg + 256
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
   \                     ??HalUARTPollDMA_1:
   \   000011   EA           MOV     A,R2
   \   000012   12....       LCALL   ??Subroutine15_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000015   7010         JNZ     ??HalUARTPollDMA_2
   \   000017   0A           INC     R2
   \   000018   EA           MOV     A,R2
   \   000019   C3           CLR     C
   \   00001A   9480         SUBB    A,#-0x80
   \   00001C   4002         JC      ??HalUARTPollDMA_3
   \   00001E   7A00         MOV     R2,#0x0
   \                     ??HalUARTPollDMA_3:
   \   000020   90....       MOV     DPTR,#dmaCfg + 256
   \   000023   E0           MOVX    A,@DPTR
   \   000024   6A           XRL     A,R2
   \   000025   70EA         JNZ     ??HalUARTPollDMA_1
   \                     ??HalUARTPollDMA_2:
   \   000027   90....       MOV     DPTR,#dmaCfg + 257
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6A           XRL     A,R2
   \   00002C   6011         JZ      ??HalUARTPollDMA_4
   \   00002E   EA           MOV     A,R2
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   7004         JNZ     ??HalUARTPollDMA_5
   \   000034   E595         MOV     A,0x95
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_5:
   \   000038   90....       MOV     DPTR,#dmaCfg + 258
   \   00003B   74C6         MOV     A,#-0x3a
   \   00003D   8020         SJMP    ??HalUARTPollDMA_6
   \                     ??HalUARTPollDMA_4:
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   601D         JZ      ??HalUARTPollDMA_7
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F8           MOV     R0,A
   \   000046   E595         MOV     A,0x95
   \   000048   C3           CLR     C
   \   000049   98           SUBB    A,R0
   \   00004A   F8           MOV     R0,A
   \   00004B   90....       MOV     DPTR,#dmaCfg + 258
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   E8           MOV     A,R0
   \   000051   C3           CLR     C
   \   000052   99           SUBB    A,R1
   \   000053   5009         JNC     ??HalUARTPollDMA_8
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C3           CLR     C
   \   000057   98           SUBB    A,R0
   \   000058   F0           MOVX    @DPTR,A
   \   000059   E595         MOV     A,0x95
   \   00005B   A3           INC     DPTR
   \   00005C   8001         SJMP    ??HalUARTPollDMA_6
   \                     ??HalUARTPollDMA_8:
   \   00005E   E4           CLR     A
   \                     ??HalUARTPollDMA_6:
   \   00005F   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_7:
   \   000060                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000060   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   000063   8A..         MOV     ?V0,R2
   \   000065   8B..         MOV     ?V1,R3
   \   000067   A8..         MOV     R0,?V0
   \   000069   A9..         MOV     R1,?V1
   \   00006B   C3           CLR     C
   \   00006C   E8           MOV     A,R0
   \   00006D   9470         SUBB    A,#0x70
   \   00006F   E9           MOV     A,R1
   \   000070   9400         SUBB    A,#0x0
   \   000072   400B         JC      ??HalUARTPollDMA_9
   \   000074   7E01         MOV     R6,#0x1
   \   000076   8022         SJMP    ??HalUARTPollDMA_10
   \                     ??HalUARTPollDMA_0:
   \   000078   90....       MOV     DPTR,#dmaCfg + 258
   \   00007B   E4           CLR     A
   \   00007C   F0           MOVX    @DPTR,A
   \   00007D   801B         SJMP    ??HalUARTPollDMA_10
   \                     ??HalUARTPollDMA_9:
   \   00007F   C3           CLR     C
   \   000080   E8           MOV     A,R0
   \   000081   9440         SUBB    A,#0x40
   \   000083   E9           MOV     A,R1
   \   000084   9400         SUBB    A,#0x0
   \   000086   4006         JC      ??HalUARTPollDMA_11
   \   000088   7E02         MOV     R6,#0x2
   \   00008A   D285         SETB    0x80.5
   \   00008C   800C         SJMP    ??HalUARTPollDMA_10
   \                     ??HalUARTPollDMA_11:
   \   00008E   E8           MOV     A,R0
   \   00008F   49           ORL     A,R1
   \   000090   6008         JZ      ??HalUARTPollDMA_10
   \   000092   90....       MOV     DPTR,#dmaCfg + 258
   \   000095   E0           MOVX    A,@DPTR
   \   000096   7002         JNZ     ??HalUARTPollDMA_10
   \   000098   7E04         MOV     R6,#0x4
   \                     ??HalUARTPollDMA_10:
   \   00009A   90....       MOV     DPTR,#dmaCfg + 519
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   6006         JZ      ??HalUARTPollDMA_12
   \   0000A0   E4           CLR     A
   \   0000A1   F0           MOVX    @DPTR,A
   \   0000A2   EE           MOV     A,R6
   \   0000A3   D2E4         SETB    0xE0 /* A   */.4
   \   0000A5   FE           MOV     R6,A
   \                     ??HalUARTPollDMA_12:
   \   0000A6   90....       MOV     DPTR,#dmaCfg + 522
   \   0000A9   E0           MOVX    A,@DPTR
   \   0000AA   6018         JZ      ??HalUARTPollDMA_13
   \   0000AC   A895         MOV     R0,0x95+0x0
   \   0000AE   90....       MOV     DPTR,#dmaCfg + 521
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   F9           MOV     R1,A
   \   0000B3   E8           MOV     A,R0
   \   0000B4   C3           CLR     C
   \   0000B5   99           SUBB    A,R1
   \   0000B6   F8           MOV     R0,A
   \   0000B7   90....       MOV     DPTR,#dmaCfg + 520
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   C3           CLR     C
   \   0000BC   98           SUBB    A,R0
   \   0000BD   5005         JNC     ??HalUARTPollDMA_13
   \   0000BF   90....       MOV     DPTR,#dmaCfg + 522
   \   0000C2   E4           CLR     A
   \   0000C3   F0           MOVX    @DPTR,A
   \                     ??HalUARTPollDMA_13:
   \   0000C4   90....       MOV     DPTR,#dmaCfg + 523
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   6056         JZ      ??HalUARTPollDMA_14
   \   0000CA   90....       MOV     DPTR,#dmaCfg + 522
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   7050         JNZ     ??HalUARTPollDMA_14
   \   0000D0   A3           INC     DPTR
   \   0000D1   E4           CLR     A
   \   0000D2   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000D5   12....       LCALL   ?S_SHL
   \   0000D8   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000DA   25..         ADD     A,?V0
   \   0000DC   74..         MOV     A,#((dmaCfg + 260) >> 8) & 0xff
   \   0000DE   35..         ADDC    A,?V1
   \   0000E0   90....       MOV     DPTR,#dmaCh1234 + 24
   \   0000E3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000E6   12....       LCALL   ?S_SHL
   \   0000E9   74..         MOV     A,#(dmaCfg + 4) & 0xff
   \   0000EB   25..         ADD     A,?V0
   \   0000ED   90....       MOV     DPTR,#dmaCh1234 + 25
   \   0000F0   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0000F3   90....       MOV     DPTR,#dmaCh1234 + 29
   \   0000F6   F0           MOVX    @DPTR,A
   \   0000F7   90....       MOV     DPTR,#dmaCh1234 + 28
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   54E0         ANL     A,#0xe0
   \   0000FD   F0           MOVX    @DPTR,A
   \   0000FE   90....       MOV     DPTR,#dmaCfg + 518
   \   000101   E0           MOVX    A,@DPTR
   \   000102   E0           MOVX    A,@DPTR
   \   000103   6401         XRL     A,#0x1
   \   000105   F0           MOVX    @DPTR,A
   \   000106   A2AF         MOV     C,0xa8.7
   \   000108   E4           CLR     A
   \   000109   33           RLC     A
   \   00010A   F8           MOV     R0,A
   \   00010B   C2AF         CLR     0xa8.7
   \   00010D   75D610       MOV     0xd6,#0x10
   \                     ??HalUARTPollDMA_15:
   \   000110   00           NOP
   \   000111   E5D6         MOV     A,0xd6
   \   000113   A2E4         MOV     C,0xE0 /* A   */.4
   \   000115   50F9         JNC     ??HalUARTPollDMA_15
   \   000117   75D1EF       MOV     0xd1,#-0x11
   \   00011A   75D710       MOV     0xd7,#0x10
   \   00011D   E8           MOV     A,R0
   \   00011E   8023         SJMP    ??HalUARTPollDMA_16
   \                     ??HalUARTPollDMA_14:
   \   000120   A2AF         MOV     C,0xa8.7
   \   000122   E4           CLR     A
   \   000123   33           RLC     A
   \   000124   FA           MOV     R2,A
   \   000125   C2AF         CLR     0xa8.7
   \   000127   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00012A   6016         JZ      ??HalUARTPollDMA_17
   \   00012C   E5D6         MOV     A,0xd6
   \   00012E   A2E4         MOV     C,0xE0 /* A   */.4
   \   000130   4010         JC      ??HalUARTPollDMA_17
   \   000132   E5D1         MOV     A,0xd1
   \   000134   A2E4         MOV     C,0xE0 /* A   */.4
   \   000136   400A         JC      ??HalUARTPollDMA_17
   \   000138   EA           MOV     A,R2
   \   000139   A2E0         MOV     C,0xE0 /* A   */.0
   \   00013B   92AF         MOV     0xa8.7,C
   \   00013D                ; Setup parameters for call to function HalUARTIsrDMA
   \   00013D   12....       LCALL   `??HalUARTIsrDMA::?relay`; Banked call to: HalUARTIsrDMA
   \   000140   8005         SJMP    ??HalUARTPollDMA_18
   \                     ??HalUARTPollDMA_17:
   \   000142   EA           MOV     A,R2
   \                     ??HalUARTPollDMA_16:
   \   000143   A2E0         MOV     C,0xE0 /* A   */.0
   \   000145   92AF         MOV     0xa8.7,C
   \                     ??HalUARTPollDMA_18:
   \   000147   EE           MOV     A,R6
   \   000148   6018         JZ      ??HalUARTPollDMA_19
   \   00014A   90....       MOV     DPTR,#dmaCfg + 524
   \   00014D   E0           MOVX    A,@DPTR
   \   00014E   F8           MOV     R0,A
   \   00014F   A3           INC     DPTR
   \   000150   E0           MOVX    A,@DPTR
   \   000151   F9           MOV     R1,A
   \   000152   E8           MOV     A,R0
   \   000153   49           ORL     A,R1
   \   000154   600C         JZ      ??HalUARTPollDMA_19
   \   000156                ; Setup parameters for indirect call
   \   000156   EE           MOV     A,R6
   \   000157   FA           MOV     R2,A
   \   000158   7900         MOV     R1,#0x0
   \   00015A   E0           MOVX    A,@DPTR
   \   00015B   F583         MOV     DPH,A
   \   00015D   8882         MOV     DPL,R0
   \   00015F   12....       LCALL   ?CALL_IND
   \                     ??HalUARTPollDMA_19:
   \   000162   02....       LJMP    ?Subroutine1 & 0xFFFF
   \   000165                REQUIRE U0BAUD
   \   000165                REQUIRE ST0
   \   000165                REQUIRE _A_P0
   \   000165                REQUIRE _A_IEN0
   \   000165                REQUIRE DMAARM
   \   000165                REQUIRE DMAIRQ
   \   000165                REQUIRE DMAREQ

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   90....       MOV     DPTR,#dmaCfg + 518
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0,A
   \   000007   75..00       MOV     ?V1,#0x0
   \   00000A   7407         MOV     A,#0x7
   \   00000C   78..         MOV     R0,#?V0
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#dmaCfg + 256
   \   000003   E0           MOVX    A,@DPTR
   \   000004                REQUIRE ??Subroutine15_0
   \   000004                ; // Fall through to label ??Subroutine15_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   25E0         ADD     A,0xE0 /* A   */
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#dmaCfg & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   65C2         XRL     A,0xc2
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   static __banked_func __xdata_reentrant uint16 HalUARTRxAvailDMA(void)
   \                     HalUARTRxAvailDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00000B   7030         JNZ     ??HalUARTRxAvailDMA_0
   \   00000D   7800         MOV     R0,#0x0
   \   00000F   7900         MOV     R1,#0x0
   \                     ??HalUARTRxAvailDMA_1:
   \   000011   E8           MOV     A,R0
   \   000012   FC           MOV     R4,A
   \   000013   E9           MOV     A,R1
   \   000014   FD           MOV     R5,A
   \   000015   EC           MOV     A,R4
   \   000016   2C           ADD     A,R4
   \   000017   FC           MOV     R4,A
   \   000018   ED           MOV     A,R5
   \   000019   33           RLC     A
   \   00001A   FD           MOV     R5,A
   \   00001B   74..         MOV     A,#dmaCfg & 0xff
   \   00001D   2C           ADD     A,R4
   \   00001E   F582         MOV     DPL,A
   \   000020   74..         MOV     A,#(dmaCfg >> 8) & 0xff
   \   000022   3D           ADDC    A,R5
   \   000023   F583         MOV     DPH,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   65C2         XRL     A,0xc2
   \   000029   7005         JNZ     ??HalUARTRxAvailDMA_2
   \   00002B   0A           INC     R2
   \   00002C   EA           MOV     A,R2
   \   00002D   7001         JNZ     ??HalUARTRxAvailDMA_2
   \   00002F   0B           INC     R3
   \                     ??HalUARTRxAvailDMA_2:
   \   000030   08           INC     R0
   \   000031   E8           MOV     A,R0
   \   000032   7001         JNZ     ??HalUARTRxAvailDMA_3
   \   000034   09           INC     R1
   \                     ??HalUARTRxAvailDMA_3:
   \   000035   C3           CLR     C
   \   000036   9480         SUBB    A,#-0x80
   \   000038   E9           MOV     A,R1
   \   000039   9400         SUBB    A,#0x0
   \   00003B   40D4         JC      ??HalUARTRxAvailDMA_1
   \                     ??HalUARTRxAvailDMA_0:
   \   00003D   80..         SJMP    ??Subroutine17_0
   \   00003F                REQUIRE U0BAUD

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void HalUARTIsrDMA(void)
   \                     HalUARTIsrDMA:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   75D1EF       MOV     0xd1,#-0x11
   \   000007   90....       MOV     DPTR,#dmaCfg + 518
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   6401         XRL     A,#0x1
   \   00000D   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   90....       MOV     DPTR,#dmaCfg + 519
   \   000015   04           INC     A
   \   000016   F0           MOVX    @DPTR,A
   \   000017   E595         MOV     A,0x95
   \   000019   90....       MOV     DPTR,#dmaCfg + 521
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000023   6006         JZ      ??HalUARTIsrDMA_0
   \   000025   90....       MOV     DPTR,#dmaCfg + 523
   \   000028   7401         MOV     A,#0x1
   \   00002A   F0           MOVX    @DPTR,A
   \                     ??HalUARTIsrDMA_0:
   \   00002B   80..         SJMP    ??Subroutine17_0
   \   00002D                REQUIRE DMAIRQ
   \   00002D                REQUIRE ST0
     79          #endif
     80          #if HAL_UART_ISR
     81          #include "_hal_uart_isr.c"
     82          #endif
     83          #if HAL_UART_USB
     84          #include "_hal_uart_usb.c"
     85          #endif
     86          
     87          /******************************************************************************
     88           * @fn      HalUARTInit
     89           *
     90           * @brief   Initialize the UART
     91           *
     92           * @param   none
     93           *
     94           * @return  none
     95           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     96          void HalUARTInit(void)
   \                     HalUARTInit:
     97          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     98          #if HAL_UART_DMA
     99            HalUARTInitDMA();
   \   000004                ; Setup parameters for call to function HalUARTInitDMA
   \   000004   12....       LCALL   `??HalUARTInitDMA::?relay`; Banked call to: HalUARTInitDMA
    100          #endif
    101          #if HAL_UART_ISR
    102            HalUARTInitISR();
    103          #endif
    104          #if HAL_UART_USB
    105            HalUARTInitUSB();
    106          #endif
    107          }
   \   000007   80..         SJMP    ??Subroutine17_0
    108          
    109          /******************************************************************************
    110           * @fn      HalUARTOpen
    111           *
    112           * @brief   Open a port according tp the configuration specified by parameter.
    113           *
    114           * @param   port   - UART port
    115           *          config - contains configuration information
    116           *
    117           * @return  Status of the function call
    118           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    119          uint8 HalUARTOpen(uint8 port, halUARTCfg_t *config)
   \                     HalUARTOpen:
    120          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    121            (void)port;
    122            (void)config;
    123          
    124          #if (HAL_UART_DMA == 1)
    125            if (port == HAL_UART_PORT_0)  HalUARTOpenDMA(config);
   \   000006   7003         JNZ     ??HalUARTOpen_0
   \   000008                ; Setup parameters for call to function HalUARTOpenDMA
   \   000008   12....       LCALL   `??HalUARTOpenDMA::?relay`; Banked call to: HalUARTOpenDMA
    126          #endif
    127          #if (HAL_UART_DMA == 2)
    128            if (port == HAL_UART_PORT_1)  HalUARTOpenDMA(config);
    129          #endif
    130          #if (HAL_UART_ISR == 1)
    131            if (port == HAL_UART_PORT_0)  HalUARTOpenISR(config);
    132          #endif
    133          #if (HAL_UART_ISR == 2)
    134            if (port == HAL_UART_PORT_1)  HalUARTOpenISR(config);
    135          #endif
    136          #if (HAL_UART_USB)
    137            HalUARTOpenUSB(config);
    138          #endif
    139            
    140            return HAL_UART_SUCCESS;
   \                     ??HalUARTOpen_0:
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   80..         SJMP    ?Subroutine2
    141          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    142          
    143          /*****************************************************************************
    144           * @fn      HalUARTRead
    145           *
    146           * @brief   Read a buffer from the UART
    147           *
    148           * @param   port - USART module designation
    149           *          buf  - valid data buffer at least 'len' bytes in size
    150           *          len  - max length number of bytes to copy to 'buf'
    151           *
    152           * @return  length of buffer that was read
    153           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    154          uint16 HalUARTRead(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTRead:
    155          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    156            (void)port;
    157            (void)buf;
    158            (void)len;
    159          
    160          #if (HAL_UART_DMA == 1)
    161            if (port == HAL_UART_PORT_0)  return HalUARTReadDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTRead_0
   \   000008                ; Setup parameters for call to function HalUARTReadDMA
   \   000008   12....       LCALL   `??HalUARTReadDMA::?relay`; Banked call to: HalUARTReadDMA
   \   00000B   8004         SJMP    ??HalUARTRead_1
    162          #endif
    163          #if (HAL_UART_DMA == 2)
    164            if (port == HAL_UART_PORT_1)  return HalUARTReadDMA(buf, len);
    165          #endif
    166          #if (HAL_UART_ISR == 1)
    167            if (port == HAL_UART_PORT_0)  return HalUARTReadISR(buf, len);
    168          #endif
    169          #if (HAL_UART_ISR == 2)
    170            if (port == HAL_UART_PORT_1)  return HalUARTReadISR(buf, len);
    171          #endif
    172          
    173          #if HAL_UART_USB
    174            return HalUARTRx(buf, len);
    175          #else
    176            return 0;
   \                     ??HalUARTRead_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTRead_1:
   \   000011   80..         SJMP    ?Subroutine2
    177          #endif
    178          }
    179          
    180          /******************************************************************************
    181           * @fn      HalUARTWrite
    182           *
    183           * @brief   Write a buffer to the UART.
    184           *
    185           * @param   port - UART port
    186           *          buf  - pointer to the buffer that will be written, not freed
    187           *          len  - length of
    188           *
    189           * @return  length of the buffer that was sent
    190           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          uint16 HalUARTWrite(uint8 port, uint8 *buf, uint16 len)
   \                     HalUARTWrite:
    192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    193            (void)port;
    194            (void)buf;
    195            (void)len;
    196          
    197          #if (HAL_UART_DMA == 1)
    198            if (port == HAL_UART_PORT_0)  return HalUARTWriteDMA(buf, len);
   \   000006   7005         JNZ     ??HalUARTWrite_0
   \   000008                ; Setup parameters for call to function HalUARTWriteDMA
   \   000008   12....       LCALL   `??HalUARTWriteDMA::?relay`; Banked call to: HalUARTWriteDMA
   \   00000B   8004         SJMP    ??HalUARTWrite_1
    199          #endif
    200          #if (HAL_UART_DMA == 2)
    201            if (port == HAL_UART_PORT_1)  return HalUARTWriteDMA(buf, len);
    202          #endif
    203          #if (HAL_UART_ISR == 1)
    204            if (port == HAL_UART_PORT_0)  return HalUARTWriteISR(buf, len);
    205          #endif
    206          #if (HAL_UART_ISR == 2)
    207            if (port == HAL_UART_PORT_1)  return HalUARTWriteISR(buf, len);
    208          #endif
    209          
    210          #if HAL_UART_USB
    211            HalUARTTx(buf, len);
    212            return len;
    213          #else
    214            return 0;
   \                     ??HalUARTWrite_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??HalUARTWrite_1:
   \   000011                REQUIRE ?Subroutine2
   \   000011                ; // Fall through to label ?Subroutine2
    215          #endif
    216          }
    217          
    218          /******************************************************************************
    219           * @fn      HalUARTSuspend
    220           *
    221           * @brief   Suspend UART hardware before entering PM mode 1, 2 or 3.
    222           *
    223           * @param   None
    224           *
    225           * @return  None
    226           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    227          void HalUARTSuspend( void )
   \                     HalUARTSuspend:
    228          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    229          #if HAL_UART_DMA
    230            HalUARTSuspendDMA();
   \   000000   D285         SETB    0x80.5
   \   000002   5386BF       ANL     0x86,#0xbf
   \   000005   43AB10       ORL     0xab,#0x10
    231          #endif
    232          #if HAL_UART_ISR
    233            HalUARTSuspendISR();
    234          #endif
    235          }
   \   000008   02....       LJMP    ?BRET
   \   00000B                REQUIRE _A_P0
   \   00000B                REQUIRE U0CSR
   \   00000B                REQUIRE P0IEN
    236          
    237          /******************************************************************************
    238           * @fn      HalUARTResume
    239           *
    240           * @brief   Resume UART hardware after exiting PM mode 1, 2 or 3.
    241           *
    242           * @param   None
    243           *
    244           * @return  None
    245           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    246          void HalUARTResume( void )
   \                     HalUARTResume:
    247          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    248          #if HAL_UART_DMA
    249            HalUARTResumeDMA();
   \   000000   53ABEF       ANL     0xab,#0xef
   \   000003   43C480       ORL     0xc4,#0x80
   \   000006   438640       ORL     0x86,#0x40
   \   000009   C285         CLR     0x80.5
    250          #endif
    251          #if HAL_UART_ISR
    252            HalUARTResumeISR();
    253          #endif
    254          }
   \   00000B   02....       LJMP    ?BRET
   \   00000E                REQUIRE P0IEN
   \   00000E                REQUIRE U0UCR
   \   00000E                REQUIRE U0CSR
   \   00000E                REQUIRE _A_P0
    255          
    256          /***************************************************************************************************
    257           * @fn      HalUARTPoll
    258           *
    259           * @brief   Poll the UART.
    260           *
    261           * @param   none
    262           *
    263           * @return  none
    264           *****************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          void HalUARTPoll(void)
   \                     HalUARTPoll:
    266          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    267          #if HAL_UART_DMA
    268            HalUARTPollDMA();
   \   000004                ; Setup parameters for call to function HalUARTPollDMA
   \   000004   12....       LCALL   `??HalUARTPollDMA::?relay`; Banked call to: HalUARTPollDMA
    269          #endif
    270          #if HAL_UART_ISR
    271            HalUARTPollISR();
    272          #endif
    273          #if HAL_UART_USB
    274            HalUARTPollUSB();
    275          #endif
    276          }
   \   000007   80..         SJMP    ??Subroutine17_0
    277          
    278          /**************************************************************************************************
    279           * @fn      Hal_UART_RxBufLen()
    280           *
    281           * @brief   Calculate Rx Buffer length - the number of bytes in the buffer.
    282           *
    283           * @param   port - UART port
    284           *
    285           * @return  length of current Rx Buffer
    286           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    287          uint16 Hal_UART_RxBufLen( uint8 port )
   \                     Hal_UART_RxBufLen:
    288          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    289            (void)port;
    290          
    291          #if (HAL_UART_DMA == 1)
    292            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailDMA();
   \   000006   7005         JNZ     ??Hal_UART_RxBufLen_0
   \   000008                ; Setup parameters for call to function HalUARTRxAvailDMA
   \   000008   12....       LCALL   `??HalUARTRxAvailDMA::?relay`; Banked call to: HalUARTRxAvailDMA
   \   00000B   8004         SJMP    ??Hal_UART_RxBufLen_1
    293          #endif
    294          #if (HAL_UART_DMA == 2)
    295            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailDMA();
    296          #endif
    297          #if (HAL_UART_ISR == 1)
    298            if (port == HAL_UART_PORT_0)  return HalUARTRxAvailISR();
    299          #endif
    300          #if (HAL_UART_ISR == 2)
    301            if (port == HAL_UART_PORT_1)  return HalUARTRxAvailISR();
    302          #endif
    303          #if HAL_UART_USB
    304            return HalUARTRxAvailUSB();
    305          #else
    306            return 0;
   \                     ??Hal_UART_RxBufLen_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \                     ??Hal_UART_RxBufLen_1:
   \   000011   80..         SJMP    ?Subroutine2
    307          #endif
    308          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInitDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInitDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpenDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpenDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTReadDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTReadDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWriteDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWriteDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPollDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPollDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRxAvailDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRxAvailDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTIsrDMA::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTIsrDMA

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTInit::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTOpen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTOpen

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTRead::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTRead

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTWrite::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTWrite

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTSuspend::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTSuspend

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTResume::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTResume

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??HalUARTPoll::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    HalUARTPoll

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??Hal_UART_RxBufLen::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Hal_UART_RxBufLen
    309          
    310          /******************************************************************************
    311          ******************************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   HalUARTInit
        2      0   -> HalUARTInitDMA
      2      0   HalUARTInitDMA
      2     10   HalUARTIsrDMA
      0      9   HalUARTOpen
        0      9   -> HalUARTOpenDMA
      2      9   HalUARTOpenDMA
        2      0   -> osal_memset
      2      0   HalUARTPoll
        2      0   -> HalUARTPollDMA
      0     10   HalUARTPollDMA
        0     10   -> HalUARTIsrDMA
        0     10   -> HalUARTRxAvailDMA
      0      9   HalUARTRead
        0      9   -> HalUARTReadDMA
      1     19   HalUARTReadDMA
      0      0   HalUARTResume
      2     10   HalUARTRxAvailDMA
      0      0   HalUARTSuspend
      0      9   HalUARTWrite
        0      9   -> HalUARTWriteDMA
      1     23   HalUARTWriteDMA
      0      9   Hal_UART_RxBufLen
        0      9   -> HalUARTRxAvailDMA


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      21  ??Subroutine15_0
       4  ??Subroutine16_0
       7  ??Subroutine17_0
       1  ?Subroutine0
       5  ?Subroutine1
      10  ?Subroutine10
      10  ?Subroutine11
      11  ?Subroutine12
       4  ?Subroutine13
      11  ?Subroutine14
       5  ?Subroutine2
       5  ?Subroutine3
      15  ?Subroutine4
       4  ?Subroutine5
      14  ?Subroutine6
      11  ?Subroutine7
       4  ?Subroutine8
       1  ?Subroutine9
       1  ADCCFG
       1  DMAARM
       1  DMAIRQ
       1  DMAREQ
       9  HalUARTInit
       6  HalUARTInit::?relay
     113  HalUARTInitDMA
       6  HalUARTInitDMA::?relay
      45  HalUARTIsrDMA
       6  HalUARTIsrDMA::?relay
      15  HalUARTOpen
       6  HalUARTOpen::?relay
     192  HalUARTOpenDMA
       6  HalUARTOpenDMA::?relay
       9  HalUARTPoll
       6  HalUARTPoll::?relay
     357  HalUARTPollDMA
       6  HalUARTPollDMA::?relay
      19  HalUARTRead
       6  HalUARTRead::?relay
      79  HalUARTReadDMA
       6  HalUARTReadDMA::?relay
      14  HalUARTResume
       6  HalUARTResume::?relay
      63  HalUARTRxAvailDMA
       6  HalUARTRxAvailDMA::?relay
      11  HalUARTSuspend
       6  HalUARTSuspend::?relay
      17  HalUARTWrite
       6  HalUARTWrite::?relay
     246  HalUARTWriteDMA
       6  HalUARTWriteDMA::?relay
      19  Hal_UART_RxBufLen
       6  Hal_UART_RxBufLen::?relay
       1  P0DIR
       1  P0IEN
       1  P0SEL
       1  P1SEL
       1  P2DIR
       1  PERCFG
       1  ST0
       1  U0BAUD
       1  U0CSR
       1  U0GCR
       1  U0UCR
       1  _A_IEN0
       1  _A_P0
     526  dmaCfg

 
 1 351 bytes in segment BANKED_CODE
    90 bytes in segment BANK_RELAYS
    17 bytes in segment SFR_AN
   526 bytes in segment XDATA_Z
 
 1 441 bytes of CODE  memory
     0 bytes of DATA  memory (+ 17 bytes shared)
   526 bytes of XDATA memory

Errors: none
Warnings: none
