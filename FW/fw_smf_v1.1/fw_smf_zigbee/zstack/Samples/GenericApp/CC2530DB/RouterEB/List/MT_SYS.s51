///////////////////////////////////////////////////////////////////////////////
//
// IAR C/C++ Compiler V9.20.1.2476 for 8051               31/Jul/2016  23:45:36
// Copyright 2004-2015 IAR Systems AB.
// Standalone license - IAR Embedded Workbench for 8051
//
//    Core               =  plain
//    Code model         =  banked
//    Data model         =  large
//    Calling convention =  xdata reentrant
//    Constant location  =  data_rom
//    Dptr setup         =  1,16
//                          
//    Source file        =  
//        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\mt\MT_SYS.c
//    Command line       =  
//        -f "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
//        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
//        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
//        -DRTR_NWK) -f "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
//        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
//        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0x9669
//        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
//        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
//        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
//        -DAPSC_ACK_WAIT_DURATION_POLLED=2000 -DNWK_INDIRECT_MSG_TIMEOUT=7
//        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
//        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
//        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
//        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
//        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
//        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
//        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
//        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
//        -DREJOIN_POLL_RATE=440 "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Components\mt\MT_SYS.c" -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D
//        MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC
//        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\" -lA
//        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\"
//        --diag_suppress Pe001,Pa010 -o "C:\Users\8470p\Desktop\Z-Stack Mesh
//        1.0.0 ZED\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\Obj\"
//        -e --no_code_motion --debug --core=plain --dptr=16,1
//        --data_model=large --code_model=banked
//        --calling_convention=xdata_reentrant --place_constants=data_rom
//        --nr_virtual_regs 16 -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\" -I
//        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\Source\" -I
//        "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\mt\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\"
//        -I "C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
//        -Ohz --require_prototypes
//    List file          =  
//        C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0
//        ZED\Projects\zstack\Samples\GenericApp\CC2530DB\RouterEB\List\MT_SYS.s51
//
///////////////////////////////////////////////////////////////////////////////

        NAME MT_SYS

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?V8
        EXTERN ?V9
        EXTERN ?V10
        EXTERN ?V11
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_DIV_MOD
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTACK_DISP101_8
        EXTERN ?XSTACK_DISP102_8

        PUBLIC `??MT_SysAdcRead::?relay`
        FUNCTION `??MT_SysAdcRead::?relay`,0203H
        PUBLIC `??MT_SysCommandProcessing::?relay`
        FUNCTION `??MT_SysCommandProcessing::?relay`,0203H
        PUBLIC `??MT_SysGetExtAddr::?relay`
        FUNCTION `??MT_SysGetExtAddr::?relay`,0203H
        PUBLIC `??MT_SysGetUtcTime::?relay`
        FUNCTION `??MT_SysGetUtcTime::?relay`,0203H
        PUBLIC `??MT_SysGpio::?relay`
        FUNCTION `??MT_SysGpio::?relay`,0203H
        PUBLIC `??MT_SysOsalNVDelete::?relay`
        FUNCTION `??MT_SysOsalNVDelete::?relay`,0203H
        PUBLIC `??MT_SysOsalNVItemInit::?relay`
        FUNCTION `??MT_SysOsalNVItemInit::?relay`,0203H
        PUBLIC `??MT_SysOsalNVLength::?relay`
        FUNCTION `??MT_SysOsalNVLength::?relay`,0203H
        PUBLIC `??MT_SysOsalNVRead::?relay`
        FUNCTION `??MT_SysOsalNVRead::?relay`,0203H
        PUBLIC `??MT_SysOsalNVWrite::?relay`
        FUNCTION `??MT_SysOsalNVWrite::?relay`,0203H
        PUBLIC `??MT_SysOsalStartTimer::?relay`
        FUNCTION `??MT_SysOsalStartTimer::?relay`,0203H
        PUBLIC `??MT_SysOsalStopTimer::?relay`
        FUNCTION `??MT_SysOsalStopTimer::?relay`,0203H
        PUBLIC `??MT_SysOsalTimerExpired::?relay`
        FUNCTION `??MT_SysOsalTimerExpired::?relay`,0203H
        PUBLIC `??MT_SysPing::?relay`
        FUNCTION `??MT_SysPing::?relay`,0203H
        PUBLIC `??MT_SysRandom::?relay`
        FUNCTION `??MT_SysRandom::?relay`,0203H
        PUBLIC `??MT_SysReset::?relay`
        FUNCTION `??MT_SysReset::?relay`,0203H
        PUBLIC `??MT_SysResetInd::?relay`
        FUNCTION `??MT_SysResetInd::?relay`,0203H
        PUBLIC `??MT_SysSetExtAddr::?relay`
        FUNCTION `??MT_SysSetExtAddr::?relay`,0203H
        PUBLIC `??MT_SysSetTxPower::?relay`
        FUNCTION `??MT_SysSetTxPower::?relay`,0203H
        PUBLIC `??MT_SysSetUtcTime::?relay`
        FUNCTION `??MT_SysSetUtcTime::?relay`,0203H
        PUBLIC `??MT_SysStackTune::?relay`
        FUNCTION `??MT_SysStackTune::?relay`,0203H
        PUBLIC `??MT_SysVersion::?relay`
        FUNCTION `??MT_SysVersion::?relay`,0203H
        PUBLIC `??powerOffSoc::?relay`
        FUNCTION `??powerOffSoc::?relay`,0203H
        PUBLIC MT_SysAdcRead
        FUNCTION MT_SysAdcRead,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SysCommandProcessing
        FUNCTION MT_SysCommandProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_SysGetExtAddr
        FUNCTION MT_SysGetExtAddr,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC MT_SysGetUtcTime
        FUNCTION MT_SysGetUtcTime,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC MT_SysGpio
        FUNCTION MT_SysGpio,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_SysOsalEventId
        PUBLIC MT_SysOsalNVDelete
        FUNCTION MT_SysOsalNVDelete,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysOsalNVItemInit
        FUNCTION MT_SysOsalNVItemInit,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC MT_SysOsalNVLength
        FUNCTION MT_SysOsalNVLength,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SysOsalNVRead
        FUNCTION MT_SysOsalNVRead,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC MT_SysOsalNVWrite
        FUNCTION MT_SysOsalNVWrite,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC MT_SysOsalStartTimer
        FUNCTION MT_SysOsalStartTimer,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_SysOsalStopTimer
        FUNCTION MT_SysOsalStopTimer,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysOsalTimerExpired
        FUNCTION MT_SysOsalTimerExpired,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysPing
        FUNCTION MT_SysPing,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC MT_SysRandom
        FUNCTION MT_SysRandom,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SysReset
        FUNCTION MT_SysReset,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MT_SysResetInd
        FUNCTION MT_SysResetInd,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_SysSetExtAddr
        FUNCTION MT_SysSetExtAddr,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC MT_SysSetTxPower
        FUNCTION MT_SysSetTxPower,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC MT_SysSetUtcTime
        FUNCTION MT_SysSetUtcTime,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC MT_SysStackTune
        FUNCTION MT_SysStackTune,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysVersion
        FUNCTION MT_SysVersion,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK SLEEPSTA
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        PUBLIC powerOffSoc
        FUNCTION powerOffSoc,0203H
        ARGFRAME XSTACK, 0, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalAdcRead          SYMBOL "HalAdcRead"
`??HalAdcRead::?relay` SYMBOL "?relay", HalAdcRead
MAC_MlmeSetReq      SYMBOL "MAC_MlmeSetReq"
`??MAC_MlmeSetReq::?relay` SYMBOL "?relay", MAC_MlmeSetReq
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
`??MT_BuildAndSendZToolResponse::?relay` SYMBOL "?relay", MT_BuildAndSendZToolResponse
Onboard_rand        SYMBOL "Onboard_rand"
`??Onboard_rand::?relay` SYMBOL "?relay", Onboard_rand
ZMacGetReq          SYMBOL "ZMacGetReq"
`??ZMacGetReq::?relay` SYMBOL "?relay", ZMacGetReq
ZMacSetReq          SYMBOL "ZMacSetReq"
`??ZMacSetReq::?relay` SYMBOL "?relay", ZMacSetReq
macRadioSetTxPower  SYMBOL "macRadioSetTxPower"
`??macRadioSetTxPower::?relay` SYMBOL "?relay", macRadioSetTxPower
osal_ConvertUTCSecs SYMBOL "osal_ConvertUTCSecs"
`??osal_ConvertUTCSecs::?relay` SYMBOL "?relay", osal_ConvertUTCSecs
osal_ConvertUTCTime SYMBOL "osal_ConvertUTCTime"
`??osal_ConvertUTCTime::?relay` SYMBOL "?relay", osal_ConvertUTCTime
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
`??osal_buffer_uint32::?relay` SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
`??osal_build_uint16::?relay` SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
`??osal_build_uint32::?relay` SYMBOL "?relay", osal_build_uint32
osal_getClock       SYMBOL "osal_getClock"
`??osal_getClock::?relay` SYMBOL "?relay", osal_getClock
osal_mem_alloc      SYMBOL "osal_mem_alloc"
`??osal_mem_alloc::?relay` SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
`??osal_mem_free::?relay` SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
`??osal_memcpy::?relay` SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
`??osal_memset::?relay` SYMBOL "?relay", osal_memset
osal_nv_delete      SYMBOL "osal_nv_delete"
`??osal_nv_delete::?relay` SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
`??osal_nv_item_init::?relay` SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
`??osal_nv_item_len::?relay` SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
`??osal_nv_read::?relay` SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
`??osal_nv_write::?relay` SYMBOL "?relay", osal_nv_write
osal_setClock       SYMBOL "osal_setClock"
`??osal_setClock::?relay` SYMBOL "?relay", osal_setClock
osal_start_timerEx  SYMBOL "osal_start_timerEx"
`??osal_start_timerEx::?relay` SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
`??osal_stop_timerEx::?relay` SYMBOL "?relay", osal_stop_timerEx
zgSetItem           SYMBOL "zgSetItem"
`??zgSetItem::?relay` SYMBOL "?relay", zgSetItem
MT_SysAdcRead       SYMBOL "MT_SysAdcRead"
`??MT_SysAdcRead::?relay` SYMBOL "?relay", MT_SysAdcRead
MT_SysCommandProcessing SYMBOL "MT_SysCommandProcessing"
`??MT_SysCommandProcessing::?relay` SYMBOL "?relay", MT_SysCommandProcessing
MT_SysGetExtAddr    SYMBOL "MT_SysGetExtAddr"
`??MT_SysGetExtAddr::?relay` SYMBOL "?relay", MT_SysGetExtAddr
MT_SysGetUtcTime    SYMBOL "MT_SysGetUtcTime"
`??MT_SysGetUtcTime::?relay` SYMBOL "?relay", MT_SysGetUtcTime
MT_SysGpio          SYMBOL "MT_SysGpio"
`??MT_SysGpio::?relay` SYMBOL "?relay", MT_SysGpio
MT_SysOsalNVDelete  SYMBOL "MT_SysOsalNVDelete"
`??MT_SysOsalNVDelete::?relay` SYMBOL "?relay", MT_SysOsalNVDelete
MT_SysOsalNVItemInit SYMBOL "MT_SysOsalNVItemInit"
`??MT_SysOsalNVItemInit::?relay` SYMBOL "?relay", MT_SysOsalNVItemInit
MT_SysOsalNVLength  SYMBOL "MT_SysOsalNVLength"
`??MT_SysOsalNVLength::?relay` SYMBOL "?relay", MT_SysOsalNVLength
MT_SysOsalNVRead    SYMBOL "MT_SysOsalNVRead"
`??MT_SysOsalNVRead::?relay` SYMBOL "?relay", MT_SysOsalNVRead
MT_SysOsalNVWrite   SYMBOL "MT_SysOsalNVWrite"
`??MT_SysOsalNVWrite::?relay` SYMBOL "?relay", MT_SysOsalNVWrite
MT_SysOsalStartTimer SYMBOL "MT_SysOsalStartTimer"
`??MT_SysOsalStartTimer::?relay` SYMBOL "?relay", MT_SysOsalStartTimer
MT_SysOsalStopTimer SYMBOL "MT_SysOsalStopTimer"
`??MT_SysOsalStopTimer::?relay` SYMBOL "?relay", MT_SysOsalStopTimer
MT_SysOsalTimerExpired SYMBOL "MT_SysOsalTimerExpired"
`??MT_SysOsalTimerExpired::?relay` SYMBOL "?relay", MT_SysOsalTimerExpired
MT_SysPing          SYMBOL "MT_SysPing"
`??MT_SysPing::?relay` SYMBOL "?relay", MT_SysPing
MT_SysRandom        SYMBOL "MT_SysRandom"
`??MT_SysRandom::?relay` SYMBOL "?relay", MT_SysRandom
MT_SysReset         SYMBOL "MT_SysReset"
`??MT_SysReset::?relay` SYMBOL "?relay", MT_SysReset
MT_SysResetInd      SYMBOL "MT_SysResetInd"
`??MT_SysResetInd::?relay` SYMBOL "?relay", MT_SysResetInd
MT_SysSetExtAddr    SYMBOL "MT_SysSetExtAddr"
`??MT_SysSetExtAddr::?relay` SYMBOL "?relay", MT_SysSetExtAddr
MT_SysSetTxPower    SYMBOL "MT_SysSetTxPower"
`??MT_SysSetTxPower::?relay` SYMBOL "?relay", MT_SysSetTxPower
MT_SysSetUtcTime    SYMBOL "MT_SysSetUtcTime"
`??MT_SysSetUtcTime::?relay` SYMBOL "?relay", MT_SysSetUtcTime
MT_SysStackTune     SYMBOL "MT_SysStackTune"
`??MT_SysStackTune::?relay` SYMBOL "?relay", MT_SysStackTune
MT_SysVersion       SYMBOL "MT_SysVersion"
`??MT_SysVersion::?relay` SYMBOL "?relay", MT_SysVersion
powerOffSoc         SYMBOL "powerOffSoc"
`??powerOffSoc::?relay` SYMBOL "?relay", powerOffSoc

        EXTERN `??HalAdcRead::?relay`
        FUNCTION `??HalAdcRead::?relay`,00H
        EXTERN `??MAC_MlmeSetReq::?relay`
        FUNCTION `??MAC_MlmeSetReq::?relay`,00H
        EXTERN `??MT_BuildAndSendZToolResponse::?relay`
        FUNCTION `??MT_BuildAndSendZToolResponse::?relay`,00H
        EXTERN `??Onboard_rand::?relay`
        FUNCTION `??Onboard_rand::?relay`,00H
        EXTERN `??ZMacGetReq::?relay`
        FUNCTION `??ZMacGetReq::?relay`,00H
        EXTERN `??ZMacSetReq::?relay`
        FUNCTION `??ZMacSetReq::?relay`,00H
        EXTERN `??macRadioSetTxPower::?relay`
        FUNCTION `??macRadioSetTxPower::?relay`,00H
        EXTERN `??osal_ConvertUTCSecs::?relay`
        FUNCTION `??osal_ConvertUTCSecs::?relay`,00H
        EXTERN `??osal_ConvertUTCTime::?relay`
        FUNCTION `??osal_ConvertUTCTime::?relay`,00H
        EXTERN `??osal_buffer_uint32::?relay`
        FUNCTION `??osal_buffer_uint32::?relay`,00H
        EXTERN `??osal_build_uint16::?relay`
        FUNCTION `??osal_build_uint16::?relay`,00H
        EXTERN `??osal_build_uint32::?relay`
        FUNCTION `??osal_build_uint32::?relay`,00H
        EXTERN `??osal_getClock::?relay`
        FUNCTION `??osal_getClock::?relay`,00H
        EXTERN `??osal_mem_alloc::?relay`
        FUNCTION `??osal_mem_alloc::?relay`,00H
        EXTERN `??osal_mem_free::?relay`
        FUNCTION `??osal_mem_free::?relay`,00H
        EXTERN `??osal_memcpy::?relay`
        FUNCTION `??osal_memcpy::?relay`,00H
        EXTERN `??osal_memset::?relay`
        FUNCTION `??osal_memset::?relay`,00H
        EXTERN `??osal_nv_delete::?relay`
        FUNCTION `??osal_nv_delete::?relay`,00H
        EXTERN `??osal_nv_item_init::?relay`
        FUNCTION `??osal_nv_item_init::?relay`,00H
        EXTERN `??osal_nv_item_len::?relay`
        FUNCTION `??osal_nv_item_len::?relay`,00H
        EXTERN `??osal_nv_read::?relay`
        FUNCTION `??osal_nv_read::?relay`,00H
        EXTERN `??osal_nv_write::?relay`
        FUNCTION `??osal_nv_write::?relay`,00H
        EXTERN `??osal_setClock::?relay`
        FUNCTION `??osal_setClock::?relay`,00H
        EXTERN `??osal_start_timerEx::?relay`
        FUNCTION `??osal_start_timerEx::?relay`,00H
        EXTERN `??osal_stop_timerEx::?relay`
        FUNCTION `??osal_stop_timerEx::?relay`,00H
        EXTERN `??zgSetItem::?relay`
        FUNCTION `??zgSetItem::?relay`,00H
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeSetReq
        FUNCTION MAC_MlmeSetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MTVersionString
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskID
        EXTERN Onboard_rand
        FUNCTION Onboard_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioSetTxPower
        FUNCTION macRadioSetTxPower,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_ConvertUTCSecs
        FUNCTION osal_ConvertUTCSecs,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_ConvertUTCTime
        FUNCTION osal_ConvertUTCTime,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_getClock
        FUNCTION osal_getClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_setClock
        FUNCTION osal_setClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgSetItem
        FUNCTION zgSetItem,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Users\8470p\Desktop\Z-Stack Mesh 1.0.0 ZED\Components\mt\MT_SYS.c
//    1 /******************************************************************************
//    2   Filename:       MT_SYS.c
//    3   Revised:        $Date: 2014-08-04 15:38:03 -0700 (Mon, 04 Aug 2014) $
//    4   Revision:       $Revision: 39653 $
//    5 
//    6   Description:   MonitorTest functions for SYS commands.
//    7 
//    8   Copyright 2007-2014 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  *****************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "MT.h"
//   45 #include "MT_SYS.h"
//   46 #include "MT_VERSION.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_NV.h"
//   49 #include "Onboard.h"  /* This is here because RAM read/write macros need it */

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1
//   50 #include "hal_adc.h"
//   51 #include "OSAL_Clock.h"
//   52 #include "mac_low_level.h"
//   53 #include "ZMAC.h"
//   54 #include "mac_radio_defs.h"
//   55 #if defined ( MT_SYS_JAMMER_FEATURE )
//   56   #include "mac_rx.h"
//   57 #endif
//   58 #if !defined(CC253X_MACNP)
//   59   #include "ZGlobals.h"
//   60 #endif
//   61 #if (defined INCLUDE_REVISION_INFORMATION) && ((defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)) //built for bootloader
//   62   #include "hal_flash.h"
//   63   #include "sb_shared.h"
//   64 #endif
//   65 #include "ZDiags.h"
//   66 #include "MT_UART.h"
//   67 
//   68 /***************************************************************************************************
//   69  * MACROS
//   70  ***************************************************************************************************/
//   71 
//   72 /* Max possible MT response length, limited by TX buffer size and sizeof uint8 */
//   73 #define MT_MAX_RSP_LEN  ( MIN( MT_UART_DEFAULT_MAX_TX_BUFF, 255 ) )
//   74 
//   75 /* Max possible MT response data length, MT protocol overhead */
//   76 #define MT_MAX_RSP_DATA_LEN  ( (MT_MAX_RSP_LEN - 1) - SPI_0DATA_MSG_LEN )
//   77   
//   78 #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
//   79 
//   80 #if !defined HAL_GPIO || !HAL_GPIO
//   81 #define GPIO_DIR_IN(IDX)
//   82 #define GPIO_DIR_OUT(IDX)
//   83 #define GPIO_TRI(IDX)
//   84 #define GPIO_PULL_UP(IDX)
//   85 #define GPIO_PULL_DN(IDX)
//   86 #define GPIO_SET(IDX)
//   87 #define GPIO_CLR(IDX)
//   88 #define GPIO_TOG(IDX)
//   89 #define GPIO_GET(IDX) 0
//   90 #define GPIO_HiD_SET() (val = 0)
//   91 #define GPIO_HiD_CLR() (val = 0)
//   92 #endif
//   93 
//   94 #if defined ( MT_SYS_SNIFFER_FEATURE )
//   95 #if defined ( HAL_MCU_CC2530 ) && !defined ( HAL_BOARD_CC2530USB )
//   96   // This only work with the CC253x chips
//   97   #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() st         \ 
//   98   (                                                                                                                                                                                                                                   \ 
//   99     OBSSEL3 = 0xFD;                                        \ 
//  100     OBSSEL4 = 0xFC;                                        \ 
//  101     RFC_OBS_CTRL1 = 0x09; /* 9 - sniff clk */              \ 
//  102     RFC_OBS_CTRL2 = 0x08; /* 8 - sniff data */             \ 
//  103     MDMTEST1 |= 0x04;                                      \ 
//  104   )
//  105 
//  106   // This only work with the CC253x chips
//  107   #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() st        \ 
//  108   (                                                                                                                                                                                                                                   \ 
//  109     OBSSEL3 &= ~0x80;                                                                                                                                                                             \ 
//  110     OBSSEL4 &= ~0x80;                                                                                                                                                                             \ 
//  111     RFC_OBS_CTRL1 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[1] */                                                                                   \ 
//  112     RFC_OBS_CTRL2 = 0x00; /* 0 - constant value 0 to rfc_obs_sigs[2] */                                                                                   \ 
//  113     MDMTEST1 &= ~0x04;                                                                                                                                                         \ 
//  114   )
//  115 #else
//  116   #define HAL_BOARD_ENABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
//  117   #define HAL_BOARD_DISABLE_INTEGRATED_SNIFFER() { status = FAILURE; }
//  118 #endif
//  119 #endif // MT_SYS_SNIFFER_FEATURE
//  120 
//  121 #define RESET_HARD     0
//  122 #define RESET_SOFT     1
//  123 #define RESET_SHUTDOWN 2
//  124 
//  125 /***************************************************************************************************
//  126  * CONSTANTS
//  127  ***************************************************************************************************/
//  128 
//  129 #if !defined MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
//  130 #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
//  131 #endif
//  132 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  133 const uint16 MT_SysOsalEventId [] = {
MT_SysOsalEventId:
        DATA16
        DW 2048
        DW 1024
        DW 512
        DW 256
//  134                                       MT_SYS_OSAL_EVENT_0,
//  135                                       MT_SYS_OSAL_EVENT_1,
//  136                                       MT_SYS_OSAL_EVENT_2,
//  137                                       MT_SYS_OSAL_EVENT_3
//  138                                     };
//  139 
//  140 typedef enum {
//  141   GPIO_DIR,
//  142   GPIO_TRI,
//  143   GPIO_SET,
//  144   GPIO_CLR,
//  145   GPIO_TOG,
//  146   GPIO_GET,
//  147   GPIO_HiD = 0x12
//  148 } GPIO_Op_t;
//  149 
//  150 #if defined ( MT_SYS_JAMMER_FEATURE )
//  151   #define JAMMER_CHECK_EVT                           0x0001
//  152 
//  153   #if !defined ( JAMMER_DETECT_CONTINUOUS_EVENTS )
//  154     #define JAMMER_DETECT_CONTINUOUS_EVENTS          150
//  155   #endif
//  156   #if !defined ( JAMMER_DETECT_PERIOD_TIME )
//  157     #define JAMMER_DETECT_PERIOD_TIME                100  // In milliseconds
//  158   #endif
//  159   #if !defined ( JAMMER_HIGH_NOISE_LEVEL )
//  160     #define JAMMER_HIGH_NOISE_LEVEL                  -65
//  161   #endif
//  162 #endif // MT_SYS_JAMMER_FEATURE
//  163 
//  164 /***************************************************************************************************
//  165  * LOCAL VARIABLES
//  166  ***************************************************************************************************/
//  167 #if defined ( MT_SYS_JAMMER_FEATURE )
//  168   static uint8 jammerTaskID;
//  169   static uint16 jammerContinuousEvents = JAMMER_DETECT_CONTINUOUS_EVENTS;
//  170   static uint16 jammerDetections = JAMMER_DETECT_CONTINUOUS_EVENTS;
//  171   static int8 jammerHighNoiseLevel = JAMMER_HIGH_NOISE_LEVEL;
//  172   static uint32 jammerDetectPeriodTime = JAMMER_DETECT_PERIOD_TIME;
//  173 #endif 
//  174   
//  175 #if defined ( MT_SYS_SNIFFER_FEATURE )
//  176 static uint8 sniffer = FALSE;
//  177 #endif
//  178 
//  179 /***************************************************************************************************
//  180  * LOCAL FUNCTIONS
//  181  ***************************************************************************************************/
//  182 #if defined (MT_SYS_FUNC)
//  183 void MT_SysReset(uint8 *pBuf);
//  184 void MT_SysPing(void);
//  185 void MT_SysVersion(void);
//  186 void MT_SysSetExtAddr(uint8 *pBuf);
//  187 void MT_SysGetExtAddr(void);
//  188 void MT_SysOsalNVItemInit(uint8 *pBuf);
//  189 void MT_SysOsalNVDelete(uint8 *pBuf);
//  190 void MT_SysOsalNVLength(uint8 *pBuf);
//  191 void MT_SysOsalNVRead(uint8 *pBuf);
//  192 void MT_SysOsalNVWrite(uint8 *pBuf);
//  193 void MT_SysOsalStartTimer(uint8 *pBuf);
//  194 void MT_SysOsalStopTimer(uint8 *pBuf);
//  195 void MT_SysRandom(void);
//  196 void MT_SysAdcRead(uint8 *pBuf);
//  197 void MT_SysGpio(uint8 *pBuf);
//  198 void MT_SysStackTune(uint8 *pBuf);
//  199 void MT_SysSetUtcTime(uint8 *pBuf);
//  200 void MT_SysGetUtcTime(void);
//  201 void MT_SysSetTxPower(uint8 *pBuf);
//  202 #if defined ( MT_SYS_JAMMER_FEATURE )
//  203   void MT_SysJammerParameters( uint8 *pBuf );
//  204 #endif /* MT_SYS_JAMMER_FEATURE */
//  205 #if defined ( MT_SYS_SNIFFER_FEATURE )
//  206 void MT_SysSnifferParameters( uint8 *pBuf );
//  207 #endif /* MT_SYS_SNIFFER_FEATURE */
//  208 #if defined ( FEATURE_SYSTEM_STATS )
//  209 void MT_SysZDiagsInitStats(void);
//  210 void MT_SysZDiagsClearStats(uint8 *pBuf);
//  211 void MT_SysZDiagsGetStatsAttr(uint8 *pBuf);
//  212 void MT_SysZDiagsRestoreStatsFromNV(void);
//  213 void MT_SysZDiagsSaveStatsToNV(void);
//  214 #endif /* FEATURE_SYSTEM_STATS */
//  215 #endif /* MT_SYS_FUNC */
//  216 void powerOffSoc(void);
//  217 
//  218 #if defined (MT_SYS_FUNC)
//  219 /***************************************************************************************************
//  220  * @fn      MT_SysProcessing
//  221  *
//  222  * @brief   Process all the SYS commands that are issued by test tool
//  223  *
//  224  * @param   pBuf - pointer to the msg buffer
//  225  *
//  226  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  227  *          |  1   |   1   |   1   |  0-255 |
//  228  *
//  229  * @return  status
//  230  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  231 uint8 MT_SysCommandProcessing(uint8 *pBuf)
MT_SysCommandProcessing:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
        CODE
//  232 {
        FUNCALL MT_SysCommandProcessing, MT_SysReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysPing
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysVersion
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVDelete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVItemInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalStopTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysRandom
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGpio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysStackTune
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetUtcTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGetUtcTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetTxPower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  233   uint8 status = MT_RPC_SUCCESS;
        MOV     R6,#0x0
//  234 
//  235   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??MT_SysCommandProcessing_0
        DEC     A
        JZ      ??MT_SysCommandProcessing_1
        DEC     A
        JZ      ??MT_SysCommandProcessing_2
        DEC     A
        JZ      ??MT_SysCommandProcessing_3
        DEC     A
        JZ      ??MT_SysCommandProcessing_4
        ADD     A,#-0x3
        JZ      ??MT_SysCommandProcessing_5
        DEC     A
        JZ      ??MT_SysCommandProcessing_6
        DEC     A
        JZ      ??MT_SysCommandProcessing_7
        DEC     A
        JZ      ??MT_SysCommandProcessing_8
        DEC     A
        JZ      ??MT_SysCommandProcessing_9
        DEC     A
        JZ      ??MT_SysCommandProcessing_10
        DEC     A
        JZ      ??MT_SysCommandProcessing_11
        DEC     A
        JZ      ??MT_SysCommandProcessing_12
        DEC     A
        JZ      ??MT_SysCommandProcessing_13
        DEC     A
        JZ      ??MT_SysCommandProcessing_14
        DEC     A
        JZ      ??MT_SysCommandProcessing_15
        DEC     A
        JZ      ??MT_SysCommandProcessing_16
        DEC     A
        JZ      ??MT_SysCommandProcessing_17
        DEC     A
        JZ      ??MT_SysCommandProcessing_18
        ADD     A,#-0x8
        JZ      ??MT_SysCommandProcessing_6
        DEC     A
        JZ      ??MT_SysCommandProcessing_7
        SJMP    ??MT_SysCommandProcessing_19
//  236   {
//  237     case MT_SYS_RESET_REQ:
//  238       MT_SysReset(pBuf);
??MT_SysCommandProcessing_0:
        ; Setup parameters for call to function MT_SysReset
        LCALL   `??MT_SysReset::?relay`; Banked call to: MT_SysReset
//  239       break;
        SJMP    ??MT_SysCommandProcessing_20
//  240 
//  241     case MT_SYS_PING:
//  242       MT_SysPing();
??MT_SysCommandProcessing_1:
        ; Setup parameters for call to function MT_SysPing
        LCALL   `??MT_SysPing::?relay`; Banked call to: MT_SysPing
//  243       break;
        SJMP    ??MT_SysCommandProcessing_20
//  244 
//  245     case MT_SYS_VERSION:
//  246       MT_SysVersion();
??MT_SysCommandProcessing_2:
        ; Setup parameters for call to function MT_SysVersion
        LCALL   `??MT_SysVersion::?relay`; Banked call to: MT_SysVersion
//  247       break;
        SJMP    ??MT_SysCommandProcessing_20
//  248 
//  249     case MT_SYS_SET_EXTADDR:
//  250       MT_SysSetExtAddr(pBuf);
??MT_SysCommandProcessing_3:
        ; Setup parameters for call to function MT_SysSetExtAddr
        LCALL   `??MT_SysSetExtAddr::?relay`; Banked call to: MT_SysSetExtAddr
//  251       break;
        SJMP    ??MT_SysCommandProcessing_20
//  252 
//  253     case MT_SYS_GET_EXTADDR:
//  254       MT_SysGetExtAddr();
??MT_SysCommandProcessing_4:
        ; Setup parameters for call to function MT_SysGetExtAddr
        LCALL   `??MT_SysGetExtAddr::?relay`; Banked call to: MT_SysGetExtAddr
//  255       break;
        SJMP    ??MT_SysCommandProcessing_20
//  256 
//  257 // CC253X MAC Network Processor does not have NV support
//  258 #if !defined(CC253X_MACNP)
//  259     case MT_SYS_OSAL_NV_DELETE:
//  260       MT_SysOsalNVDelete(pBuf);
??MT_SysCommandProcessing_16:
        ; Setup parameters for call to function MT_SysOsalNVDelete
        LCALL   `??MT_SysOsalNVDelete::?relay`; Banked call to: MT_SysOsalNVDelete
//  261       break;
        SJMP    ??MT_SysCommandProcessing_20
//  262 
//  263     case MT_SYS_OSAL_NV_ITEM_INIT:
//  264       MT_SysOsalNVItemInit(pBuf);
??MT_SysCommandProcessing_5:
        ; Setup parameters for call to function MT_SysOsalNVItemInit
        LCALL   `??MT_SysOsalNVItemInit::?relay`; Banked call to: MT_SysOsalNVItemInit
//  265       break;
        SJMP    ??MT_SysCommandProcessing_20
//  266 
//  267     case MT_SYS_OSAL_NV_LENGTH:
//  268       MT_SysOsalNVLength(pBuf);
??MT_SysCommandProcessing_17:
        ; Setup parameters for call to function MT_SysOsalNVLength
        LCALL   `??MT_SysOsalNVLength::?relay`; Banked call to: MT_SysOsalNVLength
//  269       break;
        SJMP    ??MT_SysCommandProcessing_20
//  270 
//  271     case MT_SYS_OSAL_NV_READ:
//  272       MT_SysOsalNVRead(pBuf);
//  273       break;
//  274 
//  275     case MT_SYS_OSAL_NV_WRITE:
//  276       MT_SysOsalNVWrite(pBuf);
//  277       break;
//  278 
//  279     case MT_SYS_OSAL_NV_READ_EXT:
//  280       MT_SysOsalNVRead(pBuf);
??MT_SysCommandProcessing_6:
        ; Setup parameters for call to function MT_SysOsalNVRead
        LCALL   `??MT_SysOsalNVRead::?relay`; Banked call to: MT_SysOsalNVRead
//  281       break;
        SJMP    ??MT_SysCommandProcessing_20
//  282       
//  283     case MT_SYS_OSAL_NV_WRITE_EXT:
//  284       MT_SysOsalNVWrite(pBuf);
??MT_SysCommandProcessing_7:
        ; Setup parameters for call to function MT_SysOsalNVWrite
        LCALL   `??MT_SysOsalNVWrite::?relay`; Banked call to: MT_SysOsalNVWrite
//  285       break;
        SJMP    ??MT_SysCommandProcessing_20
//  286 #endif
//  287 
//  288     case MT_SYS_OSAL_START_TIMER:
//  289       MT_SysOsalStartTimer(pBuf);
??MT_SysCommandProcessing_8:
        ; Setup parameters for call to function MT_SysOsalStartTimer
        LCALL   `??MT_SysOsalStartTimer::?relay`; Banked call to: MT_SysOsalStartTimer
//  290       break;
        SJMP    ??MT_SysCommandProcessing_20
//  291 
//  292     case MT_SYS_OSAL_STOP_TIMER:
//  293       MT_SysOsalStopTimer(pBuf);
??MT_SysCommandProcessing_9:
        ; Setup parameters for call to function MT_SysOsalStopTimer
        LCALL   `??MT_SysOsalStopTimer::?relay`; Banked call to: MT_SysOsalStopTimer
//  294       break;
        SJMP    ??MT_SysCommandProcessing_20
//  295 
//  296     case MT_SYS_RANDOM:
//  297       MT_SysRandom();
??MT_SysCommandProcessing_10:
        ; Setup parameters for call to function MT_SysRandom
        LCALL   `??MT_SysRandom::?relay`; Banked call to: MT_SysRandom
//  298       break;
        SJMP    ??MT_SysCommandProcessing_20
//  299 
//  300     case MT_SYS_ADC_READ:
//  301       MT_SysAdcRead(pBuf);
??MT_SysCommandProcessing_11:
        ; Setup parameters for call to function MT_SysAdcRead
        LCALL   `??MT_SysAdcRead::?relay`; Banked call to: MT_SysAdcRead
//  302       break;
        SJMP    ??MT_SysCommandProcessing_20
//  303 
//  304     case MT_SYS_GPIO:
//  305       MT_SysGpio(pBuf);
??MT_SysCommandProcessing_12:
        ; Setup parameters for call to function MT_SysGpio
        LCALL   `??MT_SysGpio::?relay`; Banked call to: MT_SysGpio
//  306       break;
        SJMP    ??MT_SysCommandProcessing_20
//  307 
//  308     case MT_SYS_STACK_TUNE:
//  309       MT_SysStackTune(pBuf);
??MT_SysCommandProcessing_13:
        ; Setup parameters for call to function MT_SysStackTune
        LCALL   `??MT_SysStackTune::?relay`; Banked call to: MT_SysStackTune
//  310       break;
        SJMP    ??MT_SysCommandProcessing_20
//  311 
//  312     case MT_SYS_SET_TIME:
//  313       MT_SysSetUtcTime(pBuf);
??MT_SysCommandProcessing_14:
        ; Setup parameters for call to function MT_SysSetUtcTime
        LCALL   `??MT_SysSetUtcTime::?relay`; Banked call to: MT_SysSetUtcTime
//  314       break;
        SJMP    ??MT_SysCommandProcessing_20
//  315 
//  316     case MT_SYS_GET_TIME:
//  317       MT_SysGetUtcTime();
??MT_SysCommandProcessing_15:
        ; Setup parameters for call to function MT_SysGetUtcTime
        LCALL   `??MT_SysGetUtcTime::?relay`; Banked call to: MT_SysGetUtcTime
//  318       break;
        SJMP    ??MT_SysCommandProcessing_20
//  319 
//  320     case MT_SYS_SET_TX_POWER:
//  321       MT_SysSetTxPower(pBuf);
??MT_SysCommandProcessing_18:
        ; Setup parameters for call to function MT_SysSetTxPower
        LCALL   `??MT_SysSetTxPower::?relay`; Banked call to: MT_SysSetTxPower
//  322       break;
        SJMP    ??MT_SysCommandProcessing_20
//  323       
//  324 #if defined ( MT_SYS_JAMMER_FEATURE )
//  325     case MT_SYS_JAMMER_PARAMETERS:
//  326       MT_SysJammerParameters( pBuf );
//  327       break;
//  328 #endif      
//  329 
//  330 #if defined ( MT_SYS_SNIFFER_FEATURE )
//  331     case MT_SYS_SNIFFER_PARAMETERS:
//  332       MT_SysSnifferParameters( pBuf );
//  333       break;
//  334 #endif      
//  335 
//  336 #if defined ( FEATURE_SYSTEM_STATS )
//  337     case MT_SYS_ZDIAGS_INIT_STATS:
//  338       MT_SysZDiagsInitStats();
//  339       break;
//  340 
//  341     case MT_SYS_ZDIAGS_CLEAR_STATS:
//  342       MT_SysZDiagsClearStats(pBuf);
//  343       break;
//  344 
//  345     case MT_SYS_ZDIAGS_GET_STATS:
//  346       MT_SysZDiagsGetStatsAttr(pBuf);
//  347        break;
//  348 
//  349     case MT_SYS_ZDIAGS_RESTORE_STATS_NV:
//  350       MT_SysZDiagsRestoreStatsFromNV();
//  351       break;
//  352 
//  353     case MT_SYS_ZDIAGS_SAVE_STATS_TO_NV:
//  354       MT_SysZDiagsSaveStatsToNV();
//  355       break;
//  356 #endif /* FEATURE_SYSTEM_STATS */
//  357 
//  358     default:
//  359       status = MT_RPC_ERR_COMMAND_ID;
??MT_SysCommandProcessing_19:
        MOV     R6,#0x2
//  360       break;
//  361   }
//  362 
//  363   return status;
??MT_SysCommandProcessing_20:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine23_0 & 0xFFFF
//  364 }
          CFI EndBlock cfiBlock0
//  365 
//  366 /**************************************************************************************************
//  367  * @fn      MT_SysReset
//  368  *
//  369  * @brief   Reset the device.
//  370  * @param   typID: 0=reset, 1=serial bootloader, 
//  371  *
//  372  * @return  None
//  373  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  374 void MT_SysReset( uint8 *pBuf )
MT_SysReset:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MT_SysReset
        CODE
//  375 {
        FUNCALL MT_SysReset, Onboard_soft_reset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  376   switch( pBuf[MT_RPC_POS_DAT0] )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??MT_SysReset_0
        DEC     A
        JZ      ??MT_SysReset_1
        SJMP    ??MT_SysReset_2
//  377   {
//  378     case MT_SYS_RESET_HARD:
//  379       SystemReset();
??MT_SysReset_0:
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??MT_SysReset_3:
        SJMP    ??MT_SysReset_3
//  380       break;
//  381       
//  382     case MT_SYS_RESET_SOFT:
//  383 #if !(defined(HAL_BOARD_F2618) || defined(HAL_BOARD_F5438) || defined(HAL_BOARD_LM3S))
//  384       SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
??MT_SysReset_1:
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  385 #endif
//  386       break;
//  387       
//  388     case MT_SYS_RESET_SHUTDOWN:
//  389       {
//  390         // Disable interrupts and put into deep sleep, use hardware reset to wakeup
//  391         powerOffSoc();
//  392       }
//  393       break;
//  394   }
//  395 }
??MT_SysReset_2:
        LJMP    ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock1
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  396 
//  397 /***************************************************************************************************
//  398  * @fn      MT_SysPing
//  399  *
//  400  * @brief   Process the Ping command
//  401  *
//  402  * @param   None
//  403  *
//  404  * @return  None
//  405  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  406 void MT_SysPing(void)
MT_SysPing:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function MT_SysPing
        CODE
//  407 {
        FUNCALL MT_SysPing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  408   uint16 tmp16;
//  409   uint8 retArray[2];
//  410 
//  411   /* Build Capabilities */
//  412   tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO |
//  413           MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_GP | MT_CAP_ZOAD;
//  414 
//  415   /* Convert to high byte first into temp buffer */
//  416   retArray[0] = LO_UINT16( tmp16 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x11
        MOVX    @DPTR,A
//  417   retArray[1] = HI_UINT16( tmp16 );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ??Subroutine25_0 & 0xFFFF
//  418 
//  419   /* Build and send back the response */
//  420   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
//  421                                 sizeof (tmp16), retArray );
??CrossCallReturnLabel_32:
        MOV     R2,#0x1
        LJMP    ?Subroutine1 & 0xFFFF
//  422 }
          CFI EndBlock cfiBlock2
//  423 
//  424 /***************************************************************************************************
//  425  * @fn      MT_SysVersion
//  426  *
//  427  * @brief   Process the Version command
//  428  *
//  429  * @param   None
//  430  *
//  431  * @return  None
//  432  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  433 void MT_SysVersion(void)
MT_SysVersion:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function MT_SysVersion
        CODE
//  434 {
        FUNCALL MT_SysVersion, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  435 #if !defined INCLUDE_REVISION_INFORMATION
//  436   /* Build and send back the response */
//  437   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
//  438                                sizeof(MTVersionString), (uint8 *)MTVersionString);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,#MTVersionString & 0xff
        MOV     R5,#(MTVersionString >> 8) & 0xff
        MOV     R3,#0x5
        MOV     R2,#0x2
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  439 
//  440 #else
//  441   uint8 verStr[sizeof(MTVersionString) + 4];
//  442   uint8 *pBuf = &verStr[sizeof(MTVersionString)];
//  443   
//  444 #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
//  445   uint32 sblSig;
//  446   uint32 sblRev;
//  447 #endif
//  448 
//  449   osal_memcpy(verStr, (uint8 *)MTVersionString, sizeof(MTVersionString));
//  450 
//  451 #if (defined MAKE_CRC_SHDW) || (defined FAKE_CRC_SHDW)  //built for bootloader
//  452   HalFlashRead(SBL_SIG_ADDR / HAL_FLASH_PAGE_SIZE,
//  453                SBL_SIG_ADDR % HAL_FLASH_PAGE_SIZE,
//  454                (uint8 *)&sblSig, sizeof(sblSig));
//  455 
//  456   if (sblSig == SBL_SIGNATURE)
//  457   {
//  458     // SBL is supported and its revision is provided (in a known flash location)
//  459     HalFlashRead(SBL_REV_ADDR / HAL_FLASH_PAGE_SIZE,
//  460                  SBL_REV_ADDR % HAL_FLASH_PAGE_SIZE,
//  461                  (uint8 *)&sblRev, sizeof(sblRev));
//  462   }
//  463   else
//  464   {
//  465     //  SBL is supported but its revision is not provided
//  466     sblRev = 0x00000000;
//  467   }
//  468 #else
//  469   // SBL is NOT supported
//  470   sblRev = 0xFFFFFFFF;
//  471 #endif
//  472 
//  473   // Plug the SBL revision indication
//  474   UINT32_TO_BUF_LITTLE_ENDIAN(pBuf,sblRev);
//  475 
//  476   /* Build and send back the response */
//  477   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
//  478                                sizeof(verStr), verStr);
//  479 
//  480 #endif
//  481 }
        LJMP    ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock3
//  482 
//  483 /***************************************************************************************************
//  484  * @fn      MT_SysSetExtAddr
//  485  *
//  486  * @brief   Set the Extended Address
//  487  *
//  488  * @param   pBuf
//  489  *
//  490  * @return  None
//  491  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  492 void MT_SysSetExtAddr(uint8 *pBuf)
MT_SysSetExtAddr:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function MT_SysSetExtAddr
        CODE
//  493 {
        FUNCALL MT_SysSetExtAddr, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetExtAddr, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetExtAddr, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V1,R3
//  494   uint8 retValue = ZFailure;
        LCALL   ?Subroutine14 & 0xFFFF
//  495   uint8 cmdId;
//  496 
//  497   /* parse header */
//  498   cmdId = pBuf[MT_RPC_POS_CMD1];
//  499   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_14:
        MOV     ?V0,A
        JNC     ??MT_SysSetExtAddr_0
        INC     ?V1
//  500 
//  501   if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
??MT_SysSetExtAddr_0:
        ; Setup parameters for call to function ZMacSetReq
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,?V1
        MOV     R1,#-0x1e
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV     A,R1
        JNZ     ??MT_SysSetExtAddr_1
//  502   {
//  503 // CC253X MAC Network Processor does not have NV support
//  504 #if !defined(CC253X_MACNP)
//  505     retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0,#0x8
        MOV     ?V1,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  506 #endif
//  507   }
//  508 
//  509   /* Build and send back the response */
//  510   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
??MT_SysSetExtAddr_1:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  511 
//  512 }
        MOV     A,#0x1
        LJMP    ??Subroutine24_0 & 0xFFFF
          CFI EndBlock cfiBlock4
//  513 
//  514 /***************************************************************************************************
//  515  * @fn      MT_SysGetExtAddr
//  516  *
//  517  * @brief   Get the Extended Address
//  518  *
//  519  * @param   None
//  520  *
//  521  * @return  None
//  522  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  523 void MT_SysGetExtAddr(void)
MT_SysGetExtAddr:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function MT_SysGetExtAddr
        CODE
//  524 {
        FUNCALL MT_SysGetExtAddr, ZMacGetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetExtAddr, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 8)
//  525   uint8 extAddr[Z_EXTADDR_LEN];
//  526 
//  527   ZMacGetReq( ZMacExtAddr, extAddr );
        ; Setup parameters for call to function ZMacGetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#-0x1e
        LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
//  528 
//  529   /* Build and send back the response */
//  530   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
//  531                                Z_EXTADDR_LEN, extAddr);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x8
        MOV     R2,#0x4
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  532 }
        MOV     A,#0x8
        LJMP    ??Subroutine26_0 & 0xFFFF
          CFI EndBlock cfiBlock5
//  533 
//  534 #if !defined(CC253X_MACNP)
//  535 /***************************************************************************************************
//  536  * @fn      MT_SysOsalNVRead
//  537  *
//  538  * @brief   Attempt to read an NV value
//  539  *
//  540  * @param   pBuf - pointer to the data
//  541  *
//  542  * @return  None
//  543  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  544 void MT_SysOsalNVRead(uint8 *pBuf)
MT_SysOsalNVRead:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
        CODE
//  545 {
        FUNCALL MT_SysOsalNVRead, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        REQUIRE ?V10
        REQUIRE ?V11
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  546   uint8 cmdId;
//  547   uint16 nvId;
//  548   uint16 dataLen;
//  549   uint16 dataOfs;
//  550   uint16 nvItemLen;
//  551   uint8 error = ZSuccess;
        MOV     ?V2,#0x0
//  552 
//  553   /* MT command ID */
//  554   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V3,A
//  555   /* Skip over RPC header */
//  556   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        JNC     ??MT_SysOsalNVRead_0
        INC     R7
//  557 
//  558   /* NV item ID */
//  559   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_SysOsalNVRead_0:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine5 & 0xFFFF
//  560   /* Length of entire NV item data */
//  561   nvItemLen = osal_nv_item_len(nvId);
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R3,A
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     R4,?V4
        MOV     R5,?V5
//  562 
//  563 #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
//  564   if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
//  565       (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
//  566       (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
        MOV     A,#0x69
        XRL     A,?V0
        JNZ     ??MT_SysOsalNVRead_1
        MOV     A,?V1
??MT_SysOsalNVRead_1:
        JZ      ??MT_SysOsalNVRead_2
        MOV     A,#0x6b
        XRL     A,?V0
        JNZ     ??MT_SysOsalNVRead_3
        MOV     A,?V1
??MT_SysOsalNVRead_3:
        JZ      ??MT_SysOsalNVRead_2
        MOV     A,#0x6a
        XRL     A,?V0
        ORL     A,?V1
        JNZ     ??MT_SysOsalNVRead_4
//  567   {
//  568     /* Access to Security Certificate Data is denied */
//  569     error = ZInvalidParameter;
??MT_SysOsalNVRead_2:
        MOV     ?V2,#0x2
//  570   }
//  571 #endif
//  572 
//  573 #if !MT_SYS_KEY_MANAGEMENT
//  574   if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
//  575        (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
//  576       ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
//  577       ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
//  578        (nvId == ZCD_NV_PRECFGKEY) )
??MT_SysOsalNVRead_4:
        MOV     A,#0x3a
        XRL     A,?V0
        JNZ     ??MT_SysOsalNVRead_5
        MOV     A,?V1
??MT_SysOsalNVRead_5:
        JZ      ??MT_SysOsalNVRead_6
        MOV     A,#0x3b
        XRL     A,?V0
        JNZ     ??MT_SysOsalNVRead_7
        MOV     A,?V1
??MT_SysOsalNVRead_7:
        JZ      ??MT_SysOsalNVRead_6
        MOV     A,?V0
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,?V1
        ADDC    A,#-0x2
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??MT_SysOsalNVRead_6
        DEC     R1
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??MT_SysOsalNVRead_6
        MOV     A,#0x62
        XRL     A,?V0
        ORL     A,?V1
        JNZ     ??MT_SysOsalNVRead_8
//  579   {
//  580     /* Access to Security Key Data is denied */
//  581     error = ZInvalidParameter;
??MT_SysOsalNVRead_6:
        MOV     ?V2,#0x2
//  582   }
//  583 #endif //!MT_SYS_KEY_MANAGEMENT
//  584   
//  585   /* Get NV data offset */
//  586   if (cmdId == MT_SYS_OSAL_NV_READ)
??MT_SysOsalNVRead_8:
        MOV     A,#0x8
        XRL     A,?V3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        JNZ     ??MT_SysOsalNVRead_9
//  587   {
//  588     /* MT_SYS_OSAL_NV_READ has 1-byte offset */
//  589     dataOfs = (uint16)pBuf[2];
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
        SJMP    ??CrossCallReturnLabel_6
//  590   }
//  591   else
//  592   {
//  593     /* MT_SYS_OSAL_NV_READ_EXT has 2-byte offset */
//  594     dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
??MT_SysOsalNVRead_9:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine7 & 0xFFFF
//  595   }
//  596   if (nvItemLen <= dataOfs)
??CrossCallReturnLabel_6:
        CLR     C
        MOV     A,R6
        SUBB    A,R4
        MOV     A,R7
        SUBB    A,R5
        JC      ??MT_SysOsalNVRead_10
//  597   {
//  598     /* Offset is past end of data */
//  599     error = ZInvalidParameter;
        MOV     ?V2,#0x2
        LJMP    ??MT_SysOsalNVRead_11 & 0xFFFF
//  600   }
//  601 
//  602   if (error == ZSuccess)
??MT_SysOsalNVRead_10:
        MOV     A,?V2
        JZ      $+5
        LJMP    ??MT_SysOsalNVRead_12 & 0xFFFF
//  603   {
//  604     uint8 *pRetBuf;
//  605     uint8 respLen = 2;  /* Response header: [0]=status,[1]=length */
//  606 
//  607     dataLen = nvItemLen - dataOfs;
        MOV     A,R4
        CLR     C
        SUBB    A,R6
        MOV     ?V8,A
        MOV     A,R5
        SUBB    A,R7
        MOV     ?V9,A
//  608     if (dataLen > (uint16)(MT_MAX_RSP_DATA_LEN - respLen))
        CLR     C
        MOV     A,?V8
        SUBB    A,#0x79
        MOV     A,?V9
        SUBB    A,#0x0
        JC      ??MT_SysOsalNVRead_13
//  609     {
//  610       /* Data length is limited by TX buffer size and MT protocol */
//  611       dataLen = (MT_MAX_RSP_DATA_LEN - respLen);
        MOV     ?V8,#0x78
        MOV     ?V9,#0x0
//  612     }
//  613     respLen += dataLen;
??MT_SysOsalNVRead_13:
        MOV     A,?V8
        ADD     A,#0x2
        MOV     ?V4,A
//  614 
//  615     pRetBuf = osal_mem_alloc(respLen);
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V6,R2
        MOV     ?V7,R3
//  616     if (pRetBuf != NULL)
        MOV     A,R2
        ORL     A,?V7
        JNZ     $+5
        LJMP    ??MT_SysOsalNVRead_14 & 0xFFFF
//  617     {
//  618       osal_memset(&pRetBuf[2], 0, dataLen);
        MOV     A,R2
        ADD     A,#0x2
        MOV     ?V10,A
        CLR     A
        ADDC    A,?V7
        MOV     ?V11,A
        ; Setup parameters for call to function osal_memset
        MOV     R4,?V8
        MOV     R5,?V9
        MOV     R1,#0x0
        INC     R2
        INC     R2
        MOV     R3,A
        LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
//  619       if (((osal_nv_read( nvId, dataOfs, dataLen, &pRetBuf[2])) == ZSUCCESS))
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        JNZ     ??MT_SysOsalNVRead_15
//  620       {
//  621         pRetBuf[0] = ZSuccess;
        MOV     DPL,?V6
        MOV     DPH,?V7
        CLR     A
        MOVX    @DPTR,A
//  622         pRetBuf[1] = dataLen;
        INC     DPTR
        MOV     A,?V8
        MOVX    @DPTR,A
//  623         MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  624                                        cmdId, respLen, pRetBuf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     R3,?V4
        MOV     R2,?V3
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        SJMP    ??MT_SysOsalNVRead_16
//  625       }
//  626       else
//  627       {
//  628         error = NV_OPER_FAILED;
??MT_SysOsalNVRead_15:
        MOV     ?V2,#0xa
//  629       }
//  630       osal_mem_free(pRetBuf);
??MT_SysOsalNVRead_16:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V6
        MOV     R3,?V7
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
//  631     }
//  632     else
//  633     {
//  634       /* Could not get buffer for NV data */
//  635       error = ZMemError;
//  636     }
//  637   }
//  638   
//  639   if (error != ZSuccess)
??MT_SysOsalNVRead_12:
        MOV     A,?V2
        JZ      ??MT_SysOsalNVRead_17
//  640   {
//  641     uint8 tmp[2] = { error, 0 };
??MT_SysOsalNVRead_11:
        MOV     DPTR,#`?<Constant {0, 0}>`
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     A,#0x2
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V2
        LCALL   ??Subroutine25_0 & 0xFFFF
//  642     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  643                                    cmdId, 2, tmp);
//  644   }
??CrossCallReturnLabel_33:
        MOV     R2,?V3
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  645 }
??MT_SysOsalNVRead_17:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_XSP16 add(XSP16, 22)
??MT_SysOsalNVRead_14:
        MOV     ?V2,#0x10
        SJMP    ??MT_SysOsalNVRead_11
          CFI EndBlock cfiBlock6

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {0, 0}>`:
        DATA8
        DB 0
        DB 0
//  646 
//  647 /***************************************************************************************************
//  648  * @fn      MT_SysOsalNVWrite
//  649  *
//  650  * @brief   Attempt to write an NV item
//  651  *
//  652  * @param   pBuf - pointer to the data
//  653  *
//  654  * @return  None
//  655  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  656 void MT_SysOsalNVWrite(uint8 *pBuf)
MT_SysOsalNVWrite:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function MT_SysOsalNVWrite
        CODE
//  657 {
        FUNCALL MT_SysOsalNVWrite, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, zgSetItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        REQUIRE ?V8
        REQUIRE ?V9
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V5,R3
//  658   uint8 cmdId;
//  659   uint16 nvId;
//  660   uint16 dataLen;
//  661   uint16 dataOfs;
//  662   uint16 nvItemLen;
//  663   uint8 rtrn = ZSuccess;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        LCALL   ?Subroutine19 & 0xFFFF
//  664 
//  665   /* MT command ID */
//  666   cmdId = pBuf[MT_RPC_POS_CMD1];
??CrossCallReturnLabel_25:
        MOV     ?V2,A
//  667   /* Skip over RPC header */
//  668   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V4,A
        JNC     ??MT_SysOsalNVWrite_0
        INC     ?V5
//  669 
//  670   /* NV item ID */
//  671   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_SysOsalNVWrite_0:
        MOV     DPL,A
        MOV     DPH,?V5
        LCALL   ?Subroutine5 & 0xFFFF
//  672   
//  673   /* Get NV data offset & length */
//  674   if ( cmdId == MT_SYS_OSAL_NV_WRITE )
??CrossCallReturnLabel_3:
        MOV     A,#0x9
        XRL     A,?V2
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        JNZ     ??MT_SysOsalNVWrite_1
//  675   {
//  676     /* MT_SYS_OSAL_NV_WRITE has 1-byte offset & length */
//  677     dataOfs = (uint16)pBuf[2];
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     R7,#0x0
//  678     dataLen = (uint16)pBuf[3];
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V6,A
        MOV     ?V7,R0
//  679     pBuf += 4;
        MOV     A,?V4
        ADD     A,#0x4
        SJMP    ??MT_SysOsalNVWrite_2
//  680   }
//  681   else
//  682   {
//  683     /* MT_SYS_OSAL_NV_WRITE_EXT has 2-byte offset & length */
//  684     dataOfs = BUILD_UINT16(pBuf[2], pBuf[3]);
??MT_SysOsalNVWrite_1:
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
//  685     dataLen = BUILD_UINT16(pBuf[4], pBuf[5]);
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     ?V6,A
        CLR     A
        ADDC    A,R1
        MOV     ?V7,A
//  686     pBuf += 6;
        MOV     A,?V4
        ADD     A,#0x6
??MT_SysOsalNVWrite_2:
        MOV     ?V4,A
        JNC     ??MT_SysOsalNVWrite_3
        INC     ?V5
//  687   }
//  688 
//  689   /* Length of entire NV item data */
//  690   nvItemLen = osal_nv_item_len(nvId);
//  691   if ((dataOfs + dataLen) <= nvItemLen)
??MT_SysOsalNVWrite_3:
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
        MOV     A,R6
        ADD     A,?V6
        MOV     R0,A
        MOV     A,R7
        ADDC    A,?V7
        MOV     R1,A
        CLR     C
        MOV     A,R2
        SUBB    A,R0
        MOV     A,R3
        SUBB    A,R1
        JC      ??MT_SysOsalNVWrite_4
//  692   {
//  693     if (dataOfs == 0)
        MOV     A,R6
        ORL     A,R7
        JNZ     ??MT_SysOsalNVWrite_5
//  694     {
//  695       /* Set the Z-Globals value of this NV item */
//  696       zgSetItem( nvId, dataLen, pBuf );
        ; Setup parameters for call to function zgSetItem
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,?V6
        MOV     R5,?V7
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??zgSetItem::?relay`; Banked call to: zgSetItem
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  697     }
//  698     
//  699     if ((osal_nv_write(nvId, dataOfs, dataLen, pBuf)) == ZSUCCESS)
??MT_SysOsalNVWrite_5:
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R1
        JNZ     ??MT_SysOsalNVWrite_6
//  700     {
//  701       if (nvId == ZCD_NV_EXTADDR)
        MOV     A,#0x1
        XRL     A,?V0
        ORL     A,?V1
        JNZ     ??MT_SysOsalNVWrite_7
//  702       {
//  703         rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R1,#-0x1e
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysOsalNVWrite_8
//  704       }
//  705     }
//  706     else
//  707     {
//  708       rtrn = NV_OPER_FAILED;
??MT_SysOsalNVWrite_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0xa
        SJMP    ??MT_SysOsalNVWrite_8
//  709     }
//  710   }
//  711   else
//  712   {
//  713     /* Bad length or/and offset */
//  714     rtrn = ZInvalidParameter;
??MT_SysOsalNVWrite_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
??MT_SysOsalNVWrite_8:
        MOVX    @DPTR,A
//  715   }
//  716 
//  717   /* Build and send back the response */
//  718   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  719                                  cmdId, 1, &rtrn);
??MT_SysOsalNVWrite_7:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     R2,?V2
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  720 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function MT_SysOsalNVWrite
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function MT_SysOsalNVWrite
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+-2
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V4
        MOV     DPH,?V5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond8) CFA_SP SP+0
          CFI (cfiCond9) CFA_SP SP+0
          CFI (cfiPicker10) CFA_SP SP+0
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function MT_SysOsalNVWrite
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+-2
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     ?V0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
        RET
          CFI (cfiCond11) CFA_SP SP+0
          CFI (cfiCond12) CFA_SP SP+0
          CFI (cfiPicker13) CFA_SP SP+0
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
//  721 
//  722 /***************************************************************************************************
//  723  * @fn      MT_SysOsalNVItemInit
//  724  *
//  725  * @brief   Attempt to create an NV item
//  726  *
//  727  * @param   pBuf - pointer to the data
//  728  *
//  729  * @return  None
//  730  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  731 void MT_SysOsalNVItemInit(uint8 *pBuf)
MT_SysOsalNVItemInit:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function MT_SysOsalNVItemInit
        CODE
//  732 {
        FUNCALL MT_SysOsalNVItemInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V1,R3
//  733   uint8 ret;
//  734   uint8 idLen;
//  735   uint16 nvId;
//  736   uint16 nvLen;
//  737 
//  738   /* Skip over RPC header */
//  739   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0,A
        JNC     ??MT_SysOsalNVItemInit_0
        INC     ?V1
//  740 
//  741   /* NV item ID */
//  742   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
??MT_SysOsalNVItemInit_0:
        MOV     DPL,A
        MOV     DPH,?V1
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ?Subroutine7 & 0xFFFF
//  743   /* NV item length */
//  744   nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
??CrossCallReturnLabel_7:
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
//  745   /* Initialization data length */
//  746   idLen = pBuf[4];
        MOV     DPL,?V0
        MOV     DPH,?V1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V2,A
//  747   pBuf += 5;
        MOV     A,?V0
        ADD     A,#0x5
        MOV     ?V0,A
        JNC     ??MT_SysOsalNVItemInit_1
        INC     ?V1
//  748 
//  749   if ( idLen < nvLen )
??MT_SysOsalNVItemInit_1:
        CLR     C
        MOV     A,?V2
        SUBB    A,R4
        CLR     A
        SUBB    A,R5
        JNC     ??MT_SysOsalNVItemInit_2
//  750   {
//  751     /* Attempt to create a new NV item */
//  752     ret = osal_nv_item_init( nvId, nvLen, NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V4,A
        MOV     ?V5,A
        MOV     R0,#?V4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  753     if ( (ret == NV_ITEM_UNINIT) && (idLen > 0) )
        XRL     A,#0x9
        JNZ     ??MT_SysOsalNVItemInit_3
        MOV     A,?V2
        JZ      ??MT_SysOsalNVItemInit_3
//  754     {
//  755       /* Write initialization data to first part of new item */
//  756       (void) osal_nv_write( nvId, 0, (uint16)idLen, pBuf );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V3,#0x0
        MOV     R0,#?V2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        SJMP    ??MT_SysOsalNVItemInit_3
//  757     }
//  758   }
//  759   else
//  760   {
//  761     /* Attempt to create/initialize a new NV item */
//  762     ret = osal_nv_item_init( nvId, nvLen, pBuf );
??MT_SysOsalNVItemInit_2:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  763   }
//  764 
//  765   /* Build and send back the response */
//  766   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  767                                  MT_SYS_OSAL_NV_ITEM_INIT, 1, &ret);
??MT_SysOsalNVItemInit_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     R2,#0x7
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  768 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function MT_SysOsalNVItemInit
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+-2
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
        RET
          CFI (cfiCond15) CFA_SP SP+0
          CFI (cfiCond16) CFA_SP SP+0
          CFI (cfiPicker17) CFA_SP SP+0
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
//  769 
//  770 /***************************************************************************************************
//  771  * @fn      MT_SysOsalNVDelete
//  772  *
//  773  * @brief   Attempt to delete an NV item
//  774  *
//  775  * @param   pBuf - pointer to the data
//  776  *
//  777  * @return  None
//  778  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  779 void MT_SysOsalNVDelete(uint8 *pBuf)
MT_SysOsalNVDelete:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function MT_SysOsalNVDelete
        CODE
//  780 {
        FUNCALL MT_SysOsalNVDelete, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVDelete, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  781   uint16 nvId;
//  782   uint16 nvLen;
//  783   uint8 ret;
//  784 
//  785   /* Skip over RPC header */
//  786   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        JNC     ??MT_SysOsalNVDelete_0
        INC     R3
//  787 
//  788   /* Get the ID */
//  789   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  790   /* Get the length */
//  791   nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
//  792 
//  793   /* Attempt to delete the NV item */
//  794   ret = osal_nv_delete( nvId, nvLen );
??MT_SysOsalNVDelete_0:
        ; Setup parameters for call to function osal_nv_delete
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_28:
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_nv_delete::?relay`; Banked call to: osal_nv_delete
        LCALL   ?Subroutine13 & 0xFFFF
//  795 
//  796   /* Build and send back the response */
//  797   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  798                                  MT_SYS_OSAL_NV_DELETE, 1, &ret);
??CrossCallReturnLabel_35:
        MOV     R2,#0x12
        SJMP    ??Subroutine21_0
//  799 }
          CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function MT_SysOsalNVDelete
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function MT_SysOsalStartTimer
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+-2
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker21 Using cfiCommon1
          CFI (cfiPicker21) NoFunction
          CFI (cfiPicker21) Picker
        INC     DPTR
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiPicker21
        REQUIRE ??Subroutine20_0
        ; // Fall through to label ??Subroutine20_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine20_0:
          CFI Block cfiCond22 Using cfiCommon0
          CFI Function MT_SysOsalNVLength
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function MT_SysOsalNVDelete
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+-2
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function MT_SysOsalStartTimer
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+-2
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R4
        ADD     A,R0
        RET
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond23) CFA_SP SP+0
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiPicker25) CFA_SP SP+0
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
          CFI EndBlock cfiBlock26
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x61
          CFI EndBlock cfiBlock27
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
          CFI EndBlock cfiBlock28
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock29
//  800 
//  801 /***************************************************************************************************
//  802  * @fn      MT_SysOsalNVLength
//  803  *
//  804  * @brief   Attempt to get the length to an NV item
//  805  *
//  806  * @param   pBuf - pointer to the data
//  807  *
//  808  * @return  None
//  809  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  810 void MT_SysOsalNVLength(uint8 *pBuf)
MT_SysOsalNVLength:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function MT_SysOsalNVLength
        CODE
//  811 {
        FUNCALL MT_SysOsalNVLength, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVLength, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  812   uint16 nvId;
//  813   uint16 nvLen;
//  814   uint8 rsp[2];
//  815 
//  816   /* Skip over RPC header */
//  817   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        JNC     ??MT_SysOsalNVLength_0
        INC     R3
//  818 
//  819   /* Get the ID */
//  820   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  821 
//  822   /* Attempt to get NV item length */
//  823   nvLen = osal_nv_item_len( nvId );
??MT_SysOsalNVLength_0:
        ; Setup parameters for call to function osal_nv_item_len
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        LCALL   ??Subroutine20_0 & 0xFFFF
??CrossCallReturnLabel_27:
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   `??osal_nv_item_len::?relay`; Banked call to: osal_nv_item_len
//  824   rsp[0] = LO_UINT16( nvLen );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
//  825   rsp[1] = HI_UINT16( nvLen );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  826 
//  827   /* Build and send back the response */
//  828   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  829                                  MT_SYS_OSAL_NV_LENGTH, 2, rsp);
??CrossCallReturnLabel_30:
        MOV     R2,#0x13
        LJMP    ?Subroutine2 & 0xFFFF
//  830 }
          CFI EndBlock cfiBlock30
//  831 #endif // !defined(CC253X_MACNP)
//  832 
//  833 /***************************************************************************************************
//  834  * @fn      MT_SysOsalStartTimer
//  835  *
//  836  * @brief
//  837  *
//  838  * @param   uint8 pBuf - pointer to the data
//  839  *
//  840  * @return  None
//  841  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  842 void MT_SysOsalStartTimer(uint8 *pBuf)
MT_SysOsalStartTimer:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
        CODE
//  843 {
        FUNCALL MT_SysOsalStartTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalStartTimer, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  844   uint16 eventId;
//  845   uint8 retValue = ZFailure;
        LCALL   ?Subroutine14 & 0xFFFF
//  846   uint8 cmdId;
//  847 
//  848   /* parse header */
//  849   cmdId = pBuf[MT_RPC_POS_CMD1];
//  850   pBuf += MT_RPC_FRAME_HDR_SZ;
??CrossCallReturnLabel_15:
        MOV     R2,A
        JNC     ??MT_SysOsalStartTimer_0
        INC     R3
//  851 
//  852   if (*pBuf <= 3)
??MT_SysOsalStartTimer_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        JNC     ??MT_SysOsalStartTimer_1
//  853   {
//  854     eventId = (uint16) MT_SysOsalEventId[*pBuf];
//  855     retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
        ; Setup parameters for call to function osal_start_timerEx
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine8 & 0xFFFF
//  856   }
??CrossCallReturnLabel_29:
        MOV     ?V0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V1,A
        CLR     A
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysOsalStartTimer_2
//  857   else
//  858   {
//  859     retValue = ZInvalidParameter;
??MT_SysOsalStartTimer_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
//  860   }
??MT_SysOsalStartTimer_2:
        LCALL   ??Subroutine28_0 & 0xFFFF
//  861 
//  862   /* Build and send back the response */
//  863   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
??CrossCallReturnLabel_37:
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
//  864 }
        MOV     A,#0x1
          CFI EndBlock cfiBlock31
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Valid
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function MT_SysSetExtAddr
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function MT_SysOsalStartTimer
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+-2
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     R6,A
        MOV     A,R2
        ADD     A,#0x3
        RET
          CFI (cfiCond33) CFA_SP SP+0
          CFI (cfiCond34) CFA_SP SP+0
          CFI (cfiPicker35) CFA_SP SP+0
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function MT_SysOsalNVWrite
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_SysSetExtAddr
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_14
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+-4
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function MT_SysOsalStartTimer
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_26, ??CrossCallReturnLabel_15
          CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond38) CFA_SP SP+-4
          CFI (cfiCond38) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker39 Using cfiCommon1
          CFI (cfiPicker39) NoFunction
          CFI (cfiPicker39) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiCond37) CFA_SP SP+-2
          CFI (cfiCond38) CFA_SP SP+-2
          CFI (cfiPicker39) CFA_SP SP+0
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiPicker39
//  865 
//  866 /***************************************************************************************************
//  867  * @fn      MT_SysOsalStopTimer
//  868  *
//  869  * @brief
//  870  *
//  871  * @param   uint8 pBuf - pointer to the data
//  872  *
//  873  * @return  None
//  874  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  875 void MT_SysOsalStopTimer(uint8 *pBuf)
MT_SysOsalStopTimer:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function MT_SysOsalStopTimer
        CODE
//  876 {
        FUNCALL MT_SysOsalStopTimer, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalStopTimer, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  877   uint16 eventId;
//  878   uint8 retValue = ZFailure;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  879   uint8 cmdId;
//  880 
//  881   /* parse header */
//  882   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine9 & 0xFFFF
//  883   pBuf += MT_RPC_FRAME_HDR_SZ;
//  884 
//  885   if (*pBuf <= 3)
??CrossCallReturnLabel_8:
        CLR     C
        SUBB    A,#0x4
        JNC     ??MT_SysOsalStopTimer_0
//  886   {
//  887     eventId = (uint16) MT_SysOsalEventId[*pBuf];
//  888     retValue = osal_stop_timerEx(MT_TaskID, eventId);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
//  889   }
??CrossCallReturnLabel_1:
        LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysOsalStopTimer_1
//  890   else
//  891   {
//  892     retValue = ZInvalidParameter;
??MT_SysOsalStopTimer_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
??MT_SysOsalStopTimer_1:
        MOVX    @DPTR,A
//  893   }
//  894 
//  895   /* Build and send back the response */
//  896   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LJMP    ?Subroutine0 & 0xFFFF
//  897 }
          CFI EndBlock cfiBlock40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function MT_SysOsalStopTimer
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+-2
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        MOVX    A,@DPTR
        ADD     A,0xE0 /* A   */
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#MT_SysOsalEventId & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#MT_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI (cfiCond41) CFA_SP SP+0
          CFI (cfiCond42) CFA_SP SP+0
          CFI (cfiPicker43) CFA_SP SP+0
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43
//  898 
//  899 /***************************************************************************************************
//  900  * @fn      MT_SysRandom
//  901  *
//  902  * @brief
//  903  *
//  904  * @param   uint8 pData - pointer to the data
//  905  *
//  906  * @return  None
//  907  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  908 void MT_SysRandom()
MT_SysRandom:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function MT_SysRandom
        CODE
//  909 {
        FUNCALL MT_SysRandom, Onboard_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysRandom, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  910   uint16 randValue = Onboard_rand();
        ; Setup parameters for call to function Onboard_rand
        LCALL   `??Onboard_rand::?relay`; Banked call to: Onboard_rand
//  911   uint8 retArray[2];
//  912 
//  913   retArray[0] = LO_UINT16(randValue);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
//  914   retArray[1] = HI_UINT16(randValue);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  915 
//  916   /* Build and send back the response */
//  917   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
??CrossCallReturnLabel_31:
        MOV     R2,#0xc
        SJMP    ?Subroutine2
//  918 }
          CFI EndBlock cfiBlock44
//  919 
//  920 /***************************************************************************************************
//  921  * @fn      MT_SysAdcRead
//  922  *
//  923  * @brief   Reading ADC value, temperature sensor and voltage
//  924  *
//  925  * @param   uint8 pBuf - pointer to the data
//  926  *
//  927  * @return  None
//  928  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  929 void MT_SysAdcRead(uint8 *pBuf)
MT_SysAdcRead:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function MT_SysAdcRead
        CODE
//  930 {
        FUNCALL MT_SysAdcRead, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysAdcRead, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysAdcRead, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysAdcRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  931 #ifndef HAL_BOARD_LM3S
//  932   uint8 channel, resolution;
//  933   uint16 tempValue;
//  934   uint8 retArray[2];
//  935   uint8 cmdId;
//  936 
//  937   /* parse header */
//  938   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine9 & 0xFFFF
//  939   pBuf += MT_RPC_FRAME_HDR_SZ;
//  940 
//  941   /* Channel */
//  942   channel = *pBuf++;
??CrossCallReturnLabel_9:
        MOV     R1,A
//  943 
//  944   /* Resolution */
//  945   resolution = *pBuf++;
//  946 
//  947   /* Voltage reading */
//  948   switch (channel)
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for MT_SysAdcRead>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_0
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        14
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        15
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_3
        CODE
//  949   {
//  950     /* Analog input channel */
//  951     case HAL_ADC_CHANNEL_0:
//  952     case HAL_ADC_CHANNEL_1:
//  953     case HAL_ADC_CHANNEL_2:
//  954     case HAL_ADC_CHANNEL_3:
//  955     case HAL_ADC_CHANNEL_4:
//  956     case HAL_ADC_CHANNEL_5:
//  957     case HAL_ADC_CHANNEL_6:
//  958     case HAL_ADC_CHANNEL_7:
//  959       tempValue = HalAdcRead(channel, resolution);
??MT_SysAdcRead_0:
        ; Setup parameters for call to function HalAdcRead
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        SJMP    ??MT_SysAdcRead_4
//  960       break;
//  961 
//  962     /* Temperature sensor */
//  963     case(HAL_ADC_CHANNEL_TEMP):
//  964       tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
??MT_SysAdcRead_1:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0xe
        SJMP    ??MT_SysAdcRead_4
//  965       break;
//  966 
//  967     /* Voltage reading */
//  968     case(HAL_ADC_CHANNEL_VDD):
//  969       tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
??MT_SysAdcRead_2:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0xf
??MT_SysAdcRead_4:
        LCALL   `??HalAdcRead::?relay`; Banked call to: HalAdcRead
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R0,?V0
        MOV     R1,?V1
//  970       break;
        SJMP    ??MT_SysAdcRead_5
//  971 
//  972     /* Undefined channels */
//  973     default:
//  974       tempValue = 0x00;
??MT_SysAdcRead_3:
        MOV     R0,#0x0
        MOV     R1,#0x0
//  975       break;
//  976   }
//  977 
//  978   retArray[0] = LO_UINT16(tempValue);
??MT_SysAdcRead_5:
        MOV     A,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  979   retArray[1] = HI_UINT16(tempValue);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        LCALL   ??Subroutine25_0 & 0xFFFF
//  980 
//  981   /* Build and send back the response */
//  982   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
??CrossCallReturnLabel_34:
        MOV     A,R6
        MOV     R2,A
          CFI EndBlock cfiBlock45
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  983 #endif /* #ifndef HAL_BOARD_LM3S */
//  984 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x2
          CFI EndBlock cfiBlock46
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI VB SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndBlock cfiBlock47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function MT_SysOsalNVLength
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_SysRandom
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+-2
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOV     A,R3
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function MT_SysPing
          CFI Conditional ??CrossCallReturnLabel_32
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-7
          CFI CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function MT_SysOsalNVRead
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+-2
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function MT_SysAdcRead
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+-2
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function MT_SysOsalNVLength
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+-2
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function MT_SysRandom
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+-2
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x2
        RET
          CFI (cfiCond51) CFA_SP SP+-5
          CFI (cfiCond52) CFA_SP SP+0
          CFI (cfiCond53) CFA_SP SP+0
          CFI (cfiCond54) CFA_SP SP+0
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiPicker56) CFA_SP SP+0
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function MT_SysOsalStopTimer
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function MT_SysAdcRead
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+-2
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker59 Using cfiCommon1
          CFI (cfiPicker59) NoFunction
          CFI (cfiPicker59) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI (cfiCond57) CFA_SP SP+0
          CFI (cfiCond58) CFA_SP SP+0
          CFI (cfiPicker59) CFA_SP SP+0
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiPicker59
//  985 
//  986 /**************************************************************************************************
//  987  * @fn      MT_SysGpio
//  988  *
//  989  * @brief   ZAccel RPC interface for controlling the available GPIO pins.
//  990  *
//  991  * @param   uint8 pBuf - pointer to the data
//  992  *
//  993  * @return  None
//  994  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  995 void MT_SysGpio(uint8 *pBuf)
MT_SysGpio:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function MT_SysGpio
        CODE
//  996 {
        FUNCALL MT_SysGpio, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
//  997   uint8 cmd, val;
//  998   GPIO_Op_t op;
//  999 
// 1000   cmd = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
// 1001   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1002 
// 1003   op = (GPIO_Op_t)(*pBuf++);
// 1004   val = *pBuf;
// 1005 
// 1006   switch (op)
// 1007   {
// 1008     case GPIO_DIR:
// 1009       if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
// 1010       if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
// 1011       if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
// 1012       if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
// 1013       break;
// 1014 
// 1015     case GPIO_TRI:
// 1016       if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
// 1017       if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
// 1018       if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
// 1019       if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
// 1020       break;
// 1021 
// 1022     case GPIO_SET:
// 1023       if (val & BV(0)) {GPIO_SET(0);}
// 1024       if (val & BV(1)) {GPIO_SET(1);}
// 1025       if (val & BV(2)) {GPIO_SET(2);}
// 1026       if (val & BV(3)) {GPIO_SET(3);}
// 1027       break;
// 1028 
// 1029     case GPIO_CLR:
// 1030       if (val & BV(0)) {GPIO_CLR(0);}
// 1031       if (val & BV(1)) {GPIO_CLR(1);}
// 1032       if (val & BV(2)) {GPIO_CLR(2);}
// 1033       if (val & BV(3)) {GPIO_CLR(3);}
// 1034       break;
// 1035 
// 1036     case GPIO_TOG:
// 1037       if (val & BV(0)) {GPIO_TOG(0);}
// 1038       if (val & BV(1)) {GPIO_TOG(1);}
// 1039       if (val & BV(2)) {GPIO_TOG(2);}
// 1040       if (val & BV(3)) {GPIO_TOG(3);}
// 1041       break;
// 1042 
// 1043     case GPIO_GET:
// 1044       break;
// 1045 
// 1046     case GPIO_HiD:
// 1047       (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
// 1048       break;
// 1049 
// 1050     default:
// 1051       break;
// 1052   }
// 1053 
// 1054   val  = (GPIO_GET(0)) ? BV(0) : 0;
// 1055   val |= (GPIO_GET(1)) ? BV(1) : 0;
// 1056   val |= (GPIO_GET(2)) ? BV(2) : 0;
// 1057   val |= (GPIO_GET(3)) ? BV(3) : 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        LCALL   ??Subroutine28_0 & 0xFFFF
// 1058 
// 1059   /* Build and send back the response */
// 1060   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
??CrossCallReturnLabel_38:
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1061 }
        MOV     A,#0x1
        SJMP    ??Subroutine26_0
          CFI EndBlock cfiBlock60

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
        MOV     A,#0x2
          CFI EndBlock cfiBlock61
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 8)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
          CFI Valid
          CFI EndBlock cfiBlock62
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock63
// 1062 
// 1063 /**************************************************************************************************
// 1064  * @fn      MT_SysStackTune
// 1065  *
// 1066  * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
// 1067  *
// 1068  * @param   uint8 pBuf - pointer to the data
// 1069  *
// 1070  * @return  None
// 1071  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1072 void MT_SysStackTune(uint8 *pBuf)
MT_SysStackTune:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI Function MT_SysStackTune
        CODE
// 1073 {
        FUNCALL MT_SysStackTune, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysStackTune, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysStackTune, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysStackTune, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
// 1074   uint8 cmd, rtrn;
// 1075 
// 1076   cmd = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
// 1077   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1078 
// 1079   switch (*pBuf++)
        MOV     A,R2
        ADD     A,#0x3
        MOV     R0,A
        CLR     A
        ADDC    A,R3
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JZ      ??MT_SysStackTune_0
        DEC     A
        JZ      ??MT_SysStackTune_1
        SJMP    ??MT_SysStackTune_2
// 1080   {
// 1081   case STK_TX_PWR:
// 1082     rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
??MT_SysStackTune_0:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R1,#-0x20
        SJMP    ??MT_SysStackTune_3
// 1083     break;
// 1084 
// 1085   case STK_RX_ON_IDLE:
// 1086     if ((*pBuf != TRUE) && (*pBuf != FALSE))
??MT_SysStackTune_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??MT_SysStackTune_4
        MOVX    A,@DPTR
        JZ      ??MT_SysStackTune_4
// 1087     {
// 1088       (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
        ; Setup parameters for call to function ZMacGetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x52
        LCALL   `??ZMacGetReq::?relay`; Banked call to: ZMacGetReq
        SJMP    ??MT_SysStackTune_5
// 1089     }
// 1090     else
// 1091     {
// 1092       rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
??MT_SysStackTune_4:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R1,#0x52
??MT_SysStackTune_3:
        LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysStackTune_6
// 1093     }
// 1094     break;
// 1095 
// 1096   default:
// 1097     rtrn = ZInvalidParameter;
??MT_SysStackTune_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
??MT_SysStackTune_6:
        MOVX    @DPTR,A
// 1098     break;
// 1099   }
// 1100 
// 1101   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
??MT_SysStackTune_5:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LJMP    ?Subroutine0 & 0xFFFF
// 1102 }
          CFI EndBlock cfiBlock64
// 1103 
// 1104 /***************************************************************************************************
// 1105  * @fn      MT_SysSetUtcTime
// 1106  *
// 1107  * @brief   Set the OSAL UTC Time. UTC rollover is: 06:28:16 02/07/2136
// 1108  *
// 1109  * @param   pBuf - pointer to time parameters
// 1110  *
// 1111  * @return  None
// 1112  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1113 void MT_SysSetUtcTime(uint8 *pBuf)
MT_SysSetUtcTime:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
        CODE
// 1114 {
        FUNCALL MT_SysSetUtcTime, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_ConvertUTCSecs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_setClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1115   uint8 cmdId;
// 1116   uint8 retStat;
// 1117   UTCTime utcSecs;
// 1118 
// 1119   /* Parse header */
// 1120   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0,A
// 1121   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        JNC     ??MT_SysSetUtcTime_0
        INC     R7
// 1122 
// 1123   utcSecs = osal_build_uint32( pBuf, 4 );
??MT_SysSetUtcTime_0:
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_build_uint32::?relay`; Banked call to: osal_build_uint32
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
// 1124   if ( utcSecs == 0 )
        MOV     A,R2
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JZ      $+5
        LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
// 1125   {
// 1126     UTCTimeStruct utc;
// 1127 
// 1128     /* Skip past UTC time */
// 1129     pBuf += 4;
// 1130 
// 1131     /* Get time and date parameters */
// 1132     utc.hour = *pBuf++;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine16 & 0xFFFF
// 1133     utc.minutes = *pBuf++;
??CrossCallReturnLabel_18:
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine16 & 0xFFFF
// 1134     utc.seconds = *pBuf++;
??CrossCallReturnLabel_19:
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine15 & 0xFFFF
// 1135     utc.month = (*pBuf++) - 1;
??CrossCallReturnLabel_16:
        MOVX    A,@DPTR
        DEC     A
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine15 & 0xFFFF
// 1136     utc.day = (*pBuf++) - 1;
??CrossCallReturnLabel_17:
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1137     utc.year = osal_build_uint16 ( pBuf );
        ; Setup parameters for call to function osal_build_uint16
        MOV     A,R6
        ADD     A,#0x9
        MOV     R2,A
        CLR     A
        ADDC    A,R7
        MOV     R3,A
        LCALL   `??osal_build_uint16::?relay`; Banked call to: osal_build_uint16
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1138 
// 1139     if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
// 1140         (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x18
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3c
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3c
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xc
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x1f
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_2 & 0xFFFF
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,#0x30
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x8
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x78
        MOV     A,R1
        SUBB    A,#0x0
        JNC     ??MT_SysSetUtcTime_2
// 1141     {
// 1142       /* Got past the course filter, now check for leap year */
// 1143       if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??MT_SysSetUtcTime_3
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#-0x70
        MOV     R3,#0x1
        LCALL   ?US_DIV_MOD
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JZ      ??MT_SysSetUtcTime_4
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V3,R3
        MOV     A,R2
        ORL     A,?V3
        JZ      ??MT_SysSetUtcTime_5
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3
        JNZ     ??MT_SysSetUtcTime_5
??MT_SysSetUtcTime_4:
        MOV     R0,#0x1d
        SJMP    ??MT_SysSetUtcTime_6
??MT_SysSetUtcTime_5:
        MOV     R0,#0x1c
??MT_SysSetUtcTime_6:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R0
        JNC     ??MT_SysSetUtcTime_2
// 1144       {
// 1145         /* Numbers look reasonable, convert to UTC */
// 1146         utcSecs = osal_ConvertUTCSecs( &utc );
??MT_SysSetUtcTime_3:
        ; Setup parameters for call to function osal_ConvertUTCSecs
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_ConvertUTCSecs::?relay`; Banked call to: osal_ConvertUTCSecs
        MOV     ?V4,R2
        MOV     ?V5,R3
        MOV     ?V6,R4
        MOV     ?V7,R5
// 1147       }
// 1148     }
// 1149   }
// 1150 
// 1151   if ( utcSecs == 0 )
??MT_SysSetUtcTime_1:
        MOV     A,?V4
        ORL     A,?V5
        ORL     A,?V6
        ORL     A,?V7
        JNZ     ??MT_SysSetUtcTime_7
// 1152   {
// 1153     /* Bad parameter(s) */
// 1154     retStat = ZInvalidParameter;
??MT_SysSetUtcTime_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        SJMP    ??MT_SysSetUtcTime_8
// 1155   }
// 1156   else
// 1157   {
// 1158     /* Parameters accepted, set the time */
// 1159     osal_setClock( utcSecs );
??MT_SysSetUtcTime_7:
        ; Setup parameters for call to function osal_setClock
        MOV     R2,?V4
        MOV     R3,?V5
        MOV     R4,?V6
        MOV     R5,?V7
        LCALL   `??osal_setClock::?relay`; Banked call to: osal_setClock
// 1160     retStat = ZSuccess;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
// 1161   }
??MT_SysSetUtcTime_8:
        LCALL   ??Subroutine28_0 & 0xFFFF
// 1162 
// 1163   /* Build and send back the response */
// 1164   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1165                                  cmdId, 1, &retStat);
??CrossCallReturnLabel_39:
        MOV     R2,?V0
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1166 }
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock65

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function MT_SysSetUtcTime
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+-2
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_20:
        RET
          CFI (cfiCond66) CFA_SP SP+0
          CFI (cfiCond67) CFA_SP SP+0
          CFI (cfiPicker68) CFA_SP SP+0
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-4
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function MT_SysSetUtcTime
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_19
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+-4
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function MT_SysSetUtcTime
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_16
          CFI (cfiCond71) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond71) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond71) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond71) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond71) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond71) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond71) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond71) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond71) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond71) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond71) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond71) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond71) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond71) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond71) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond71) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond71) CFA_SP SP+-4
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function MT_SysSetUtcTime
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_17
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+-4
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker73 Using cfiCommon1
          CFI (cfiPicker73) NoFunction
          CFI (cfiPicker73) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond69) CFA_SP SP+-2
          CFI (cfiCond70) CFA_SP SP+-2
          CFI (cfiCond71) CFA_SP SP+-2
          CFI (cfiCond72) CFA_SP SP+-2
          CFI (cfiPicker73) CFA_SP SP+0
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiPicker73

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond74 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function MT_SysSetUtcTime
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+-2
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_21:
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond74) CFA_SP SP+0
          CFI (cfiCond75) CFA_SP SP+0
          CFI (cfiPicker76) CFA_SP SP+0
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function MT_SysOsalNVDelete
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function MT_SysOsalTimerExpired
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+-2
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function MT_SysGpio
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond81) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond81) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond81) CFA_SP SP+-7
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function MT_SysSetUtcTime
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+-2
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function MT_SysOsalNVDelete
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+-2
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function MT_SysOsalTimerExpired
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+-2
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker85 Using cfiCommon1
          CFI (cfiPicker85) NoFunction
          CFI (cfiPicker85) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x1
        RET
          CFI (cfiCond80) CFA_SP SP+0
          CFI (cfiCond81) CFA_SP SP+-5
          CFI (cfiCond82) CFA_SP SP+0
          CFI (cfiCond83) CFA_SP SP+0
          CFI (cfiCond84) CFA_SP SP+0
          CFI (cfiPicker85) CFA_SP SP+0
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiPicker85
// 1167 
// 1168 /***************************************************************************************************
// 1169  * @fn      MT_SysGetUtcTime
// 1170  *
// 1171  * @brief   Get the OSAL UTC time
// 1172  *
// 1173  * @param   None
// 1174  *
// 1175  * @return  32-bit and Parsed UTC time
// 1176  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1177 void MT_SysGetUtcTime(void)
MT_SysGetUtcTime:
          CFI Block cfiBlock86 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
        CODE
// 1178 {
        FUNCALL MT_SysGetUtcTime, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_getClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_ConvertUTCTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1179   uint8 len;
// 1180   uint8 *buf;
// 1181 
// 1182   len = sizeof( UTCTime ) + sizeof( UTCTimeStruct );
// 1183 
// 1184   buf = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     R6,?V0
        MOV     R7,?V1
// 1185   if ( buf )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??MT_SysGetUtcTime_0 & 0xFFFF
// 1186   {
// 1187     uint8 *pBuf;
// 1188     UTCTime utcSecs;
// 1189     UTCTimeStruct utcTime;
// 1190 
// 1191     // Get current 32-bit UTC time and parse it
// 1192     utcSecs = osal_getClock();
        ; Setup parameters for call to function osal_getClock
        LCALL   `??osal_getClock::?relay`; Banked call to: osal_getClock
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     ?V2,R4
        MOV     ?V3,R5
// 1193     osal_ConvertUTCTime( &utcTime, utcSecs );
        ; Setup parameters for call to function osal_ConvertUTCTime
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP101_8
        LCALL   `??osal_ConvertUTCTime::?relay`; Banked call to: osal_ConvertUTCTime
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1194 
// 1195     // Start with 32-bit UTC time
// 1196     pBuf = osal_buffer_uint32( buf, utcSecs );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_buffer_uint32::?relay`; Banked call to: osal_buffer_uint32
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1197 
// 1198     // Concatenate parsed UTC time fields
// 1199     *pBuf++ = utcTime.hour;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
// 1200     *pBuf++ = utcTime.minutes;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_22:
        MOVX    @DPTR,A
// 1201     *pBuf++ = utcTime.seconds;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_23:
        INC     DPTR
        MOVX    @DPTR,A
// 1202     *pBuf++ = utcTime.month + 1;  // Convert to human numbers
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        MOVX    @DPTR,A
// 1203     *pBuf++ = utcTime.day + 1;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_13:
        INC     DPTR
        MOVX    @DPTR,A
// 1204     *pBuf++ = LO_UINT16( utcTime.year );
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        MOVX    @DPTR,A
// 1205     *pBuf++ = HI_UINT16( utcTime.year );
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        INC     DPTR
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        INC     DPTR
        MOVX    @DPTR,A
// 1206 
// 1207     /* Build and send back the response */
// 1208     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1209                                    MT_SYS_GET_TIME, (uint8)(pBuf-buf), buf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,R6
        MOV     R0,A
        MOV     A,R2
        ADD     A,#0x7
        CLR     C
        SUBB    A,R0
        MOV     R3,A
        MOV     R2,#0x11
        MOV     R1,#0x61
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1210 
// 1211     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
// 1212   }
// 1213 }
??MT_SysGetUtcTime_0:
        MOV     A,#0x7
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function MT_SysGetUtcTime
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+-2
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker89 Using cfiCommon1
          CFI (cfiPicker89) NoFunction
          CFI (cfiPicker89) Picker
        MOVX    A,@DPTR
        INC     A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond87) CFA_SP SP+0
          CFI (cfiCond88) CFA_SP SP+0
          CFI (cfiPicker89) CFA_SP SP+0
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiPicker89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond90 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function MT_SysGetUtcTime
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+-2
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker92 Using cfiCommon1
          CFI (cfiPicker92) NoFunction
          CFI (cfiPicker92) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_24:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI (cfiCond90) CFA_SP SP+0
          CFI (cfiCond91) CFA_SP SP+0
          CFI (cfiPicker92) CFA_SP SP+0
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function MT_SysGetUtcTime
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+-2
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function MT_SysGetUtcTime
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_10
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+-4
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function MT_SysGetUtcTime
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_11
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+-4
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        RET
          CFI (cfiCond93) CFA_SP SP+0
          CFI (cfiCond94) CFA_SP SP+0
          CFI (cfiCond95) CFA_SP SP+-2
          CFI (cfiCond96) CFA_SP SP+-2
          CFI (cfiPicker97) CFA_SP SP+0
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97
// 1214 
// 1215 /***************************************************************************************************
// 1216  * @fn      MT_SysSetTxPower
// 1217  *
// 1218  * @brief   Set the transmit power.
// 1219  *
// 1220  * @param   pBuf - MT message containing the ZMacTransmitPower_t power level to set.
// 1221  *
// 1222  * @return  None
// 1223  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1224 void MT_SysSetTxPower(uint8 *pBuf)
MT_SysSetTxPower:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function MT_SysSetTxPower
        CODE
// 1225 {
        FUNCALL MT_SysSetTxPower, macRadioSetTxPower
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetTxPower, MAC_MlmeSetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetTxPower, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 1226   /* A local variable to hold the signed dBm value of TxPower that is being requested. */
// 1227   uint8 signed_dBm_of_TxPower_requeseted;
// 1228 
// 1229   /*
// 1230    * A local variable to hold the signed dBm value of TxPower that can be set which is closest to
// 1231    * the requested dBm value of TxPower, but which is also valid according to a complex set of
// 1232    * compile-time and run-time configuration which is interpreted by the macRadioSetTxPower()
// 1233    * function.
// 1234    */
// 1235   uint8 signed_dBm_of_TxPower_range_corrected;
// 1236 
// 1237   /* Parse the requested dBm from the RPC message. */
// 1238   signed_dBm_of_TxPower_requeseted = pBuf[MT_RPC_POS_DAT0];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1239 
// 1240   /*
// 1241    * MAC_MlmeSetReq() will store an out-of-range dBm parameter value into the NIB. So it is not
// 1242    * possible to learn the actual dBm value that will be set by invoking MACMlmeGetReq().
// 1243    * But this actual dBm value is a required return value in the SRSP to this SREQ. Therefore,
// 1244    * it is necessary to make this redundant pre-call to macRadioSetTxPower() here in order to run
// 1245    * the code that will properly constrain the requested dBm to a valid range based on both the
// 1246    * compile-time and the run-time configurations that affect the available valid ranges
// 1247    * (i.e. MAC_MlmeSetReq() itself will invoke for a second time the macRadioSetTxPower() function).
// 1248    */
// 1249   signed_dBm_of_TxPower_range_corrected = macRadioSetTxPower(signed_dBm_of_TxPower_requeseted);
        ; Setup parameters for call to function macRadioSetTxPower
        MOV     R1,A
        LCALL   `??macRadioSetTxPower::?relay`; Banked call to: macRadioSetTxPower
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 1250 
// 1251   /*
// 1252    * Call the function to store the requested dBm in the MAC PIB and to set the TxPower as closely
// 1253    * as possible within the TxPower range that is valid for the compile-time and run-time
// 1254    * configuration.
// 1255    */
// 1256   (void)MAC_MlmeSetReq(MAC_PHY_TRANSMIT_POWER_SIGNED, &signed_dBm_of_TxPower_requeseted);
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#-0x20
        LCALL   `??MAC_MlmeSetReq::?relay`; Banked call to: MAC_MlmeSetReq
// 1257 
// 1258   /* Build and send back the response that includes the actual dBm TxPower that can be set. */
// 1259   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1260                                        MT_SYS_SET_TX_POWER, 1,
// 1261                                        &signed_dBm_of_TxPower_range_corrected);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP102_8
        MOV     R3,#0x1
        MOV     R2,#0x14
        LJMP    ?Subroutine1 & 0xFFFF
// 1262 }
          CFI EndBlock cfiBlock98
// 1263 
// 1264 #if defined ( FEATURE_SYSTEM_STATS )
// 1265 /***************************************************************************************************
// 1266  * @fn      MT_SysZDiagsInitStats
// 1267  *
// 1268  * @brief   Initialize the statistics table in NV or restore values from
// 1269  *          NV into the Statistics table in RAM
// 1270  *
// 1271  * @param   None
// 1272  *
// 1273  * @return  None
// 1274  ***************************************************************************************************/
// 1275 void MT_SysZDiagsInitStats(void)
// 1276 {
// 1277   uint8 retValue;
// 1278 
// 1279   retValue = ZDiagsInitStats();
// 1280 
// 1281   /* Build and send back the response */
// 1282   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1283                                 MT_SYS_ZDIAGS_INIT_STATS, 1, &retValue);
// 1284 }
// 1285 
// 1286 /***************************************************************************************************
// 1287  * @fn      MT_SysZDiagsClearStats
// 1288  *
// 1289  * @brief   Clears the statistics table in RAM and NV if option flag set.
// 1290  *
// 1291  * @param   uint8 pBuf - pointer to the data
// 1292  *
// 1293  * @return  None
// 1294  ***************************************************************************************************/
// 1295 void MT_SysZDiagsClearStats(uint8 *pBuf)
// 1296 {
// 1297   uint8 cmdId;
// 1298   uint8 clearNV;
// 1299   uint32 sysClock;
// 1300   uint8 retBuf[4];
// 1301 
// 1302   /* parse header */
// 1303   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1304   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1305 
// 1306   clearNV = *pBuf;
// 1307 
// 1308   /* returns the system clock of the time when the statistics were cleared */
// 1309   sysClock = ZDiagsClearStats( clearNV );
// 1310 
// 1311   retBuf[0] = BREAK_UINT32( sysClock, 0);
// 1312   retBuf[1] = BREAK_UINT32( sysClock, 1);
// 1313   retBuf[2] = BREAK_UINT32( sysClock, 2);
// 1314   retBuf[3] = BREAK_UINT32( sysClock, 3);
// 1315 
// 1316   /* Build and send back the response */
// 1317   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1318                                cmdId, 4, retBuf);
// 1319 }
// 1320 
// 1321 /***************************************************************************************************
// 1322  * @fn      MT_SysZDiagsGetStatsAttr
// 1323  *
// 1324  * @brief   Reads specific system (attribute) ID statistics and/or metrics.
// 1325  *
// 1326  * @param   uint8 pBuf - pointer to the data
// 1327  *
// 1328  * @return  None
// 1329  ***************************************************************************************************/
// 1330 void MT_SysZDiagsGetStatsAttr(uint8 *pBuf)
// 1331 {
// 1332   uint8 cmdId;
// 1333   uint16 attributeId;
// 1334   uint32 attrValue;
// 1335   uint8 retBuf[4];
// 1336 
// 1337   /* parse header */
// 1338   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1339   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1340 
// 1341   /* Get the Attribute ID */
// 1342   attributeId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1343 
// 1344   attrValue = ZDiagsGetStatsAttr( attributeId );
// 1345 
// 1346   retBuf[0] = BREAK_UINT32( attrValue, 0);
// 1347   retBuf[1] = BREAK_UINT32( attrValue, 1);
// 1348   retBuf[2] = BREAK_UINT32( attrValue, 2);
// 1349   retBuf[3] = BREAK_UINT32( attrValue, 3);
// 1350 
// 1351   /* Build and send back the response */
// 1352   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1353                                cmdId, 4, retBuf);
// 1354 }
// 1355 
// 1356 /***************************************************************************************************
// 1357  * @fn      MT_SysZDiagsRestoreStatsFromNV
// 1358  *
// 1359  * @brief   Restores the statistics table from NV into the RAM table.
// 1360  *
// 1361  * @param   None
// 1362  *
// 1363  * @return  None
// 1364  ***************************************************************************************************/
// 1365 void MT_SysZDiagsRestoreStatsFromNV(void)
// 1366 {
// 1367   uint8 retValue;
// 1368 
// 1369   retValue = ZDiagsRestoreStatsFromNV();
// 1370 
// 1371   /* Build and send back the response */
// 1372   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1373                                 MT_SYS_ZDIAGS_RESTORE_STATS_NV, 1, &retValue);
// 1374 }
// 1375 
// 1376 /***************************************************************************************************
// 1377  * @fn      MT_SysZDiagsSaveStatsToNV
// 1378  *
// 1379  * @brief   Saves the statistics table from RAM to NV.
// 1380  *
// 1381  * @param   None
// 1382  *
// 1383  * @return  None
// 1384  ***************************************************************************************************/
// 1385 void MT_SysZDiagsSaveStatsToNV(void)
// 1386 {
// 1387   uint32 sysClock;
// 1388   uint8 retBuf[4];
// 1389 
// 1390   /* returns the system clock of the time when the statistics were saved to NV */
// 1391   sysClock = ZDiagsSaveStatsToNV();
// 1392 
// 1393   retBuf[0] = BREAK_UINT32( sysClock, 0);
// 1394   retBuf[1] = BREAK_UINT32( sysClock, 1);
// 1395   retBuf[2] = BREAK_UINT32( sysClock, 2);
// 1396   retBuf[3] = BREAK_UINT32( sysClock, 3);
// 1397 
// 1398   /* Build and send back the response */
// 1399   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1400                                MT_SYS_ZDIAGS_SAVE_STATS_TO_NV, 4, retBuf);
// 1401 }
// 1402 #endif /* FEATURE_SYSTEM_STATS */
// 1403 
// 1404 #endif /* MT_SYS_FUNC */
// 1405 
// 1406 /***************************************************************************************************
// 1407  * SUPPORT
// 1408  ***************************************************************************************************/
// 1409 
// 1410 /***************************************************************************************************
// 1411  * @fn      MT_SysResetInd()
// 1412  *
// 1413  * @brief   Sends a ZTOOL "reset response" message.
// 1414  *
// 1415  * @param   None
// 1416  *
// 1417  * @return  None
// 1418  *
// 1419  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1420 void MT_SysResetInd(void)
MT_SysResetInd:
          CFI Block cfiBlock99 Using cfiCommon0
          CFI Function MT_SysResetInd
        CODE
// 1421 {
        FUNCALL MT_SysResetInd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysResetInd, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1422   uint8 retArray[6];
// 1423 
// 1424   retArray[0] = ResetReason();   /* Reason */
        MOV     A,0x9d
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1425   osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0,#MTVersionString & 0xff
        MOV     ?V1,#(MTVersionString >> 8) & 0xff
        MOV     ?V2,#0x0
        MOV     R0,#?V0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1426 
// 1427   /* Send out Reset Response message */
// 1428   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
// 1429                                 sizeof(retArray), retArray);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?XSP + 0
        MOV     R5,?XSP + 1
        MOV     R3,#0x6
        MOV     R2,#-0x80
        MOV     R1,#0x41
        LCALL   `??MT_BuildAndSendZToolResponse::?relay`; Banked call to: MT_BuildAndSendZToolResponse
// 1430 }
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI R6 SameValue
          CFI VB SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI R7 SameValue
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI CFA_SP SP+-3
          CFI CFA_XSP16 XSP16+0
          CFI EndBlock cfiBlock99
        REQUIRE SLEEPSTA
// 1431 
// 1432 /***************************************************************************************************
// 1433  * @fn      MT_SysOsalTimerExpired()
// 1434  *
// 1435  * @brief   Sends a SYS Osal Timer Expired
// 1436  *
// 1437  * @param   None
// 1438  *
// 1439  * @return  None
// 1440  *
// 1441  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1442 void MT_SysOsalTimerExpired(uint8 Id)
MT_SysOsalTimerExpired:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI Function MT_SysOsalTimerExpired
        CODE
// 1443 {
        FUNCALL MT_SysOsalTimerExpired, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LCALL   ?Subroutine13 & 0xFFFF
// 1444   uint8 retValue;
// 1445   retValue = Id;
// 1446   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
??CrossCallReturnLabel_36:
        MOV     R2,#-0x7f
        MOV     R1,#0x41
        LJMP    ??Subroutine22_0 & 0xFFFF
          CFI EndBlock cfiBlock100
// 1447 }
// 1448 
// 1449 #if defined ( MT_SYS_JAMMER_FEATURE )
// 1450 /***************************************************************************************************
// 1451  * @fn      MT_SysJammerParameters
// 1452  *
// 1453  * @brief   Set the Jammer detection parameters.
// 1454  *
// 1455  * @param   pBuf - MT message containing the parameters.
// 1456  *
// 1457  * @return  None
// 1458  ***************************************************************************************************/
// 1459 void MT_SysJammerParameters( uint8 *pBuf )
// 1460 {
// 1461   uint8 status = SUCCESS;
// 1462   
// 1463   // Adjust for the data
// 1464   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1465   
// 1466   // Number of continuous events needed to detect Jam
// 1467   jammerContinuousEvents = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1468   jammerDetections = jammerContinuousEvents;
// 1469   pBuf += 2;
// 1470   
// 1471   // Noise Level need to be a Jam
// 1472   jammerHighNoiseLevel = *pBuf++;
// 1473   
// 1474   // The time between each noise level reading
// 1475   jammerDetectPeriodTime = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
// 1476   
// 1477   // Update the timer
// 1478   osal_start_reload_timer( jammerTaskID, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
// 1479   
// 1480   /* Build and send back the response that includes the actual dBm TxPower that can be set. */
// 1481   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1482                                        MT_SYS_JAMMER_PARAMETERS, 1, &status );
// 1483 }
// 1484 
// 1485 /***************************************************************************************************
// 1486  * @fn      MT_SysJammerInd()
// 1487  *
// 1488  * @brief   Sends a jammer indication message.
// 1489  *
// 1490  * @param   jammerInd - TRUE if jammer detected, FALSE if changed to undetected
// 1491  *
// 1492  * @return  None
// 1493  *
// 1494  ***************************************************************************************************/
// 1495 void MT_SysJammerInd( uint8 jammerInd )
// 1496 {
// 1497   /* Send out Reset Response message */
// 1498   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_JAMMER_IND,
// 1499                                 1, &jammerInd );
// 1500 }
// 1501 
// 1502 /***************************************************************************************************
// 1503  * @fn      jammerInit()
// 1504  *
// 1505  * @brief   Jammer Detection task initialization function
// 1506  *
// 1507  * @param   taskId - task ID 
// 1508  *
// 1509  * @return  None
// 1510  *
// 1511  ***************************************************************************************************/
// 1512 void jammerInit( uint8 taskId )
// 1513 {
// 1514   jammerTaskID = taskId; 
// 1515   
// 1516   // Start the jammer check timer
// 1517   osal_start_reload_timer( taskId, JAMMER_CHECK_EVT, jammerDetectPeriodTime );
// 1518 }
// 1519 
// 1520 /***************************************************************************************************
// 1521  * @fn      jammerEventLoop()
// 1522  *
// 1523  * @brief   Jammer Detection task event processing function
// 1524  *
// 1525  * @param   taskId - task ID 
// 1526  * @param   events - task events 
// 1527  *
// 1528  * @return  remaining events
// 1529  *
// 1530  ***************************************************************************************************/
// 1531 uint16 jammerEventLoop( uint8 taskId, uint16 events )
// 1532 {
// 1533   osal_event_hdr_t  *pMsg;
// 1534 
// 1535   if (events & SYS_EVENT_MSG)
// 1536   {
// 1537     if ( (pMsg = (osal_event_hdr_t *) osal_msg_receive( taskId )) != NULL )
// 1538     {
// 1539       switch ( pMsg->event )
// 1540       {
// 1541         default:
// 1542           break;
// 1543       }
// 1544 
// 1545       osal_msg_deallocate( (byte *)pMsg );
// 1546     }
// 1547 
// 1548     events ^= SYS_EVENT_MSG;
// 1549   }
// 1550   else if ( events & JAMMER_CHECK_EVT )
// 1551   {
// 1552     // Make sure we aren't currently receiving a message
// 1553     // and the radio is active.
// 1554     if ( MAC_RX_IS_PHYSICALLY_ACTIVE() == MAC_RX_ACTIVE_NO_ACTIVITY )
// 1555     {
// 1556       int8 rssiDbm = -128;
// 1557       
// 1558       // Read the noise level
// 1559       if ( RSSISTAT & 0x01 )
// 1560       {
// 1561         /* Add the RSSI offset */  
// 1562         rssiDbm = RSSI + MAC_RADIO_RSSI_OFFSET;
// 1563 
// 1564         /* Adjust for external PA/LNA, if any */
// 1565         MAC_RADIO_RSSI_LNA_OFFSET( rssiDbm );
// 1566       
// 1567         // Check for a noise level that's high
// 1568         if ( jammerDetections && (rssiDbm  > jammerHighNoiseLevel) )
// 1569         {
// 1570           jammerDetections--;
// 1571           if ( jammerDetections == 0 )
// 1572           {
// 1573             // Jam detected
// 1574             MT_SysJammerInd( TRUE );
// 1575           }
// 1576         }
// 1577         else if ( rssiDbm <= jammerHighNoiseLevel )
// 1578         {
// 1579           if ( jammerDetections == 0 )
// 1580           {
// 1581             // Jam cleared
// 1582             MT_SysJammerInd( FALSE );
// 1583           }
// 1584           jammerDetections = jammerContinuousEvents;
// 1585         }
// 1586       }
// 1587     }
// 1588     events ^= JAMMER_CHECK_EVT;
// 1589   }
// 1590   else
// 1591   {
// 1592     events = 0;  /* Discard unknown events. */
// 1593   }
// 1594 
// 1595   return ( events );
// 1596 }
// 1597 #endif // MT_SYS_JAMMER_FEATURE
// 1598 
// 1599 #if defined ( MT_SYS_SNIFFER_FEATURE )
// 1600 /***************************************************************************************************
// 1601  * @fn      MT_SysSnifferParameters
// 1602  *
// 1603  * @brief   Set the sniffer parameters.
// 1604  *
// 1605  * @param   pBuf - MT message containing the parameters.
// 1606  *
// 1607  * @return  None
// 1608  ***************************************************************************************************/
// 1609 void MT_SysSnifferParameters( uint8 *pBuf )
// 1610 {
// 1611   uint8 status = SUCCESS;
// 1612   uint8 param;
// 1613   
// 1614   // Adjust for the data
// 1615   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1616   
// 1617   // Noise Level need to be a Jam
// 1618   param = *pBuf++;
// 1619   
// 1620   if ( param == MT_SYS_SNIFFER_DISABLE )
// 1621   {
// 1622     // Disable Sniffer
// 1623     HAL_BOARD_DISABLE_INTEGRATED_SNIFFER();
// 1624     sniffer = FALSE;
// 1625   }
// 1626   else if ( param == MT_SYS_SNIFFER_ENABLE )
// 1627   {
// 1628     // Enable the Sniffer
// 1629     HAL_BOARD_ENABLE_INTEGRATED_SNIFFER();
// 1630     sniffer = TRUE;
// 1631   }
// 1632   else if ( param == MT_SYS_SNIFFER_GET_SETTING )
// 1633   {
// 1634     status = sniffer; // sniffer setting
// 1635   }
// 1636   else 
// 1637   {
// 1638     status = INVALIDPARAMETER;
// 1639   }
// 1640   
// 1641   /* Build and send back the response that includes the actual dBm TxPower that can be set. */
// 1642   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1643                                        MT_SYS_SNIFFER_PARAMETERS, 1, &status );
// 1644 }
// 1645 #endif // MT_SYS_SNIFFER_FEATURE
// 1646 
// 1647 /**************************************************************************************************
// 1648  * @fn          powerOffSoc
// 1649  *
// 1650  * @brief       put the device in lowest power mode infinitely.
// 1651  *
// 1652  * input parameters
// 1653  *
// 1654  * None.
// 1655  *
// 1656  * output parameters
// 1657  *
// 1658  * None.
// 1659  *
// 1660  * @return      None.
// 1661  **************************************************************************************************
// 1662  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1663 void powerOffSoc(void)
powerOffSoc:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI Function powerOffSoc
        CODE
// 1664 {
        ; Saved register size: 0
        ; Auto size: 0
// 1665 #ifdef ENABLE_MT_SYS_RESET_SHUTDOWN
// 1666   HAL_DISABLE_INTERRUPTS();
// 1667 
// 1668   /* turn off the RF front end device */
// 1669   //TBD, based on the rf-front-end being used
// 1670 
// 1671   /* turn off the receiver */
// 1672   MAC_RADIO_RXTX_OFF();
// 1673   
// 1674   /* just in case a receive was about to start, flush the receive FIFO */
// 1675   MAC_RADIO_FLUSH_RX_FIFO();
// 1676   
// 1677   /* clear any receive interrupt that happened to squeak through */
// 1678   MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG();
// 1679   
// 1680   /* put MAC timer to sleep */
// 1681   MAC_RADIO_TIMER_SLEEP();
// 1682   
// 1683   /* power of radio */
// 1684   MAC_RADIO_TURN_OFF_POWER();
// 1685   
// 1686   STIF = 0; //HAL_SLEEP_TIMER_CLEAR_INT;
// 1687   
// 1688   if (ZNP_CFG1_UART == znpCfg1)
// 1689   {
// 1690     HalUARTSuspend();
// 1691   }
// 1692   
// 1693   /* Prep CC2530 power mode */
// 1694   //HAL_SLEEP_PREP_POWER_MODE(3);
// 1695   SLEEPCMD &= ~PMODE; /* clear mode bits */
// 1696   SLEEPCMD |= 3;      /* set mode bits  to PM3 */
// 1697   while (!(STLOAD & LDRDY));
// 1698   
// 1699   while (1) //just in case we wake up for some unknown reason
// 1700   {
// 1701     PCON = halSleepPconValue; //execution is suppose to halt with this command. Interrupts are disabled, so the only way to exit this state is using a hardware reset.
// 1702     asm("NOP");
// 1703   }
// 1704 #endif
// 1705 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock101

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysCommandProcessing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysReset::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysPing::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysPing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysVersion::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysVersion

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysSetExtAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysGetExtAddr::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGetExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVWrite::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVItemInit::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVItemInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVDelete::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalNVLength::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalStartTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalStartTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalStopTimer::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalStopTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysRandom::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysRandom

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysAdcRead::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysAdcRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysGpio::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGpio

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysStackTune::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysStackTune

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysSetUtcTime::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetUtcTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysGetUtcTime::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGetUtcTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysSetTxPower::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetTxPower

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysResetInd::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysResetInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??MT_SysOsalTimerExpired::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalTimerExpired

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
`??powerOffSoc::?relay`:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    powerOffSoc

        END
// 1706 
// 1707 /***************************************************************************************************
// 1708  ***************************************************************************************************/
// 
// 2 780 bytes in segment BANKED_CODE
//   138 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//    10 bytes in segment XDATA_ROM_C
// 
// 2 918 bytes of CODE  memory
//    10 bytes of CONST memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: none
